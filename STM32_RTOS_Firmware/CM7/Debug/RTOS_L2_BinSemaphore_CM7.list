
RTOS_L2_BinSemaphore_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f108  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800f3a8  0800f3a8  000103a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f474  0800f474  0001107c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f474  0800f474  00010474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f47c  0800f47c  0001107c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f47c  0800f47c  0001047c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f480  0800f480  00010480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  24000000  0800f484  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c50  2400007c  0800f500  0001107c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004ccc  0800f500  00011ccc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001107c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002adba  00000000  00000000  000110aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005526  00000000  00000000  0003be64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f40  00000000  00000000  00041390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000184c  00000000  00000000  000432d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003eaea  00000000  00000000  00044b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cf9c  00000000  00000000  00083606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00190fdd  00000000  00000000  000b05a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0024157f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086f8  00000000  00000000  002415c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00249cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f390 	.word	0x0800f390

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	0800f390 	.word	0x0800f390

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3d      	ldr	r3, [pc, #244]	@ (80006cc <SystemInit+0xfc>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005da:	4a3c      	ldr	r2, [pc, #240]	@ (80006cc <SystemInit+0xfc>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b39      	ldr	r3, [pc, #228]	@ (80006cc <SystemInit+0xfc>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a38      	ldr	r2, [pc, #224]	@ (80006cc <SystemInit+0xfc>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b37      	ldr	r3, [pc, #220]	@ (80006d0 <SystemInit+0x100>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b34      	ldr	r3, [pc, #208]	@ (80006d0 <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a32      	ldr	r2, [pc, #200]	@ (80006d0 <SystemInit+0x100>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b31      	ldr	r3, [pc, #196]	@ (80006d4 <SystemInit+0x104>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a30      	ldr	r2, [pc, #192]	@ (80006d4 <SystemInit+0x104>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b2e      	ldr	r3, [pc, #184]	@ (80006d4 <SystemInit+0x104>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2d      	ldr	r3, [pc, #180]	@ (80006d4 <SystemInit+0x104>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492c      	ldr	r1, [pc, #176]	@ (80006d4 <SystemInit+0x104>)
 8000624:	4b2c      	ldr	r3, [pc, #176]	@ (80006d8 <SystemInit+0x108>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b29      	ldr	r3, [pc, #164]	@ (80006d0 <SystemInit+0x100>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b26      	ldr	r3, [pc, #152]	@ (80006d0 <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a24      	ldr	r2, [pc, #144]	@ (80006d0 <SystemInit+0x100>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b23      	ldr	r3, [pc, #140]	@ (80006d4 <SystemInit+0x104>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b21      	ldr	r3, [pc, #132]	@ (80006d4 <SystemInit+0x104>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b20      	ldr	r3, [pc, #128]	@ (80006d4 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <SystemInit+0x104>)
 800065a:	4a20      	ldr	r2, [pc, #128]	@ (80006dc <SystemInit+0x10c>)
 800065c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1d      	ldr	r3, [pc, #116]	@ (80006d4 <SystemInit+0x104>)
 8000660:	4a1f      	ldr	r2, [pc, #124]	@ (80006e0 <SystemInit+0x110>)
 8000662:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <SystemInit+0x104>)
 8000666:	4a1f      	ldr	r2, [pc, #124]	@ (80006e4 <SystemInit+0x114>)
 8000668:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1a      	ldr	r3, [pc, #104]	@ (80006d4 <SystemInit+0x104>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b18      	ldr	r3, [pc, #96]	@ (80006d4 <SystemInit+0x104>)
 8000672:	4a1c      	ldr	r2, [pc, #112]	@ (80006e4 <SystemInit+0x114>)
 8000674:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b15      	ldr	r3, [pc, #84]	@ (80006d4 <SystemInit+0x104>)
 800067e:	4a19      	ldr	r2, [pc, #100]	@ (80006e4 <SystemInit+0x114>)
 8000680:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <SystemInit+0x104>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a11      	ldr	r2, [pc, #68]	@ (80006d4 <SystemInit+0x104>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <SystemInit+0x104>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <SystemInit+0x118>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800069e:	4a12      	ldr	r2, [pc, #72]	@ (80006e8 <SystemInit+0x118>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <SystemInit+0x11c>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <SystemInit+0x120>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <SystemInit+0x124>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <SystemInit+0x128>)
 80006bc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000ed00 	.word	0xe000ed00
 80006d0:	52002000 	.word	0x52002000
 80006d4:	58024400 	.word	0x58024400
 80006d8:	eaf6ed7f 	.word	0xeaf6ed7f
 80006dc:	02020200 	.word	0x02020200
 80006e0:	01ff0000 	.word	0x01ff0000
 80006e4:	01010280 	.word	0x01010280
 80006e8:	580000c0 	.word	0x580000c0
 80006ec:	5c001000 	.word	0x5c001000
 80006f0:	ffff0000 	.word	0xffff0000
 80006f4:	51008108 	.word	0x51008108
 80006f8:	52004000 	.word	0x52004000

080006fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000702:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <MX_DMA_Init+0x3c>)
 8000704:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000708:	4a0b      	ldr	r2, [pc, #44]	@ (8000738 <MX_DMA_Init+0x3c>)
 800070a:	f043 0301 	orr.w	r3, r3, #1
 800070e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <MX_DMA_Init+0x3c>)
 8000714:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2105      	movs	r1, #5
 8000724:	200b      	movs	r0, #11
 8000726:	f001 fe95 	bl	8002454 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800072a:	200b      	movs	r0, #11
 800072c:	f001 feac 	bl	8002488 <HAL_NVIC_EnableIRQ>

}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	58024400 	.word	0x58024400

0800073c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4a07      	ldr	r2, [pc, #28]	@ (8000768 <vApplicationGetIdleTaskMemory+0x2c>)
 800074c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	4a06      	ldr	r2, [pc, #24]	@ (800076c <vApplicationGetIdleTaskMemory+0x30>)
 8000752:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2280      	movs	r2, #128	@ 0x80
 8000758:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	240000a0 	.word	0x240000a0
 800076c:	24000140 	.word	0x24000140

08000770 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000770:	b5b0      	push	{r4, r5, r7, lr}
 8000772:	b08a      	sub	sp, #40	@ 0x28
 8000774:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSem */
  osSemaphoreDef(BinSem);
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	@ 0x24
  BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	2101      	movs	r1, #1
 8000784:	4618      	mov	r0, r3
 8000786:	f00c faff 	bl	800cd88 <osSemaphoreCreate>
 800078a:	4603      	mov	r3, r0
 800078c:	4a0b      	ldr	r2, [pc, #44]	@ (80007bc <MX_FREERTOS_Init+0x4c>)
 800078e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of normaltask */
  osThreadDef(normaltask, Startnormaltask, osPriorityNormal, 0, 128);
 8000790:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <MX_FREERTOS_Init+0x50>)
 8000792:	1d3c      	adds	r4, r7, #4
 8000794:	461d      	mov	r5, r3
 8000796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800079a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800079e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  normaltaskHandle = osThreadCreate(osThread(normaltask), NULL);
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f00c fa8e 	bl	800ccc8 <osThreadCreate>
 80007ac:	4603      	mov	r3, r0
 80007ae:	4a05      	ldr	r2, [pc, #20]	@ (80007c4 <MX_FREERTOS_Init+0x54>)
 80007b0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80007b2:	bf00      	nop
 80007b4:	3728      	adds	r7, #40	@ 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bdb0      	pop	{r4, r5, r7, pc}
 80007ba:	bf00      	nop
 80007bc:	2400009c 	.word	0x2400009c
 80007c0:	0800f3b4 	.word	0x0800f3b4
 80007c4:	24000098 	.word	0x24000098

080007c8 <Startnormaltask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startnormaltask */
void Startnormaltask(void const * argument)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startnormaltask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f00c fac5 	bl	800cd60 <osDelay>
 80007d6:	e7fb      	b.n	80007d0 <Startnormaltask+0x8>

080007d8 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08c      	sub	sp, #48	@ 0x30
 80007dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	4b62      	ldr	r3, [pc, #392]	@ (8000978 <MX_GPIO_Init+0x1a0>)
 80007f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f4:	4a60      	ldr	r2, [pc, #384]	@ (8000978 <MX_GPIO_Init+0x1a0>)
 80007f6:	f043 0304 	orr.w	r3, r3, #4
 80007fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007fe:	4b5e      	ldr	r3, [pc, #376]	@ (8000978 <MX_GPIO_Init+0x1a0>)
 8000800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000804:	f003 0304 	and.w	r3, r3, #4
 8000808:	61bb      	str	r3, [r7, #24]
 800080a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080c:	4b5a      	ldr	r3, [pc, #360]	@ (8000978 <MX_GPIO_Init+0x1a0>)
 800080e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000812:	4a59      	ldr	r2, [pc, #356]	@ (8000978 <MX_GPIO_Init+0x1a0>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000818:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800081c:	4b56      	ldr	r3, [pc, #344]	@ (8000978 <MX_GPIO_Init+0x1a0>)
 800081e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b53      	ldr	r3, [pc, #332]	@ (8000978 <MX_GPIO_Init+0x1a0>)
 800082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000830:	4a51      	ldr	r2, [pc, #324]	@ (8000978 <MX_GPIO_Init+0x1a0>)
 8000832:	f043 0301 	orr.w	r3, r3, #1
 8000836:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800083a:	4b4f      	ldr	r3, [pc, #316]	@ (8000978 <MX_GPIO_Init+0x1a0>)
 800083c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000848:	4b4b      	ldr	r3, [pc, #300]	@ (8000978 <MX_GPIO_Init+0x1a0>)
 800084a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800084e:	4a4a      	ldr	r2, [pc, #296]	@ (8000978 <MX_GPIO_Init+0x1a0>)
 8000850:	f043 0310 	orr.w	r3, r3, #16
 8000854:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000858:	4b47      	ldr	r3, [pc, #284]	@ (8000978 <MX_GPIO_Init+0x1a0>)
 800085a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800085e:	f003 0310 	and.w	r3, r3, #16
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b44      	ldr	r3, [pc, #272]	@ (8000978 <MX_GPIO_Init+0x1a0>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800086c:	4a42      	ldr	r2, [pc, #264]	@ (8000978 <MX_GPIO_Init+0x1a0>)
 800086e:	f043 0302 	orr.w	r3, r3, #2
 8000872:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000876:	4b40      	ldr	r3, [pc, #256]	@ (8000978 <MX_GPIO_Init+0x1a0>)
 8000878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800087c:	f003 0302 	and.w	r3, r3, #2
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000884:	4b3c      	ldr	r3, [pc, #240]	@ (8000978 <MX_GPIO_Init+0x1a0>)
 8000886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800088a:	4a3b      	ldr	r2, [pc, #236]	@ (8000978 <MX_GPIO_Init+0x1a0>)
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000894:	4b38      	ldr	r3, [pc, #224]	@ (8000978 <MX_GPIO_Init+0x1a0>)
 8000896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800089a:	f003 0308 	and.w	r3, r3, #8
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a2:	4b35      	ldr	r3, [pc, #212]	@ (8000978 <MX_GPIO_Init+0x1a0>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a8:	4a33      	ldr	r2, [pc, #204]	@ (8000978 <MX_GPIO_Init+0x1a0>)
 80008aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008b2:	4b31      	ldr	r3, [pc, #196]	@ (8000978 <MX_GPIO_Init+0x1a0>)
 80008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SAMPLE_IMU_Pin|SAMPLE_LASER_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 80008c6:	482d      	ldr	r0, [pc, #180]	@ (800097c <MX_GPIO_Init+0x1a4>)
 80008c8:	f004 fdd8 	bl	800547c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80008cc:	2332      	movs	r3, #50	@ 0x32
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008dc:	230b      	movs	r3, #11
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4826      	ldr	r0, [pc, #152]	@ (8000980 <MX_GPIO_Init+0x1a8>)
 80008e8:	f004 fc18 	bl	800511c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80008ec:	2386      	movs	r3, #134	@ 0x86
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008fc:	230b      	movs	r3, #11
 80008fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	481f      	ldr	r0, [pc, #124]	@ (8000984 <MX_GPIO_Init+0x1ac>)
 8000908:	f004 fc08 	bl	800511c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800090c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800091e:	230b      	movs	r3, #11
 8000920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4817      	ldr	r0, [pc, #92]	@ (8000988 <MX_GPIO_Init+0x1b0>)
 800092a:	f004 fbf7 	bl	800511c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = SAMPLE_IMU_Pin|SAMPLE_LASER_Pin;
 800092e:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	480d      	ldr	r0, [pc, #52]	@ (800097c <MX_GPIO_Init+0x1a4>)
 8000948:	f004 fbe8 	bl	800511c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800094c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800095e:	230b      	movs	r3, #11
 8000960:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4804      	ldr	r0, [pc, #16]	@ (800097c <MX_GPIO_Init+0x1a4>)
 800096a:	f004 fbd7 	bl	800511c <HAL_GPIO_Init>

}
 800096e:	bf00      	nop
 8000970:	3730      	adds	r7, #48	@ 0x30
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	58024400 	.word	0x58024400
 800097c:	58021800 	.word	0x58021800
 8000980:	58020800 	.word	0x58020800
 8000984:	58020000 	.word	0x58020000
 8000988:	58020400 	.word	0x58020400

0800098c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000990:	4b1b      	ldr	r3, [pc, #108]	@ (8000a00 <MX_I2C1_Init+0x74>)
 8000992:	4a1c      	ldr	r2, [pc, #112]	@ (8000a04 <MX_I2C1_Init+0x78>)
 8000994:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401650;
 8000996:	4b1a      	ldr	r3, [pc, #104]	@ (8000a00 <MX_I2C1_Init+0x74>)
 8000998:	4a1b      	ldr	r2, [pc, #108]	@ (8000a08 <MX_I2C1_Init+0x7c>)
 800099a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800099c:	4b18      	ldr	r3, [pc, #96]	@ (8000a00 <MX_I2C1_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a2:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <MX_I2C1_Init+0x74>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a8:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <MX_I2C1_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009ae:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <MX_I2C1_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009b4:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <MX_I2C1_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ba:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <MX_I2C1_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a00 <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009c6:	480e      	ldr	r0, [pc, #56]	@ (8000a00 <MX_I2C1_Init+0x74>)
 80009c8:	f004 fdba 	bl	8005540 <HAL_I2C_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009d2:	f000 fd4f 	bl	8001474 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009d6:	2100      	movs	r1, #0
 80009d8:	4809      	ldr	r0, [pc, #36]	@ (8000a00 <MX_I2C1_Init+0x74>)
 80009da:	f005 fb01 	bl	8005fe0 <HAL_I2CEx_ConfigAnalogFilter>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009e4:	f000 fd46 	bl	8001474 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009e8:	2100      	movs	r1, #0
 80009ea:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_I2C1_Init+0x74>)
 80009ec:	f005 fb43 	bl	8006076 <HAL_I2CEx_ConfigDigitalFilter>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009f6:	f000 fd3d 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	24000340 	.word	0x24000340
 8000a04:	40005400 	.word	0x40005400
 8000a08:	00401650 	.word	0x00401650

08000a0c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	@ (8000a80 <MX_I2C2_Init+0x74>)
 8000a12:	4a1c      	ldr	r2, [pc, #112]	@ (8000a84 <MX_I2C2_Init+0x78>)
 8000a14:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xC0000E12;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <MX_I2C2_Init+0x74>)
 8000a18:	4a1b      	ldr	r2, [pc, #108]	@ (8000a88 <MX_I2C2_Init+0x7c>)
 8000a1a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a1c:	4b18      	ldr	r3, [pc, #96]	@ (8000a80 <MX_I2C2_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a22:	4b17      	ldr	r3, [pc, #92]	@ (8000a80 <MX_I2C2_Init+0x74>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a28:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <MX_I2C2_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <MX_I2C2_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a34:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <MX_I2C2_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <MX_I2C2_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <MX_I2C2_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a46:	480e      	ldr	r0, [pc, #56]	@ (8000a80 <MX_I2C2_Init+0x74>)
 8000a48:	f004 fd7a 	bl	8005540 <HAL_I2C_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a52:	f000 fd0f 	bl	8001474 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4809      	ldr	r0, [pc, #36]	@ (8000a80 <MX_I2C2_Init+0x74>)
 8000a5a:	f005 fac1 	bl	8005fe0 <HAL_I2CEx_ConfigAnalogFilter>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a64:	f000 fd06 	bl	8001474 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <MX_I2C2_Init+0x74>)
 8000a6c:	f005 fb03 	bl	8006076 <HAL_I2CEx_ConfigDigitalFilter>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a76:	f000 fcfd 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	24000394 	.word	0x24000394
 8000a84:	40005800 	.word	0x40005800
 8000a88:	c0000e12 	.word	0xc0000e12

08000a8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b0bc      	sub	sp, #240	@ 0xf0
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa4:	f107 0318 	add.w	r3, r7, #24
 8000aa8:	22c0      	movs	r2, #192	@ 0xc0
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f00e fb5d 	bl	800f16c <memset>
  if(i2cHandle->Instance==I2C1)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a58      	ldr	r2, [pc, #352]	@ (8000c18 <HAL_I2C_MspInit+0x18c>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d15c      	bne.n	8000b76 <HAL_I2C_MspInit+0xea>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000abc:	f04f 0208 	mov.w	r2, #8
 8000ac0:	f04f 0300 	mov.w	r3, #0
 8000ac4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ace:	f107 0318 	add.w	r3, r7, #24
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f006 fcde 	bl	8007494 <HAL_RCCEx_PeriphCLKConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000ade:	f000 fcc9 	bl	8001474 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	4b4e      	ldr	r3, [pc, #312]	@ (8000c1c <HAL_I2C_MspInit+0x190>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae8:	4a4c      	ldr	r2, [pc, #304]	@ (8000c1c <HAL_I2C_MspInit+0x190>)
 8000aea:	f043 0302 	orr.w	r3, r3, #2
 8000aee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000af2:	4b4a      	ldr	r3, [pc, #296]	@ (8000c1c <HAL_I2C_MspInit+0x190>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b00:	2380      	movs	r3, #128	@ 0x80
 8000b02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b06:	2312      	movs	r3, #18
 8000b08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b22:	4619      	mov	r1, r3
 8000b24:	483e      	ldr	r0, [pc, #248]	@ (8000c20 <HAL_I2C_MspInit+0x194>)
 8000b26:	f004 faf9 	bl	800511c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b32:	2312      	movs	r3, #18
 8000b34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b44:	2304      	movs	r3, #4
 8000b46:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4833      	ldr	r0, [pc, #204]	@ (8000c20 <HAL_I2C_MspInit+0x194>)
 8000b52:	f004 fae3 	bl	800511c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b56:	4b31      	ldr	r3, [pc, #196]	@ (8000c1c <HAL_I2C_MspInit+0x190>)
 8000b58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b5c:	4a2f      	ldr	r2, [pc, #188]	@ (8000c1c <HAL_I2C_MspInit+0x190>)
 8000b5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b62:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b66:	4b2d      	ldr	r3, [pc, #180]	@ (8000c1c <HAL_I2C_MspInit+0x190>)
 8000b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b74:	e04b      	b.n	8000c0e <HAL_I2C_MspInit+0x182>
  else if(i2cHandle->Instance==I2C2)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a2a      	ldr	r2, [pc, #168]	@ (8000c24 <HAL_I2C_MspInit+0x198>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d146      	bne.n	8000c0e <HAL_I2C_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000b80:	f04f 0208 	mov.w	r2, #8
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b92:	f107 0318 	add.w	r3, r7, #24
 8000b96:	4618      	mov	r0, r3
 8000b98:	f006 fc7c 	bl	8007494 <HAL_RCCEx_PeriphCLKConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_I2C_MspInit+0x11a>
      Error_Handler();
 8000ba2:	f000 fc67 	bl	8001474 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c1c <HAL_I2C_MspInit+0x190>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bac:	4a1b      	ldr	r2, [pc, #108]	@ (8000c1c <HAL_I2C_MspInit+0x190>)
 8000bae:	f043 0302 	orr.w	r3, r3, #2
 8000bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <HAL_I2C_MspInit+0x190>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bc4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000bc8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bcc:	2312      	movs	r3, #18
 8000bce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000bde:	2304      	movs	r3, #4
 8000be0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000be8:	4619      	mov	r1, r3
 8000bea:	480d      	ldr	r0, [pc, #52]	@ (8000c20 <HAL_I2C_MspInit+0x194>)
 8000bec:	f004 fa96 	bl	800511c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <HAL_I2C_MspInit+0x190>)
 8000bf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bf6:	4a09      	ldr	r2, [pc, #36]	@ (8000c1c <HAL_I2C_MspInit+0x190>)
 8000bf8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bfc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <HAL_I2C_MspInit+0x190>)
 8000c02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
}
 8000c0e:	bf00      	nop
 8000c10:	37f0      	adds	r7, #240	@ 0xf0
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	58024400 	.word	0x58024400
 8000c20:	58020400 	.word	0x58020400
 8000c24:	40005800 	.word	0x40005800

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c32:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c34:	bf00      	nop
 8000c36:	4b62      	ldr	r3, [pc, #392]	@ (8000dc0 <main+0x198>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d004      	beq.n	8000c4c <main+0x24>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	1e5a      	subs	r2, r3, #1
 8000c46:	607a      	str	r2, [r7, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	dcf4      	bgt.n	8000c36 <main+0xe>
  if ( timeout < 0 )
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	da01      	bge.n	8000c56 <main+0x2e>
  {
  Error_Handler();
 8000c52:	f000 fc0f 	bl	8001474 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c56:	f001 fab9 	bl	80021cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5a:	f000 f8df 	bl	8000e1c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c5e:	4b58      	ldr	r3, [pc, #352]	@ (8000dc0 <main+0x198>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c64:	4a56      	ldr	r2, [pc, #344]	@ (8000dc0 <main+0x198>)
 8000c66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c6e:	4b54      	ldr	r3, [pc, #336]	@ (8000dc0 <main+0x198>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f004 fc31 	bl	80054e4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c82:	2100      	movs	r1, #0
 8000c84:	2000      	movs	r0, #0
 8000c86:	f004 fc47 	bl	8005518 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c8e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c90:	bf00      	nop
 8000c92:	4b4b      	ldr	r3, [pc, #300]	@ (8000dc0 <main+0x198>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d104      	bne.n	8000ca8 <main+0x80>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	1e5a      	subs	r2, r3, #1
 8000ca2:	607a      	str	r2, [r7, #4]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	dcf4      	bgt.n	8000c92 <main+0x6a>
if ( timeout < 0 )
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	da01      	bge.n	8000cb2 <main+0x8a>
{
Error_Handler();
 8000cae:	f000 fbe1 	bl	8001474 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb2:	f7ff fd91 	bl	80007d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cb6:	f7ff fd21 	bl	80006fc <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000cba:	f001 f99f 	bl	8001ffc <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8000cbe:	f000 fcad 	bl	800161c <MX_UART4_Init>
  MX_UART7_Init();
 8000cc2:	f000 fd43 	bl	800174c <MX_UART7_Init>
  MX_USART1_UART_Init();
 8000cc6:	f000 fd8d 	bl	80017e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000cca:	f000 fdd7 	bl	800187c <MX_USART2_UART_Init>
  MX_UART5_Init();
 8000cce:	f000 fcf1 	bl	80016b4 <MX_UART5_Init>
  MX_I2C1_Init();
 8000cd2:	f7ff fe5b 	bl	800098c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000cd6:	f000 fe21 	bl	800191c <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8000cda:	f7ff fe97 	bl	8000a0c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /******************************* CREATE INTEGER QUEUE **********************/
  xQueueLaser = xQueueCreate(10, sizeof(int32_t[2]));  // Laser gửi 5 giá trị
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2108      	movs	r1, #8
 8000ce2:	200a      	movs	r0, #10
 8000ce4:	f00c fe61 	bl	800d9aa <xQueueGenericCreate>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	4a36      	ldr	r2, [pc, #216]	@ (8000dc4 <main+0x19c>)
 8000cec:	6013      	str	r3, [r2, #0]
  xQueueIMU = xQueueCreate(10, sizeof(int32_t[3]));    // IMU gửi 3 giá trị
 8000cee:	2200      	movs	r2, #0
 8000cf0:	210c      	movs	r1, #12
 8000cf2:	200a      	movs	r0, #10
 8000cf4:	f00c fe59 	bl	800d9aa <xQueueGenericCreate>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4a33      	ldr	r2, [pc, #204]	@ (8000dc8 <main+0x1a0>)
 8000cfc:	6013      	str	r3, [r2, #0]
  xQueueIR = xQueueCreate(10, sizeof(int32_t[16]));    // IR gửi 16 giá trị
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2140      	movs	r1, #64	@ 0x40
 8000d02:	200a      	movs	r0, #10
 8000d04:	f00c fe51 	bl	800d9aa <xQueueGenericCreate>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	4a30      	ldr	r2, [pc, #192]	@ (8000dcc <main+0x1a4>)
 8000d0c:	6013      	str	r3, [r2, #0]
  xQueueRxData = xQueueCreate(10, sizeof(int32_t[5]));
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2114      	movs	r1, #20
 8000d12:	200a      	movs	r0, #10
 8000d14:	f00c fe49 	bl	800d9aa <xQueueGenericCreate>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	4a2d      	ldr	r2, [pc, #180]	@ (8000dd0 <main+0x1a8>)
 8000d1c:	6013      	str	r3, [r2, #0]

  /******************************** CREATE SEMAPHORE *************************/
  xBinarySemaphore = xSemaphoreCreateBinary();
 8000d1e:	2203      	movs	r2, #3
 8000d20:	2100      	movs	r1, #0
 8000d22:	2001      	movs	r0, #1
 8000d24:	f00c fe41 	bl	800d9aa <xQueueGenericCreate>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	4a2a      	ldr	r2, [pc, #168]	@ (8000dd4 <main+0x1ac>)
 8000d2c:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(xBinarySemaphore);
 8000d2e:	4b29      	ldr	r3, [pc, #164]	@ (8000dd4 <main+0x1ac>)
 8000d30:	6818      	ldr	r0, [r3, #0]
 8000d32:	2300      	movs	r3, #0
 8000d34:	2200      	movs	r2, #0
 8000d36:	2100      	movs	r1, #0
 8000d38:	f00c fe92 	bl	800da60 <xQueueGenericSend>

  /******************************** TASK RELETED ***************************/

  x1_prev = GET_Distance(&huart4);
 8000d3c:	4826      	ldr	r0, [pc, #152]	@ (8000dd8 <main+0x1b0>)
 8000d3e:	f00b ff3b 	bl	800cbb8 <GET_Distance>
 8000d42:	ee07 0a90 	vmov	s15, r0
 8000d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d4a:	4b24      	ldr	r3, [pc, #144]	@ (8000ddc <main+0x1b4>)
 8000d4c:	edc3 7a00 	vstr	s15, [r3]

	ret = HAL_UART_Receive_IT(&huart2, Upward, 11);
 8000d50:	220b      	movs	r2, #11
 8000d52:	4923      	ldr	r1, [pc, #140]	@ (8000de0 <main+0x1b8>)
 8000d54:	4823      	ldr	r0, [pc, #140]	@ (8000de4 <main+0x1bc>)
 8000d56:	f008 fe3d 	bl	80099d4 <HAL_UART_Receive_IT>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b22      	ldr	r3, [pc, #136]	@ (8000de8 <main+0x1c0>)
 8000d60:	701a      	strb	r2, [r3, #0]

  xTaskCreate(vInitTask, "Init task", 128, NULL, 3, &Init_Handler);
 8000d62:	4b22      	ldr	r3, [pc, #136]	@ (8000dec <main+0x1c4>)
 8000d64:	9301      	str	r3, [sp, #4]
 8000d66:	2303      	movs	r3, #3
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	2280      	movs	r2, #128	@ 0x80
 8000d6e:	4920      	ldr	r1, [pc, #128]	@ (8000df0 <main+0x1c8>)
 8000d70:	4820      	ldr	r0, [pc, #128]	@ (8000df4 <main+0x1cc>)
 8000d72:	f00d fa67 	bl	800e244 <xTaskCreate>

//  xTaskCreate(Sender_HPT_Task, "HPT SEND", 128, NULL, 2, &Sender_HPT_Handler);
  xTaskCreate(Read_IMU_Task, "Read IMU", 128, NULL, 2, &Read_IMU_Handler);
 8000d76:	4b20      	ldr	r3, [pc, #128]	@ (8000df8 <main+0x1d0>)
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	2280      	movs	r2, #128	@ 0x80
 8000d82:	491e      	ldr	r1, [pc, #120]	@ (8000dfc <main+0x1d4>)
 8000d84:	481e      	ldr	r0, [pc, #120]	@ (8000e00 <main+0x1d8>)
 8000d86:	f00d fa5d 	bl	800e244 <xTaskCreate>
  xTaskCreate(Read_IR_Task	 , "Read IR" , 128, NULL, 2, &Read_IR_Handler);
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e04 <main+0x1dc>)
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	2302      	movs	r3, #2
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	2300      	movs	r3, #0
 8000d94:	2280      	movs	r2, #128	@ 0x80
 8000d96:	491c      	ldr	r1, [pc, #112]	@ (8000e08 <main+0x1e0>)
 8000d98:	481c      	ldr	r0, [pc, #112]	@ (8000e0c <main+0x1e4>)
 8000d9a:	f00d fa53 	bl	800e244 <xTaskCreate>

  xTaskCreate(Receiver_Task, "RECEIVE", 128, NULL, 3, &Receiver_Handler);
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e10 <main+0x1e8>)
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	2303      	movs	r3, #3
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2300      	movs	r3, #0
 8000da8:	2280      	movs	r2, #128	@ 0x80
 8000daa:	491a      	ldr	r1, [pc, #104]	@ (8000e14 <main+0x1ec>)
 8000dac:	481a      	ldr	r0, [pc, #104]	@ (8000e18 <main+0x1f0>)
 8000dae:	f00d fa49 	bl	800e244 <xTaskCreate>
//  xTaskCreate(Process_Received_Data_Task, "Process_Received_Data_Task", 256, NULL, 2, NULL);

  vTaskStartScheduler();
 8000db2:	f00d fc5d 	bl	800e670 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000db6:	f7ff fcdb 	bl	8000770 <MX_FREERTOS_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dba:	bf00      	nop
 8000dbc:	e7fd      	b.n	8000dba <main+0x192>
 8000dbe:	bf00      	nop
 8000dc0:	58024400 	.word	0x58024400
 8000dc4:	24000500 	.word	0x24000500
 8000dc8:	24000504 	.word	0x24000504
 8000dcc:	24000508 	.word	0x24000508
 8000dd0:	2400050c 	.word	0x2400050c
 8000dd4:	24000510 	.word	0x24000510
 8000dd8:	24000560 	.word	0x24000560
 8000ddc:	240003ec 	.word	0x240003ec
 8000de0:	24000430 	.word	0x24000430
 8000de4:	240007b0 	.word	0x240007b0
 8000de8:	2400043b 	.word	0x2400043b
 8000dec:	240004fc 	.word	0x240004fc
 8000df0:	0800f3d0 	.word	0x0800f3d0
 8000df4:	08001245 	.word	0x08001245
 8000df8:	240004f4 	.word	0x240004f4
 8000dfc:	0800f3dc 	.word	0x0800f3dc
 8000e00:	080012a1 	.word	0x080012a1
 8000e04:	240004f8 	.word	0x240004f8
 8000e08:	0800f3e8 	.word	0x0800f3e8
 8000e0c:	080012e9 	.word	0x080012e9
 8000e10:	240004f0 	.word	0x240004f0
 8000e14:	0800f3f0 	.word	0x0800f3f0
 8000e18:	0800134d 	.word	0x0800134d

08000e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b09c      	sub	sp, #112	@ 0x70
 8000e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e26:	224c      	movs	r2, #76	@ 0x4c
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f00e f99e 	bl	800f16c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	2220      	movs	r2, #32
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f00e f998 	bl	800f16c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e3c:	2004      	movs	r0, #4
 8000e3e:	f005 fa97 	bl	8006370 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	4b31      	ldr	r3, [pc, #196]	@ (8000f0c <SystemClock_Config+0xf0>)
 8000e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e4a:	4a30      	ldr	r2, [pc, #192]	@ (8000f0c <SystemClock_Config+0xf0>)
 8000e4c:	f023 0301 	bic.w	r3, r3, #1
 8000e50:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e52:	4b2e      	ldr	r3, [pc, #184]	@ (8000f0c <SystemClock_Config+0xf0>)
 8000e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f10 <SystemClock_Config+0xf4>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e64:	4a2a      	ldr	r2, [pc, #168]	@ (8000f10 <SystemClock_Config+0xf4>)
 8000e66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b28      	ldr	r3, [pc, #160]	@ (8000f10 <SystemClock_Config+0xf4>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e78:	bf00      	nop
 8000e7a:	4b25      	ldr	r3, [pc, #148]	@ (8000f10 <SystemClock_Config+0xf4>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e86:	d1f8      	bne.n	8000e7a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e8c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000e90:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e92:	2302      	movs	r3, #2
 8000e94:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e96:	2302      	movs	r3, #2
 8000e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 45;
 8000e9e:	232d      	movs	r3, #45	@ 0x2d
 8000ea0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000eae:	230c      	movs	r3, #12
 8000eb0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f005 fac0 	bl	8006444 <HAL_RCC_OscConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000eca:	f000 fad3 	bl	8001474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ece:	233f      	movs	r3, #63	@ 0x3f
 8000ed0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ede:	2340      	movs	r3, #64	@ 0x40
 8000ee0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000ee2:	2350      	movs	r3, #80	@ 0x50
 8000ee4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8000ee6:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000eea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000eec:	2340      	movs	r3, #64	@ 0x40
 8000eee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2103      	movs	r1, #3
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f005 feff 	bl	8006cf8 <HAL_RCC_ClockConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000f00:	f000 fab8 	bl	8001474 <Error_Handler>
  }
}
 8000f04:	bf00      	nop
 8000f06:	3770      	adds	r7, #112	@ 0x70
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	58000400 	.word	0x58000400
 8000f10:	58024800 	.word	0x58024800

08000f14 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08e      	sub	sp, #56	@ 0x38
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
	if(huart == &huart4) // Laser
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4ab2      	ldr	r2, [pc, #712]	@ (80011ec <HAL_UART_RxCpltCallback+0x2d8>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	f040 80a6 	bne.w	8001076 <HAL_UART_RxCpltCallback+0x162>
	{

		int32_t Distance;
        int32_t laser_data[5];
        laser_data[0] = (int32_t)(Laser_DMA[0 + 2] | Laser_DMA[0 + 3] << 8U);
 8000f2a:	4bb1      	ldr	r3, [pc, #708]	@ (80011f0 <HAL_UART_RxCpltCallback+0x2dc>)
 8000f2c:	789b      	ldrb	r3, [r3, #2]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4baf      	ldr	r3, [pc, #700]	@ (80011f0 <HAL_UART_RxCpltCallback+0x2dc>)
 8000f32:	78db      	ldrb	r3, [r3, #3]
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	4313      	orrs	r3, r2
 8000f38:	617b      	str	r3, [r7, #20]
        laser_data[1] = (int32_t)(Laser_DMA[9 + 2] | Laser_DMA[9 + 3] << 8U);
 8000f3a:	4bad      	ldr	r3, [pc, #692]	@ (80011f0 <HAL_UART_RxCpltCallback+0x2dc>)
 8000f3c:	7adb      	ldrb	r3, [r3, #11]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4bab      	ldr	r3, [pc, #684]	@ (80011f0 <HAL_UART_RxCpltCallback+0x2dc>)
 8000f42:	7b1b      	ldrb	r3, [r3, #12]
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        laser_data[2] = (int32_t)(Laser_DMA[18 + 2] | Laser_DMA[18 + 3] << 8U);
 8000f4a:	4ba9      	ldr	r3, [pc, #676]	@ (80011f0 <HAL_UART_RxCpltCallback+0x2dc>)
 8000f4c:	7d1b      	ldrb	r3, [r3, #20]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4ba7      	ldr	r3, [pc, #668]	@ (80011f0 <HAL_UART_RxCpltCallback+0x2dc>)
 8000f52:	7d5b      	ldrb	r3, [r3, #21]
 8000f54:	021b      	lsls	r3, r3, #8
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61fb      	str	r3, [r7, #28]
        laser_data[3] = (int32_t)(Laser_DMA[27 + 2] | Laser_DMA[27 + 3] << 8U);
 8000f5a:	4ba5      	ldr	r3, [pc, #660]	@ (80011f0 <HAL_UART_RxCpltCallback+0x2dc>)
 8000f5c:	7f5b      	ldrb	r3, [r3, #29]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4ba3      	ldr	r3, [pc, #652]	@ (80011f0 <HAL_UART_RxCpltCallback+0x2dc>)
 8000f62:	7f9b      	ldrb	r3, [r3, #30]
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	4313      	orrs	r3, r2
 8000f68:	623b      	str	r3, [r7, #32]
        laser_data[4] = (int32_t)(Laser_DMA[36 + 2] | Laser_DMA[36 + 3] << 8U);
 8000f6a:	4ba1      	ldr	r3, [pc, #644]	@ (80011f0 <HAL_UART_RxCpltCallback+0x2dc>)
 8000f6c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b9f      	ldr	r3, [pc, #636]	@ (80011f0 <HAL_UART_RxCpltCallback+0x2dc>)
 8000f74:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24

        Distance = (laser_data[0] + laser_data[1] + laser_data[2] + laser_data[3] + laser_data[4]) /5;
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	441a      	add	r2, r3
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	441a      	add	r2, r3
 8000f88:	6a3b      	ldr	r3, [r7, #32]
 8000f8a:	441a      	add	r2, r3
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a98      	ldr	r2, [pc, #608]	@ (80011f4 <HAL_UART_RxCpltCallback+0x2e0>)
 8000f92:	fb82 1203 	smull	r1, r2, r2, r3
 8000f96:	1052      	asrs	r2, r2, #1
 8000f98:	17db      	asrs	r3, r3, #31
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	637b      	str	r3, [r7, #52]	@ 0x34

		 // Update Tracking Differentiator

        float x2_new = x2_prev + h * (-alpha1 * r * r * (x1_prev - Distance) - alpha2 * r * x2_prev);
 8000f9e:	4b96      	ldr	r3, [pc, #600]	@ (80011f8 <HAL_UART_RxCpltCallback+0x2e4>)
 8000fa0:	edd3 7a00 	vldr	s15, [r3]
 8000fa4:	eeb1 7a67 	vneg.f32	s14, s15
 8000fa8:	4b94      	ldr	r3, [pc, #592]	@ (80011fc <HAL_UART_RxCpltCallback+0x2e8>)
 8000faa:	edd3 7a00 	vldr	s15, [r3]
 8000fae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fb2:	4b92      	ldr	r3, [pc, #584]	@ (80011fc <HAL_UART_RxCpltCallback+0x2e8>)
 8000fb4:	edd3 7a00 	vldr	s15, [r3]
 8000fb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fbc:	4b90      	ldr	r3, [pc, #576]	@ (8001200 <HAL_UART_RxCpltCallback+0x2ec>)
 8000fbe:	edd3 6a00 	vldr	s13, [r3]
 8000fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fcc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000fd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fd4:	4b8b      	ldr	r3, [pc, #556]	@ (8001204 <HAL_UART_RxCpltCallback+0x2f0>)
 8000fd6:	edd3 6a00 	vldr	s13, [r3]
 8000fda:	4b88      	ldr	r3, [pc, #544]	@ (80011fc <HAL_UART_RxCpltCallback+0x2e8>)
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000fe4:	4b88      	ldr	r3, [pc, #544]	@ (8001208 <HAL_UART_RxCpltCallback+0x2f4>)
 8000fe6:	edd3 7a00 	vldr	s15, [r3]
 8000fea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ff2:	4b86      	ldr	r3, [pc, #536]	@ (800120c <HAL_UART_RxCpltCallback+0x2f8>)
 8000ff4:	edd3 7a00 	vldr	s15, [r3]
 8000ff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ffc:	4b82      	ldr	r3, [pc, #520]	@ (8001208 <HAL_UART_RxCpltCallback+0x2f4>)
 8000ffe:	edd3 7a00 	vldr	s15, [r3]
 8001002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001006:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        float x1_new = x1_prev + h * x2_prev;
 800100a:	4b80      	ldr	r3, [pc, #512]	@ (800120c <HAL_UART_RxCpltCallback+0x2f8>)
 800100c:	ed93 7a00 	vldr	s14, [r3]
 8001010:	4b7d      	ldr	r3, [pc, #500]	@ (8001208 <HAL_UART_RxCpltCallback+0x2f4>)
 8001012:	edd3 7a00 	vldr	s15, [r3]
 8001016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800101a:	4b79      	ldr	r3, [pc, #484]	@ (8001200 <HAL_UART_RxCpltCallback+0x2ec>)
 800101c:	edd3 7a00 	vldr	s15, [r3]
 8001020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001024:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

        // Cập nhật lại các giá trị
        x1_prev = x1_new;
 8001028:	4a75      	ldr	r2, [pc, #468]	@ (8001200 <HAL_UART_RxCpltCallback+0x2ec>)
 800102a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800102c:	6013      	str	r3, [r2, #0]
        x2_prev = x2_new;
 800102e:	4a76      	ldr	r2, [pc, #472]	@ (8001208 <HAL_UART_RxCpltCallback+0x2f4>)
 8001030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001032:	6013      	str	r3, [r2, #0]

        // Cập nhật khoảng cách và vận tốc
        velocity =  x2_new;
 8001034:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001038:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800103c:	ee17 2a90 	vmov	r2, s15
 8001040:	4b73      	ldr	r3, [pc, #460]	@ (8001210 <HAL_UART_RxCpltCallback+0x2fc>)
 8001042:	601a      	str	r2, [r3, #0]

        // Gửi dữ liệu qua hàng đợi
        DistanceData[0] = x1_new;
 8001044:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800104c:	ee17 2a90 	vmov	r2, s15
 8001050:	4b70      	ldr	r3, [pc, #448]	@ (8001214 <HAL_UART_RxCpltCallback+0x300>)
 8001052:	601a      	str	r2, [r3, #0]
        DistanceData[1] = velocity;
 8001054:	4b6e      	ldr	r3, [pc, #440]	@ (8001210 <HAL_UART_RxCpltCallback+0x2fc>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a6e      	ldr	r2, [pc, #440]	@ (8001214 <HAL_UART_RxCpltCallback+0x300>)
 800105a:	6053      	str	r3, [r2, #4]
        xQueueSendFromISR(xQueueLaser, DistanceData, &xHigherPriorityTaskWoken);
 800105c:	4b6e      	ldr	r3, [pc, #440]	@ (8001218 <HAL_UART_RxCpltCallback+0x304>)
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001064:	2300      	movs	r3, #0
 8001066:	496b      	ldr	r1, [pc, #428]	@ (8001214 <HAL_UART_RxCpltCallback+0x300>)
 8001068:	f00c fdfc 	bl	800dc64 <xQueueGenericSendFromISR>

		HAL_UART_Receive_DMA(&huart4, Laser_DMA, 45);
 800106c:	222d      	movs	r2, #45	@ 0x2d
 800106e:	4960      	ldr	r1, [pc, #384]	@ (80011f0 <HAL_UART_RxCpltCallback+0x2dc>)
 8001070:	485e      	ldr	r0, [pc, #376]	@ (80011ec <HAL_UART_RxCpltCallback+0x2d8>)
 8001072:	f008 fcfb 	bl	8009a6c <HAL_UART_Receive_DMA>
	}
	if(huart == &huart2) // IMU
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a68      	ldr	r2, [pc, #416]	@ (800121c <HAL_UART_RxCpltCallback+0x308>)
 800107a:	4293      	cmp	r3, r2
 800107c:	f040 80a7 	bne.w	80011ce <HAL_UART_RxCpltCallback+0x2ba>
	{
		int32_t imu_data[3];
		x = imu.Acceleration.Xasis_Accel = (int16_t)((Upward[3] << 8U) | Upward[4]);
 8001080:	4b67      	ldr	r3, [pc, #412]	@ (8001220 <HAL_UART_RxCpltCallback+0x30c>)
 8001082:	78db      	ldrb	r3, [r3, #3]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b21a      	sxth	r2, r3
 8001088:	4b65      	ldr	r3, [pc, #404]	@ (8001220 <HAL_UART_RxCpltCallback+0x30c>)
 800108a:	791b      	ldrb	r3, [r3, #4]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21a      	sxth	r2, r3
 8001092:	4b64      	ldr	r3, [pc, #400]	@ (8001224 <HAL_UART_RxCpltCallback+0x310>)
 8001094:	801a      	strh	r2, [r3, #0]
 8001096:	4b63      	ldr	r3, [pc, #396]	@ (8001224 <HAL_UART_RxCpltCallback+0x310>)
 8001098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109c:	ee07 3a90 	vmov	s15, r3
 80010a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a4:	4b60      	ldr	r3, [pc, #384]	@ (8001228 <HAL_UART_RxCpltCallback+0x314>)
 80010a6:	edc3 7a00 	vstr	s15, [r3]
		y = imu.Acceleration.Yasis_Accel = (int16_t)((Upward[5] << 8U) | Upward[6]);
 80010aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001220 <HAL_UART_RxCpltCallback+0x30c>)
 80010ac:	795b      	ldrb	r3, [r3, #5]
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	b21a      	sxth	r2, r3
 80010b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001220 <HAL_UART_RxCpltCallback+0x30c>)
 80010b4:	799b      	ldrb	r3, [r3, #6]
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	4b59      	ldr	r3, [pc, #356]	@ (8001224 <HAL_UART_RxCpltCallback+0x310>)
 80010be:	805a      	strh	r2, [r3, #2]
 80010c0:	4b58      	ldr	r3, [pc, #352]	@ (8001224 <HAL_UART_RxCpltCallback+0x310>)
 80010c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ce:	4b57      	ldr	r3, [pc, #348]	@ (800122c <HAL_UART_RxCpltCallback+0x318>)
 80010d0:	edc3 7a00 	vstr	s15, [r3]
		z = imu.Acceleration.Zasis_Accel = (int16_t)((Upward[7] << 8U) | Upward[8]);
 80010d4:	4b52      	ldr	r3, [pc, #328]	@ (8001220 <HAL_UART_RxCpltCallback+0x30c>)
 80010d6:	79db      	ldrb	r3, [r3, #7]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21a      	sxth	r2, r3
 80010dc:	4b50      	ldr	r3, [pc, #320]	@ (8001220 <HAL_UART_RxCpltCallback+0x30c>)
 80010de:	7a1b      	ldrb	r3, [r3, #8]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	4b4f      	ldr	r3, [pc, #316]	@ (8001224 <HAL_UART_RxCpltCallback+0x310>)
 80010e8:	809a      	strh	r2, [r3, #4]
 80010ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001224 <HAL_UART_RxCpltCallback+0x310>)
 80010ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010f0:	ee07 3a90 	vmov	s15, r3
 80010f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001230 <HAL_UART_RxCpltCallback+0x31c>)
 80010fa:	edc3 7a00 	vstr	s15, [r3]

		imu_data[0] = (int32_t) imu.Acceleration.Xasis_Accel;
 80010fe:	4b49      	ldr	r3, [pc, #292]	@ (8001224 <HAL_UART_RxCpltCallback+0x310>)
 8001100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001104:	60bb      	str	r3, [r7, #8]
		imu_data[1] = (int32_t) imu.Acceleration.Yasis_Accel;
 8001106:	4b47      	ldr	r3, [pc, #284]	@ (8001224 <HAL_UART_RxCpltCallback+0x310>)
 8001108:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800110c:	60fb      	str	r3, [r7, #12]
		imu_data[2] = (int32_t) imu.Acceleration.Zasis_Accel;
 800110e:	4b45      	ldr	r3, [pc, #276]	@ (8001224 <HAL_UART_RxCpltCallback+0x310>)
 8001110:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001114:	613b      	str	r3, [r7, #16]

		x = (float)(x/32768)*16;
 8001116:	4b44      	ldr	r3, [pc, #272]	@ (8001228 <HAL_UART_RxCpltCallback+0x314>)
 8001118:	ed93 7a00 	vldr	s14, [r3]
 800111c:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8001234 <HAL_UART_RxCpltCallback+0x320>
 8001120:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001124:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001128:	ee67 7a87 	vmul.f32	s15, s15, s14
 800112c:	4b3e      	ldr	r3, [pc, #248]	@ (8001228 <HAL_UART_RxCpltCallback+0x314>)
 800112e:	edc3 7a00 	vstr	s15, [r3]
		y = (float)(y/32768)*16;
 8001132:	4b3e      	ldr	r3, [pc, #248]	@ (800122c <HAL_UART_RxCpltCallback+0x318>)
 8001134:	ed93 7a00 	vldr	s14, [r3]
 8001138:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8001234 <HAL_UART_RxCpltCallback+0x320>
 800113c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001140:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001144:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001148:	4b38      	ldr	r3, [pc, #224]	@ (800122c <HAL_UART_RxCpltCallback+0x318>)
 800114a:	edc3 7a00 	vstr	s15, [r3]
		z = (float)(z/32768)*16;
 800114e:	4b38      	ldr	r3, [pc, #224]	@ (8001230 <HAL_UART_RxCpltCallback+0x31c>)
 8001150:	ed93 7a00 	vldr	s14, [r3]
 8001154:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001234 <HAL_UART_RxCpltCallback+0x320>
 8001158:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800115c:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001164:	4b32      	ldr	r3, [pc, #200]	@ (8001230 <HAL_UART_RxCpltCallback+0x31c>)
 8001166:	edc3 7a00 	vstr	s15, [r3]
		retVal = (float) sqrt(x*x + y*y + z*z); // Tính giá trị gia tốc trung bình
 800116a:	4b2f      	ldr	r3, [pc, #188]	@ (8001228 <HAL_UART_RxCpltCallback+0x314>)
 800116c:	ed93 7a00 	vldr	s14, [r3]
 8001170:	4b2d      	ldr	r3, [pc, #180]	@ (8001228 <HAL_UART_RxCpltCallback+0x314>)
 8001172:	edd3 7a00 	vldr	s15, [r3]
 8001176:	ee27 7a27 	vmul.f32	s14, s14, s15
 800117a:	4b2c      	ldr	r3, [pc, #176]	@ (800122c <HAL_UART_RxCpltCallback+0x318>)
 800117c:	edd3 6a00 	vldr	s13, [r3]
 8001180:	4b2a      	ldr	r3, [pc, #168]	@ (800122c <HAL_UART_RxCpltCallback+0x318>)
 8001182:	edd3 7a00 	vldr	s15, [r3]
 8001186:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800118a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800118e:	4b28      	ldr	r3, [pc, #160]	@ (8001230 <HAL_UART_RxCpltCallback+0x31c>)
 8001190:	edd3 6a00 	vldr	s13, [r3]
 8001194:	4b26      	ldr	r3, [pc, #152]	@ (8001230 <HAL_UART_RxCpltCallback+0x31c>)
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800119e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011a6:	eeb0 0b47 	vmov.f64	d0, d7
 80011aa:	f00e f8cd 	bl	800f348 <sqrt>
 80011ae:	eeb0 7b40 	vmov.f64	d7, d0
 80011b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011b6:	4b20      	ldr	r3, [pc, #128]	@ (8001238 <HAL_UART_RxCpltCallback+0x324>)
 80011b8:	edc3 7a00 	vstr	s15, [r3]

		// Gửi dữ liệu vào hàng đợi
		xQueueSendFromISR(xQueueIMU, imu_data, &xHigherPriorityTaskWoken);
 80011bc:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <HAL_UART_RxCpltCallback+0x328>)
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80011c4:	f107 0108 	add.w	r1, r7, #8
 80011c8:	2300      	movs	r3, #0
 80011ca:	f00c fd4b 	bl	800dc64 <xQueueGenericSendFromISR>

	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80011ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d007      	beq.n	80011e4 <HAL_UART_RxCpltCallback+0x2d0>
 80011d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <HAL_UART_RxCpltCallback+0x32c>)
 80011d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	f3bf 8f4f 	dsb	sy
 80011e0:	f3bf 8f6f 	isb	sy
}
 80011e4:	bf00      	nop
 80011e6:	3738      	adds	r7, #56	@ 0x38
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	24000560 	.word	0x24000560
 80011f0:	240004b8 	.word	0x240004b8
 80011f4:	66666667 	.word	0x66666667
 80011f8:	24000010 	.word	0x24000010
 80011fc:	2400000c 	.word	0x2400000c
 8001200:	240003ec 	.word	0x240003ec
 8001204:	24000014 	.word	0x24000014
 8001208:	240003f0 	.word	0x240003f0
 800120c:	24000008 	.word	0x24000008
 8001210:	240003e8 	.word	0x240003e8
 8001214:	240004e8 	.word	0x240004e8
 8001218:	24000500 	.word	0x24000500
 800121c:	240007b0 	.word	0x240007b0
 8001220:	24000430 	.word	0x24000430
 8001224:	240003f4 	.word	0x240003f4
 8001228:	24000440 	.word	0x24000440
 800122c:	24000444 	.word	0x24000444
 8001230:	24000448 	.word	0x24000448
 8001234:	47000000 	.word	0x47000000
 8001238:	2400043c 	.word	0x2400043c
 800123c:	24000504 	.word	0x24000504
 8001240:	e000ed04 	.word	0xe000ed04

08001244 <vInitTask>:

void vInitTask(void *pvParameters)
{
 8001244:	b5b0      	push	{r4, r5, r7, lr}
 8001246:	b094      	sub	sp, #80	@ 0x50
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

    uint8_t init_success[70U] = "Initialize system Successfully";
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <vInitTask+0x54>)
 800124e:	f107 0408 	add.w	r4, r7, #8
 8001252:	461d      	mov	r5, r3
 8001254:	6828      	ldr	r0, [r5, #0]
 8001256:	6869      	ldr	r1, [r5, #4]
 8001258:	68aa      	ldr	r2, [r5, #8]
 800125a:	68eb      	ldr	r3, [r5, #12]
 800125c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800125e:	6928      	ldr	r0, [r5, #16]
 8001260:	6969      	ldr	r1, [r5, #20]
 8001262:	69aa      	ldr	r2, [r5, #24]
 8001264:	c407      	stmia	r4!, {r0, r1, r2}
 8001266:	8bab      	ldrh	r3, [r5, #28]
 8001268:	7faa      	ldrb	r2, [r5, #30]
 800126a:	8023      	strh	r3, [r4, #0]
 800126c:	4613      	mov	r3, r2
 800126e:	70a3      	strb	r3, [r4, #2]
 8001270:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8001274:	2227      	movs	r2, #39	@ 0x27
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f00d ff77 	bl	800f16c <memset>
//        } while (status);
//
//        Distance = GET_Distance(&huart4) + 2U;

//    	TOF_FRAMERATE_SETTING(&huart2, 250);
        HAL_UART_Transmit(&huart3, init_success, 30U, 200U);
 800127e:	f107 0108 	add.w	r1, r7, #8
 8001282:	23c8      	movs	r3, #200	@ 0xc8
 8001284:	221e      	movs	r2, #30
 8001286:	4805      	ldr	r0, [pc, #20]	@ (800129c <vInitTask+0x58>)
 8001288:	f008 fa4e 	bl	8009728 <HAL_UART_Transmit>
        /* Suspend InitTask after initialization */
        vTaskDelete(NULL); /* Delete itself */
 800128c:	2000      	movs	r0, #0
 800128e:	f00d f929 	bl	800e4e4 <vTaskDelete>
        HAL_UART_Transmit(&huart3, init_success, 30U, 200U);
 8001292:	bf00      	nop
 8001294:	e7f3      	b.n	800127e <vInitTask+0x3a>
 8001296:	bf00      	nop
 8001298:	0800f3f8 	.word	0x0800f3f8
 800129c:	24000844 	.word	0x24000844

080012a0 <Read_IMU_Task>:
    }
}

void Read_IMU_Task(void *argument)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	uint32_t TickDelay = pdMS_TO_TICKS(5);
 80012a8:	2305      	movs	r3, #5
 80012aa:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		HAL_UART_Transmit(&huart2, Downward, 8, 1000);
 80012ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012b0:	2208      	movs	r2, #8
 80012b2:	4909      	ldr	r1, [pc, #36]	@ (80012d8 <Read_IMU_Task+0x38>)
 80012b4:	4809      	ldr	r0, [pc, #36]	@ (80012dc <Read_IMU_Task+0x3c>)
 80012b6:	f008 fa37 	bl	8009728 <HAL_UART_Transmit>

		ret = HAL_UART_Receive_IT(&huart2, Upward, 11);
 80012ba:	220b      	movs	r2, #11
 80012bc:	4908      	ldr	r1, [pc, #32]	@ (80012e0 <Read_IMU_Task+0x40>)
 80012be:	4807      	ldr	r0, [pc, #28]	@ (80012dc <Read_IMU_Task+0x3c>)
 80012c0:	f008 fb88 	bl	80099d4 <HAL_UART_Receive_IT>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <Read_IMU_Task+0x44>)
 80012ca:	701a      	strb	r2, [r3, #0]

        vTaskDelay(TickDelay);
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f00d f999 	bl	800e604 <vTaskDelay>
		HAL_UART_Transmit(&huart2, Downward, 8, 1000);
 80012d2:	bf00      	nop
 80012d4:	e7ea      	b.n	80012ac <Read_IMU_Task+0xc>
 80012d6:	bf00      	nop
 80012d8:	24000018 	.word	0x24000018
 80012dc:	240007b0 	.word	0x240007b0
 80012e0:	24000430 	.word	0x24000430
 80012e4:	2400043b 	.word	0x2400043b

080012e8 <Read_IR_Task>:
	}
}
// Task đọc cảm biến nhiệt độ
void Read_IR_Task(void *argument)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b094      	sub	sp, #80	@ 0x50
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	uint32_t TickDelay = pdMS_TO_TICKS(40);
 80012f0:	2328      	movs	r3, #40	@ 0x28
 80012f2:	64bb      	str	r3, [r7, #72]	@ 0x48
	while(1)
	{
			int32_t ir_data[16];
			D6T_getvalue(&hi2c1, tP);
 80012f4:	4912      	ldr	r1, [pc, #72]	@ (8001340 <Read_IR_Task+0x58>)
 80012f6:	4813      	ldr	r0, [pc, #76]	@ (8001344 <Read_IR_Task+0x5c>)
 80012f8:	f00d fee6 	bl	800f0c8 <D6T_getvalue>

			for(int i=0;i<16;i++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001300:	e00d      	b.n	800131e <Read_IR_Task+0x36>
			{
				ir_data[i] = (int32_t) tP[i];
 8001302:	4a0f      	ldr	r2, [pc, #60]	@ (8001340 <Read_IR_Task+0x58>)
 8001304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001306:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800130a:	461a      	mov	r2, r3
 800130c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	3350      	adds	r3, #80	@ 0x50
 8001312:	443b      	add	r3, r7
 8001314:	f843 2c48 	str.w	r2, [r3, #-72]
			for(int i=0;i<16;i++)
 8001318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800131a:	3301      	adds	r3, #1
 800131c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800131e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001320:	2b0f      	cmp	r3, #15
 8001322:	ddee      	ble.n	8001302 <Read_IR_Task+0x1a>
			}

			xQueueSend(xQueueIR, ir_data, portMAX_DELAY);
 8001324:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <Read_IR_Task+0x60>)
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	f107 0108 	add.w	r1, r7, #8
 800132c:	2300      	movs	r3, #0
 800132e:	f04f 32ff 	mov.w	r2, #4294967295
 8001332:	f00c fb95 	bl	800da60 <xQueueGenericSend>

		vTaskDelay(TickDelay);
 8001336:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001338:	f00d f964 	bl	800e604 <vTaskDelay>
	{
 800133c:	e7da      	b.n	80012f4 <Read_IR_Task+0xc>
 800133e:	bf00      	nop
 8001340:	24000410 	.word	0x24000410
 8001344:	24000340 	.word	0x24000340
 8001348:	24000508 	.word	0x24000508

0800134c <Receiver_Task>:
	}
}
void Receiver_Task(void *argument)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b09a      	sub	sp, #104	@ 0x68
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	int32_t receivedLaser[2];
	int32_t receivedIMU[3], receivedIR[16];
	uint32_t TickDelay = pdMS_TO_TICKS(40);
 8001354:	2328      	movs	r3, #40	@ 0x28
 8001356:	663b      	str	r3, [r7, #96]	@ 0x60
	while(1)
	{
        if (xQueueReceive(xQueueLaser, receivedLaser, 0) == pdTRUE)
 8001358:	4b34      	ldr	r3, [pc, #208]	@ (800142c <Receiver_Task+0xe0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001360:	2200      	movs	r2, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f00c fd1c 	bl	800dda0 <xQueueReceive>
 8001368:	4603      	mov	r3, r0
 800136a:	2b01      	cmp	r3, #1
 800136c:	d109      	bne.n	8001382 <Receiver_Task+0x36>
        {
            // Xử lý dữ liệu Laser
            TxEsp32[0] = 0xFFFA;
 800136e:	4b30      	ldr	r3, [pc, #192]	@ (8001430 <Receiver_Task+0xe4>)
 8001370:	f64f 72fa 	movw	r2, #65530	@ 0xfffa
 8001374:	601a      	str	r2, [r3, #0]
            TxEsp32[1] = receivedLaser[0];
 8001376:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001378:	4a2d      	ldr	r2, [pc, #180]	@ (8001430 <Receiver_Task+0xe4>)
 800137a:	6053      	str	r3, [r2, #4]
            TxEsp32[21] = receivedLaser[1];
 800137c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800137e:	4a2c      	ldr	r2, [pc, #176]	@ (8001430 <Receiver_Task+0xe4>)
 8001380:	6553      	str	r3, [r2, #84]	@ 0x54
        }

        if (xQueueReceive(xQueueIMU, receivedIMU, 0) == pdTRUE)
 8001382:	4b2c      	ldr	r3, [pc, #176]	@ (8001434 <Receiver_Task+0xe8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800138a:	2200      	movs	r2, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f00c fd07 	bl	800dda0 <xQueueReceive>
 8001392:	4603      	mov	r3, r0
 8001394:	2b01      	cmp	r3, #1
 8001396:	d108      	bne.n	80013aa <Receiver_Task+0x5e>
        {
            // Xử lý dữ liệu IMU
            TxEsp32[18] = receivedIMU[0];
 8001398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800139a:	4a25      	ldr	r2, [pc, #148]	@ (8001430 <Receiver_Task+0xe4>)
 800139c:	6493      	str	r3, [r2, #72]	@ 0x48
            TxEsp32[19] = receivedIMU[1];
 800139e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80013a0:	4a23      	ldr	r2, [pc, #140]	@ (8001430 <Receiver_Task+0xe4>)
 80013a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
            TxEsp32[20] = receivedIMU[2];
 80013a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013a6:	4a22      	ldr	r2, [pc, #136]	@ (8001430 <Receiver_Task+0xe4>)
 80013a8:	6513      	str	r3, [r2, #80]	@ 0x50
        }

        if (xQueueReceive(xQueueIR, receivedIR, 0) == pdTRUE)
 80013aa:	4b23      	ldr	r3, [pc, #140]	@ (8001438 <Receiver_Task+0xec>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f107 010c 	add.w	r1, r7, #12
 80013b2:	2200      	movs	r2, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f00c fcf3 	bl	800dda0 <xQueueReceive>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d113      	bne.n	80013e8 <Receiver_Task+0x9c>
        {
            // Xử lý dữ liệu IR
            for (int i = 0; i < 16; i++)
 80013c0:	2300      	movs	r3, #0
 80013c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80013c4:	e00d      	b.n	80013e2 <Receiver_Task+0x96>
            {
                TxEsp32[i + 2] = receivedIR[i];
 80013c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80013c8:	1c9a      	adds	r2, r3, #2
 80013ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	3368      	adds	r3, #104	@ 0x68
 80013d0:	443b      	add	r3, r7
 80013d2:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80013d6:	4916      	ldr	r1, [pc, #88]	@ (8001430 <Receiver_Task+0xe4>)
 80013d8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
            for (int i = 0; i < 16; i++)
 80013dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80013de:	3301      	adds	r3, #1
 80013e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80013e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80013e4:	2b0f      	cmp	r3, #15
 80013e6:	ddee      	ble.n	80013c6 <Receiver_Task+0x7a>
            }
        }
//        HAL_UART_Transmit_IT(&huart5,(uint8_t*)TxEsp32, sizeof(TxEsp32));
        // truyen voi esp32

        HAL_UART_Transmit(&huart3,TxEsp32, sizeof(TxEsp32),1000);
 80013e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ec:	2258      	movs	r2, #88	@ 0x58
 80013ee:	4910      	ldr	r1, [pc, #64]	@ (8001430 <Receiver_Task+0xe4>)
 80013f0:	4812      	ldr	r0, [pc, #72]	@ (800143c <Receiver_Task+0xf0>)
 80013f2:	f008 f999 	bl	8009728 <HAL_UART_Transmit>
        // truyen voi winform
        if (HAL_UART_Receive(&huart5, RxEsp32, sizeof(RxEsp32), 100) == HAL_OK)
 80013f6:	2364      	movs	r3, #100	@ 0x64
 80013f8:	2214      	movs	r2, #20
 80013fa:	4911      	ldr	r1, [pc, #68]	@ (8001440 <Receiver_Task+0xf4>)
 80013fc:	4811      	ldr	r0, [pc, #68]	@ (8001444 <Receiver_Task+0xf8>)
 80013fe:	f008 fa21 	bl	8009844 <HAL_UART_Receive>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d107      	bne.n	8001418 <Receiver_Task+0xcc>
               {
                   // Gửi dữ liệu nhận được vào hàng đợi để xử lý
                   xQueueSend(xQueueRxData, RxEsp32, portMAX_DELAY);
 8001408:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <Receiver_Task+0xfc>)
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	2300      	movs	r3, #0
 800140e:	f04f 32ff 	mov.w	r2, #4294967295
 8001412:	490b      	ldr	r1, [pc, #44]	@ (8001440 <Receiver_Task+0xf4>)
 8001414:	f00c fb24 	bl	800da60 <xQueueGenericSend>
               }

        HAL_GPIO_TogglePin(SAMPLE_IMU_GPIO_Port, SAMPLE_IMU_Pin);
 8001418:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800141c:	480b      	ldr	r0, [pc, #44]	@ (800144c <Receiver_Task+0x100>)
 800141e:	f004 f846 	bl	80054ae <HAL_GPIO_TogglePin>

		vTaskDelay(TickDelay);
 8001422:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001424:	f00d f8ee 	bl	800e604 <vTaskDelay>
        if (xQueueReceive(xQueueLaser, receivedLaser, 0) == pdTRUE)
 8001428:	e796      	b.n	8001358 <Receiver_Task+0xc>
 800142a:	bf00      	nop
 800142c:	24000500 	.word	0x24000500
 8001430:	2400044c 	.word	0x2400044c
 8001434:	24000504 	.word	0x24000504
 8001438:	24000508 	.word	0x24000508
 800143c:	24000844 	.word	0x24000844
 8001440:	240004a4 	.word	0x240004a4
 8001444:	240005f4 	.word	0x240005f4
 8001448:	2400050c 	.word	0x2400050c
 800144c:	58021800 	.word	0x58021800

08001450 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a04      	ldr	r2, [pc, #16]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d101      	bne.n	8001466 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001462:	f000 feef 	bl	8002244 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40010000 	.word	0x40010000

08001474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001478:	b672      	cpsid	i
}
 800147a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <Error_Handler+0x8>

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <HAL_MspInit+0x38>)
 8001488:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800148c:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <HAL_MspInit+0x38>)
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001496:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <HAL_MspInit+0x38>)
 8001498:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	210f      	movs	r1, #15
 80014a8:	f06f 0001 	mvn.w	r0, #1
 80014ac:	f000 ffd2 	bl	8002454 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	58024400 	.word	0x58024400

080014bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08e      	sub	sp, #56	@ 0x38
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b0f      	cmp	r3, #15
 80014c8:	d844      	bhi.n	8001554 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80014ca:	2200      	movs	r2, #0
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	2019      	movs	r0, #25
 80014d0:	f000 ffc0 	bl	8002454 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80014d4:	2019      	movs	r0, #25
 80014d6:	f000 ffd7 	bl	8002488 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80014da:	4a24      	ldr	r2, [pc, #144]	@ (800156c <HAL_InitTick+0xb0>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014e0:	4b23      	ldr	r3, [pc, #140]	@ (8001570 <HAL_InitTick+0xb4>)
 80014e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014e6:	4a22      	ldr	r2, [pc, #136]	@ (8001570 <HAL_InitTick+0xb4>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80014f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001570 <HAL_InitTick+0xb4>)
 80014f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014fe:	f107 020c 	add.w	r2, r7, #12
 8001502:	f107 0310 	add.w	r3, r7, #16
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f005 ff81 	bl	8007410 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800150e:	f005 ff69 	bl	80073e4 <HAL_RCC_GetPCLK2Freq>
 8001512:	4603      	mov	r3, r0
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800151a:	4a16      	ldr	r2, [pc, #88]	@ (8001574 <HAL_InitTick+0xb8>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	0c9b      	lsrs	r3, r3, #18
 8001522:	3b01      	subs	r3, #1
 8001524:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001526:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <HAL_InitTick+0xbc>)
 8001528:	4a14      	ldr	r2, [pc, #80]	@ (800157c <HAL_InitTick+0xc0>)
 800152a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800152c:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <HAL_InitTick+0xbc>)
 800152e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001532:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001534:	4a10      	ldr	r2, [pc, #64]	@ (8001578 <HAL_InitTick+0xbc>)
 8001536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001538:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800153a:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <HAL_InitTick+0xbc>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001540:	4b0d      	ldr	r3, [pc, #52]	@ (8001578 <HAL_InitTick+0xbc>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001546:	480c      	ldr	r0, [pc, #48]	@ (8001578 <HAL_InitTick+0xbc>)
 8001548:	f007 fdd0 	bl	80090ec <HAL_TIM_Base_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d107      	bne.n	8001562 <HAL_InitTick+0xa6>
 8001552:	e001      	b.n	8001558 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e005      	b.n	8001564 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001558:	4807      	ldr	r0, [pc, #28]	@ (8001578 <HAL_InitTick+0xbc>)
 800155a:	f007 fe29 	bl	80091b0 <HAL_TIM_Base_Start_IT>
 800155e:	4603      	mov	r3, r0
 8001560:	e000      	b.n	8001564 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	3738      	adds	r7, #56	@ 0x38
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	24000020 	.word	0x24000020
 8001570:	58024400 	.word	0x58024400
 8001574:	431bde83 	.word	0x431bde83
 8001578:	24000514 	.word	0x24000514
 800157c:	40010000 	.word	0x40010000

08001580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <NMI_Handler+0x4>

08001588 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <HardFault_Handler+0x4>

08001590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <MemManage_Handler+0x4>

08001598 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <BusFault_Handler+0x4>

080015a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <UsageFault_Handler+0x4>

080015a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80015bc:	4802      	ldr	r0, [pc, #8]	@ (80015c8 <DMA1_Stream0_IRQHandler+0x10>)
 80015be:	f002 fa9b 	bl	8003af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	240008d8 	.word	0x240008d8

080015cc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015d0:	4802      	ldr	r0, [pc, #8]	@ (80015dc <TIM1_UP_IRQHandler+0x10>)
 80015d2:	f007 fe65 	bl	80092a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	24000514 	.word	0x24000514

080015e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015e4:	4802      	ldr	r0, [pc, #8]	@ (80015f0 <USART2_IRQHandler+0x10>)
 80015e6:	f008 fa8d 	bl	8009b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	240007b0 	.word	0x240007b0

080015f4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80015f8:	4802      	ldr	r0, [pc, #8]	@ (8001604 <UART4_IRQHandler+0x10>)
 80015fa:	f008 fa83 	bl	8009b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	24000560 	.word	0x24000560

08001608 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800160c:	4802      	ldr	r0, [pc, #8]	@ (8001618 <UART5_IRQHandler+0x10>)
 800160e:	f008 fa79 	bl	8009b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	240005f4 	.word	0x240005f4

0800161c <MX_UART4_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001620:	4b22      	ldr	r3, [pc, #136]	@ (80016ac <MX_UART4_Init+0x90>)
 8001622:	4a23      	ldr	r2, [pc, #140]	@ (80016b0 <MX_UART4_Init+0x94>)
 8001624:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001626:	4b21      	ldr	r3, [pc, #132]	@ (80016ac <MX_UART4_Init+0x90>)
 8001628:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800162c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b1f      	ldr	r3, [pc, #124]	@ (80016ac <MX_UART4_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <MX_UART4_Init+0x90>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800163a:	4b1c      	ldr	r3, [pc, #112]	@ (80016ac <MX_UART4_Init+0x90>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <MX_UART4_Init+0x90>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b19      	ldr	r3, [pc, #100]	@ (80016ac <MX_UART4_Init+0x90>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b17      	ldr	r3, [pc, #92]	@ (80016ac <MX_UART4_Init+0x90>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001652:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <MX_UART4_Init+0x90>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001658:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <MX_UART4_Init+0x90>)
 800165a:	2200      	movs	r2, #0
 800165c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800165e:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <MX_UART4_Init+0x90>)
 8001660:	2200      	movs	r2, #0
 8001662:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001664:	4811      	ldr	r0, [pc, #68]	@ (80016ac <MX_UART4_Init+0x90>)
 8001666:	f008 f80f 	bl	8009688 <HAL_UART_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001670:	f7ff ff00 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001674:	2100      	movs	r1, #0
 8001676:	480d      	ldr	r0, [pc, #52]	@ (80016ac <MX_UART4_Init+0x90>)
 8001678:	f00a fecb 	bl	800c412 <HAL_UARTEx_SetTxFifoThreshold>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001682:	f7ff fef7 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001686:	2100      	movs	r1, #0
 8001688:	4808      	ldr	r0, [pc, #32]	@ (80016ac <MX_UART4_Init+0x90>)
 800168a:	f00a ff00 	bl	800c48e <HAL_UARTEx_SetRxFifoThreshold>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001694:	f7ff feee 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001698:	4804      	ldr	r0, [pc, #16]	@ (80016ac <MX_UART4_Init+0x90>)
 800169a:	f00a fe81 	bl	800c3a0 <HAL_UARTEx_DisableFifoMode>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80016a4:	f7ff fee6 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	24000560 	.word	0x24000560
 80016b0:	40004c00 	.word	0x40004c00

080016b4 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80016b8:	4b22      	ldr	r3, [pc, #136]	@ (8001744 <MX_UART5_Init+0x90>)
 80016ba:	4a23      	ldr	r2, [pc, #140]	@ (8001748 <MX_UART5_Init+0x94>)
 80016bc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80016be:	4b21      	ldr	r3, [pc, #132]	@ (8001744 <MX_UART5_Init+0x90>)
 80016c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016c4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001744 <MX_UART5_Init+0x90>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <MX_UART5_Init+0x90>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001744 <MX_UART5_Init+0x90>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <MX_UART5_Init+0x90>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <MX_UART5_Init+0x90>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <MX_UART5_Init+0x90>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ea:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <MX_UART5_Init+0x90>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016f0:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <MX_UART5_Init+0x90>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f6:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <MX_UART5_Init+0x90>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80016fc:	4811      	ldr	r0, [pc, #68]	@ (8001744 <MX_UART5_Init+0x90>)
 80016fe:	f007 ffc3 	bl	8009688 <HAL_UART_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001708:	f7ff feb4 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800170c:	2100      	movs	r1, #0
 800170e:	480d      	ldr	r0, [pc, #52]	@ (8001744 <MX_UART5_Init+0x90>)
 8001710:	f00a fe7f 	bl	800c412 <HAL_UARTEx_SetTxFifoThreshold>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800171a:	f7ff feab 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800171e:	2100      	movs	r1, #0
 8001720:	4808      	ldr	r0, [pc, #32]	@ (8001744 <MX_UART5_Init+0x90>)
 8001722:	f00a feb4 	bl	800c48e <HAL_UARTEx_SetRxFifoThreshold>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800172c:	f7ff fea2 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001730:	4804      	ldr	r0, [pc, #16]	@ (8001744 <MX_UART5_Init+0x90>)
 8001732:	f00a fe35 	bl	800c3a0 <HAL_UARTEx_DisableFifoMode>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800173c:	f7ff fe9a 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	240005f4 	.word	0x240005f4
 8001748:	40005000 	.word	0x40005000

0800174c <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001750:	4b22      	ldr	r3, [pc, #136]	@ (80017dc <MX_UART7_Init+0x90>)
 8001752:	4a23      	ldr	r2, [pc, #140]	@ (80017e0 <MX_UART7_Init+0x94>)
 8001754:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001756:	4b21      	ldr	r3, [pc, #132]	@ (80017dc <MX_UART7_Init+0x90>)
 8001758:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800175c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800175e:	4b1f      	ldr	r3, [pc, #124]	@ (80017dc <MX_UART7_Init+0x90>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001764:	4b1d      	ldr	r3, [pc, #116]	@ (80017dc <MX_UART7_Init+0x90>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800176a:	4b1c      	ldr	r3, [pc, #112]	@ (80017dc <MX_UART7_Init+0x90>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001770:	4b1a      	ldr	r3, [pc, #104]	@ (80017dc <MX_UART7_Init+0x90>)
 8001772:	220c      	movs	r2, #12
 8001774:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001776:	4b19      	ldr	r3, [pc, #100]	@ (80017dc <MX_UART7_Init+0x90>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800177c:	4b17      	ldr	r3, [pc, #92]	@ (80017dc <MX_UART7_Init+0x90>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001782:	4b16      	ldr	r3, [pc, #88]	@ (80017dc <MX_UART7_Init+0x90>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001788:	4b14      	ldr	r3, [pc, #80]	@ (80017dc <MX_UART7_Init+0x90>)
 800178a:	2200      	movs	r2, #0
 800178c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800178e:	4b13      	ldr	r3, [pc, #76]	@ (80017dc <MX_UART7_Init+0x90>)
 8001790:	2200      	movs	r2, #0
 8001792:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001794:	4811      	ldr	r0, [pc, #68]	@ (80017dc <MX_UART7_Init+0x90>)
 8001796:	f007 ff77 	bl	8009688 <HAL_UART_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80017a0:	f7ff fe68 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a4:	2100      	movs	r1, #0
 80017a6:	480d      	ldr	r0, [pc, #52]	@ (80017dc <MX_UART7_Init+0x90>)
 80017a8:	f00a fe33 	bl	800c412 <HAL_UARTEx_SetTxFifoThreshold>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80017b2:	f7ff fe5f 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b6:	2100      	movs	r1, #0
 80017b8:	4808      	ldr	r0, [pc, #32]	@ (80017dc <MX_UART7_Init+0x90>)
 80017ba:	f00a fe68 	bl	800c48e <HAL_UARTEx_SetRxFifoThreshold>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80017c4:	f7ff fe56 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80017c8:	4804      	ldr	r0, [pc, #16]	@ (80017dc <MX_UART7_Init+0x90>)
 80017ca:	f00a fde9 	bl	800c3a0 <HAL_UARTEx_DisableFifoMode>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80017d4:	f7ff fe4e 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	24000688 	.word	0x24000688
 80017e0:	40007800 	.word	0x40007800

080017e4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017e8:	4b22      	ldr	r3, [pc, #136]	@ (8001874 <MX_USART1_UART_Init+0x90>)
 80017ea:	4a23      	ldr	r2, [pc, #140]	@ (8001878 <MX_USART1_UART_Init+0x94>)
 80017ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017ee:	4b21      	ldr	r3, [pc, #132]	@ (8001874 <MX_USART1_UART_Init+0x90>)
 80017f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001874 <MX_USART1_UART_Init+0x90>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001874 <MX_USART1_UART_Init+0x90>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001802:	4b1c      	ldr	r3, [pc, #112]	@ (8001874 <MX_USART1_UART_Init+0x90>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001808:	4b1a      	ldr	r3, [pc, #104]	@ (8001874 <MX_USART1_UART_Init+0x90>)
 800180a:	220c      	movs	r2, #12
 800180c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180e:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <MX_USART1_UART_Init+0x90>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001814:	4b17      	ldr	r3, [pc, #92]	@ (8001874 <MX_USART1_UART_Init+0x90>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800181a:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <MX_USART1_UART_Init+0x90>)
 800181c:	2200      	movs	r2, #0
 800181e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001820:	4b14      	ldr	r3, [pc, #80]	@ (8001874 <MX_USART1_UART_Init+0x90>)
 8001822:	2200      	movs	r2, #0
 8001824:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001826:	4b13      	ldr	r3, [pc, #76]	@ (8001874 <MX_USART1_UART_Init+0x90>)
 8001828:	2200      	movs	r2, #0
 800182a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800182c:	4811      	ldr	r0, [pc, #68]	@ (8001874 <MX_USART1_UART_Init+0x90>)
 800182e:	f007 ff2b 	bl	8009688 <HAL_UART_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001838:	f7ff fe1c 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800183c:	2100      	movs	r1, #0
 800183e:	480d      	ldr	r0, [pc, #52]	@ (8001874 <MX_USART1_UART_Init+0x90>)
 8001840:	f00a fde7 	bl	800c412 <HAL_UARTEx_SetTxFifoThreshold>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800184a:	f7ff fe13 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800184e:	2100      	movs	r1, #0
 8001850:	4808      	ldr	r0, [pc, #32]	@ (8001874 <MX_USART1_UART_Init+0x90>)
 8001852:	f00a fe1c 	bl	800c48e <HAL_UARTEx_SetRxFifoThreshold>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800185c:	f7ff fe0a 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001860:	4804      	ldr	r0, [pc, #16]	@ (8001874 <MX_USART1_UART_Init+0x90>)
 8001862:	f00a fd9d 	bl	800c3a0 <HAL_UARTEx_DisableFifoMode>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800186c:	f7ff fe02 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	2400071c 	.word	0x2400071c
 8001878:	40011000 	.word	0x40011000

0800187c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001880:	4b24      	ldr	r3, [pc, #144]	@ (8001914 <MX_USART2_UART_Init+0x98>)
 8001882:	4a25      	ldr	r2, [pc, #148]	@ (8001918 <MX_USART2_UART_Init+0x9c>)
 8001884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001886:	4b23      	ldr	r3, [pc, #140]	@ (8001914 <MX_USART2_UART_Init+0x98>)
 8001888:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800188c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800188e:	4b21      	ldr	r3, [pc, #132]	@ (8001914 <MX_USART2_UART_Init+0x98>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001894:	4b1f      	ldr	r3, [pc, #124]	@ (8001914 <MX_USART2_UART_Init+0x98>)
 8001896:	2200      	movs	r2, #0
 8001898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800189a:	4b1e      	ldr	r3, [pc, #120]	@ (8001914 <MX_USART2_UART_Init+0x98>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001914 <MX_USART2_UART_Init+0x98>)
 80018a2:	220c      	movs	r2, #12
 80018a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001914 <MX_USART2_UART_Init+0x98>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ac:	4b19      	ldr	r3, [pc, #100]	@ (8001914 <MX_USART2_UART_Init+0x98>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018b2:	4b18      	ldr	r3, [pc, #96]	@ (8001914 <MX_USART2_UART_Init+0x98>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018b8:	4b16      	ldr	r3, [pc, #88]	@ (8001914 <MX_USART2_UART_Init+0x98>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018be:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <MX_USART2_UART_Init+0x98>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80018c4:	2300      	movs	r3, #0
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	4812      	ldr	r0, [pc, #72]	@ (8001914 <MX_USART2_UART_Init+0x98>)
 80018cc:	f00a fce0 	bl	800c290 <HAL_RS485Ex_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USART2_UART_Init+0x5e>
  {
    Error_Handler();
 80018d6:	f7ff fdcd 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018da:	2100      	movs	r1, #0
 80018dc:	480d      	ldr	r0, [pc, #52]	@ (8001914 <MX_USART2_UART_Init+0x98>)
 80018de:	f00a fd98 	bl	800c412 <HAL_UARTEx_SetTxFifoThreshold>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
 80018e8:	f7ff fdc4 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ec:	2100      	movs	r1, #0
 80018ee:	4809      	ldr	r0, [pc, #36]	@ (8001914 <MX_USART2_UART_Init+0x98>)
 80018f0:	f00a fdcd 	bl	800c48e <HAL_UARTEx_SetRxFifoThreshold>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_USART2_UART_Init+0x82>
  {
    Error_Handler();
 80018fa:	f7ff fdbb 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018fe:	4805      	ldr	r0, [pc, #20]	@ (8001914 <MX_USART2_UART_Init+0x98>)
 8001900:	f00a fd4e 	bl	800c3a0 <HAL_UARTEx_DisableFifoMode>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_USART2_UART_Init+0x92>
  {
    Error_Handler();
 800190a:	f7ff fdb3 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	240007b0 	.word	0x240007b0
 8001918:	40004400 	.word	0x40004400

0800191c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001920:	4b22      	ldr	r3, [pc, #136]	@ (80019ac <MX_USART3_UART_Init+0x90>)
 8001922:	4a23      	ldr	r2, [pc, #140]	@ (80019b0 <MX_USART3_UART_Init+0x94>)
 8001924:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001926:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <MX_USART3_UART_Init+0x90>)
 8001928:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800192c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800192e:	4b1f      	ldr	r3, [pc, #124]	@ (80019ac <MX_USART3_UART_Init+0x90>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001934:	4b1d      	ldr	r3, [pc, #116]	@ (80019ac <MX_USART3_UART_Init+0x90>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800193a:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <MX_USART3_UART_Init+0x90>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001940:	4b1a      	ldr	r3, [pc, #104]	@ (80019ac <MX_USART3_UART_Init+0x90>)
 8001942:	220c      	movs	r2, #12
 8001944:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001946:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <MX_USART3_UART_Init+0x90>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800194c:	4b17      	ldr	r3, [pc, #92]	@ (80019ac <MX_USART3_UART_Init+0x90>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001952:	4b16      	ldr	r3, [pc, #88]	@ (80019ac <MX_USART3_UART_Init+0x90>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001958:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <MX_USART3_UART_Init+0x90>)
 800195a:	2200      	movs	r2, #0
 800195c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800195e:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <MX_USART3_UART_Init+0x90>)
 8001960:	2200      	movs	r2, #0
 8001962:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001964:	4811      	ldr	r0, [pc, #68]	@ (80019ac <MX_USART3_UART_Init+0x90>)
 8001966:	f007 fe8f 	bl	8009688 <HAL_UART_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001970:	f7ff fd80 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001974:	2100      	movs	r1, #0
 8001976:	480d      	ldr	r0, [pc, #52]	@ (80019ac <MX_USART3_UART_Init+0x90>)
 8001978:	f00a fd4b 	bl	800c412 <HAL_UARTEx_SetTxFifoThreshold>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001982:	f7ff fd77 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001986:	2100      	movs	r1, #0
 8001988:	4808      	ldr	r0, [pc, #32]	@ (80019ac <MX_USART3_UART_Init+0x90>)
 800198a:	f00a fd80 	bl	800c48e <HAL_UARTEx_SetRxFifoThreshold>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001994:	f7ff fd6e 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001998:	4804      	ldr	r0, [pc, #16]	@ (80019ac <MX_USART3_UART_Init+0x90>)
 800199a:	f00a fd01 	bl	800c3a0 <HAL_UARTEx_DisableFifoMode>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80019a4:	f7ff fd66 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	24000844 	.word	0x24000844
 80019b0:	40004800 	.word	0x40004800

080019b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b0c8      	sub	sp, #288	@ 0x120
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80019be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80019c2:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019d4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80019d8:	22c0      	movs	r2, #192	@ 0xc0
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f00d fbc5 	bl	800f16c <memset>
  if(uartHandle->Instance==UART4)
 80019e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80019e6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4abe      	ldr	r2, [pc, #760]	@ (8001ce8 <HAL_UART_MspInit+0x334>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	f040 80aa 	bne.w	8001b4a <HAL_UART_MspInit+0x196>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80019f6:	f04f 0202 	mov.w	r2, #2
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a08:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f005 fd41 	bl	8007494 <HAL_RCCEx_PeriphCLKConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_UART_MspInit+0x68>
    {
      Error_Handler();
 8001a18:	f7ff fd2c 	bl	8001474 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a1c:	4bb3      	ldr	r3, [pc, #716]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001a1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a22:	4ab2      	ldr	r2, [pc, #712]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001a24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a28:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a2c:	4baf      	ldr	r3, [pc, #700]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001a2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a36:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	4bac      	ldr	r3, [pc, #688]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a40:	4aaa      	ldr	r2, [pc, #680]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a4a:	4ba8      	ldr	r3, [pc, #672]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	643b      	str	r3, [r7, #64]	@ 0x40
 8001a56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a58:	4ba4      	ldr	r3, [pc, #656]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a5e:	4aa3      	ldr	r2, [pc, #652]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a68:	4ba0      	ldr	r3, [pc, #640]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a76:	2301      	movs	r3, #1
 8001a78:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a8e:	2308      	movs	r3, #8
 8001a90:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4895      	ldr	r0, [pc, #596]	@ (8001cf0 <HAL_UART_MspInit+0x33c>)
 8001a9c:	f003 fb3e 	bl	800511c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001aa0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001aa4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001aba:	2308      	movs	r3, #8
 8001abc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	488b      	ldr	r0, [pc, #556]	@ (8001cf4 <HAL_UART_MspInit+0x340>)
 8001ac8:	f003 fb28 	bl	800511c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream0;
 8001acc:	4b8a      	ldr	r3, [pc, #552]	@ (8001cf8 <HAL_UART_MspInit+0x344>)
 8001ace:	4a8b      	ldr	r2, [pc, #556]	@ (8001cfc <HAL_UART_MspInit+0x348>)
 8001ad0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001ad2:	4b89      	ldr	r3, [pc, #548]	@ (8001cf8 <HAL_UART_MspInit+0x344>)
 8001ad4:	223f      	movs	r2, #63	@ 0x3f
 8001ad6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ad8:	4b87      	ldr	r3, [pc, #540]	@ (8001cf8 <HAL_UART_MspInit+0x344>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ade:	4b86      	ldr	r3, [pc, #536]	@ (8001cf8 <HAL_UART_MspInit+0x344>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ae4:	4b84      	ldr	r3, [pc, #528]	@ (8001cf8 <HAL_UART_MspInit+0x344>)
 8001ae6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aea:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aec:	4b82      	ldr	r3, [pc, #520]	@ (8001cf8 <HAL_UART_MspInit+0x344>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001af2:	4b81      	ldr	r3, [pc, #516]	@ (8001cf8 <HAL_UART_MspInit+0x344>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001af8:	4b7f      	ldr	r3, [pc, #508]	@ (8001cf8 <HAL_UART_MspInit+0x344>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001afe:	4b7e      	ldr	r3, [pc, #504]	@ (8001cf8 <HAL_UART_MspInit+0x344>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b04:	4b7c      	ldr	r3, [pc, #496]	@ (8001cf8 <HAL_UART_MspInit+0x344>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001b0a:	487b      	ldr	r0, [pc, #492]	@ (8001cf8 <HAL_UART_MspInit+0x344>)
 8001b0c:	f000 fcca 	bl	80024a4 <HAL_DMA_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8001b16:	f7ff fcad 	bl	8001474 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001b1a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001b1e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a74      	ldr	r2, [pc, #464]	@ (8001cf8 <HAL_UART_MspInit+0x344>)
 8001b26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001b2a:	4a73      	ldr	r2, [pc, #460]	@ (8001cf8 <HAL_UART_MspInit+0x344>)
 8001b2c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001b30:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2105      	movs	r1, #5
 8001b3c:	2034      	movs	r0, #52	@ 0x34
 8001b3e:	f000 fc89 	bl	8002454 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001b42:	2034      	movs	r0, #52	@ 0x34
 8001b44:	f000 fca0 	bl	8002488 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b48:	e245      	b.n	8001fd6 <HAL_UART_MspInit+0x622>
  else if(uartHandle->Instance==UART5)
 8001b4a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001b4e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a6a      	ldr	r2, [pc, #424]	@ (8001d00 <HAL_UART_MspInit+0x34c>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d174      	bne.n	8001c46 <HAL_UART_MspInit+0x292>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001b5c:	f04f 0202 	mov.w	r2, #2
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b6e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b72:	4618      	mov	r0, r3
 8001b74:	f005 fc8e 	bl	8007494 <HAL_RCCEx_PeriphCLKConfig>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_UART_MspInit+0x1ce>
      Error_Handler();
 8001b7e:	f7ff fc79 	bl	8001474 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001b82:	4b5a      	ldr	r3, [pc, #360]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001b84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b88:	4a58      	ldr	r2, [pc, #352]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001b8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b8e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b92:	4b56      	ldr	r3, [pc, #344]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001b94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba0:	4b52      	ldr	r3, [pc, #328]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ba6:	4a51      	ldr	r2, [pc, #324]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bb0:	4b4e      	ldr	r3, [pc, #312]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbe:	4b4b      	ldr	r3, [pc, #300]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bc4:	4a49      	ldr	r2, [pc, #292]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bce:	4b47      	ldr	r3, [pc, #284]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001be0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001bf6:	230e      	movs	r3, #14
 8001bf8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001c00:	4619      	mov	r1, r3
 8001c02:	4840      	ldr	r0, [pc, #256]	@ (8001d04 <HAL_UART_MspInit+0x350>)
 8001c04:	f003 fa8a 	bl	800511c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c0c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c22:	2308      	movs	r3, #8
 8001c24:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c28:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4831      	ldr	r0, [pc, #196]	@ (8001cf4 <HAL_UART_MspInit+0x340>)
 8001c30:	f003 fa74 	bl	800511c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2105      	movs	r1, #5
 8001c38:	2035      	movs	r0, #53	@ 0x35
 8001c3a:	f000 fc0b 	bl	8002454 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001c3e:	2035      	movs	r0, #53	@ 0x35
 8001c40:	f000 fc22 	bl	8002488 <HAL_NVIC_EnableIRQ>
}
 8001c44:	e1c7      	b.n	8001fd6 <HAL_UART_MspInit+0x622>
  else if(uartHandle->Instance==UART7)
 8001c46:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001c4a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a2d      	ldr	r2, [pc, #180]	@ (8001d08 <HAL_UART_MspInit+0x354>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d15b      	bne.n	8001d10 <HAL_UART_MspInit+0x35c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001c58:	f04f 0202 	mov.w	r2, #2
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c6a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f005 fc10 	bl	8007494 <HAL_RCCEx_PeriphCLKConfig>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_UART_MspInit+0x2ca>
      Error_Handler();
 8001c7a:	f7ff fbfb 	bl	8001474 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001c80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c84:	4a19      	ldr	r2, [pc, #100]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001c86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c8a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c8e:	4b17      	ldr	r3, [pc, #92]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001c90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c94:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c9c:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ca2:	4a12      	ldr	r2, [pc, #72]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001ca4:	f043 0310 	orr.w	r3, r3, #16
 8001ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cac:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <HAL_UART_MspInit+0x338>)
 8001cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001cba:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001cbe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001cd4:	2307      	movs	r3, #7
 8001cd6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cda:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001cde:	4619      	mov	r1, r3
 8001ce0:	480a      	ldr	r0, [pc, #40]	@ (8001d0c <HAL_UART_MspInit+0x358>)
 8001ce2:	f003 fa1b 	bl	800511c <HAL_GPIO_Init>
}
 8001ce6:	e176      	b.n	8001fd6 <HAL_UART_MspInit+0x622>
 8001ce8:	40004c00 	.word	0x40004c00
 8001cec:	58024400 	.word	0x58024400
 8001cf0:	58020000 	.word	0x58020000
 8001cf4:	58020800 	.word	0x58020800
 8001cf8:	240008d8 	.word	0x240008d8
 8001cfc:	40020010 	.word	0x40020010
 8001d00:	40005000 	.word	0x40005000
 8001d04:	58020400 	.word	0x58020400
 8001d08:	40007800 	.word	0x40007800
 8001d0c:	58021000 	.word	0x58021000
  else if(uartHandle->Instance==USART1)
 8001d10:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d14:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4ab0      	ldr	r2, [pc, #704]	@ (8001fe0 <HAL_UART_MspInit+0x62c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d164      	bne.n	8001dec <HAL_UART_MspInit+0x438>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d22:	f04f 0201 	mov.w	r2, #1
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d34:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f005 fbab 	bl	8007494 <HAL_RCCEx_PeriphCLKConfig>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_UART_MspInit+0x394>
      Error_Handler();
 8001d44:	f7ff fb96 	bl	8001474 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d48:	4ba6      	ldr	r3, [pc, #664]	@ (8001fe4 <HAL_UART_MspInit+0x630>)
 8001d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d4e:	4aa5      	ldr	r2, [pc, #660]	@ (8001fe4 <HAL_UART_MspInit+0x630>)
 8001d50:	f043 0310 	orr.w	r3, r3, #16
 8001d54:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d58:	4ba2      	ldr	r3, [pc, #648]	@ (8001fe4 <HAL_UART_MspInit+0x630>)
 8001d5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	4b9f      	ldr	r3, [pc, #636]	@ (8001fe4 <HAL_UART_MspInit+0x630>)
 8001d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d6c:	4a9d      	ldr	r2, [pc, #628]	@ (8001fe4 <HAL_UART_MspInit+0x630>)
 8001d6e:	f043 0302 	orr.w	r3, r3, #2
 8001d72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d76:	4b9b      	ldr	r3, [pc, #620]	@ (8001fe4 <HAL_UART_MspInit+0x630>)
 8001d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d7c:	f003 0202 	and.w	r2, r3, #2
 8001d80:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d84:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d8e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d92:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d98:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001dae:	2304      	movs	r3, #4
 8001db0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001db8:	4619      	mov	r1, r3
 8001dba:	488b      	ldr	r0, [pc, #556]	@ (8001fe8 <HAL_UART_MspInit+0x634>)
 8001dbc:	f003 f9ae 	bl	800511c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dc0:	2340      	movs	r3, #64	@ 0x40
 8001dc2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dd8:	2307      	movs	r3, #7
 8001dda:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dde:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001de2:	4619      	mov	r1, r3
 8001de4:	4880      	ldr	r0, [pc, #512]	@ (8001fe8 <HAL_UART_MspInit+0x634>)
 8001de6:	f003 f999 	bl	800511c <HAL_GPIO_Init>
}
 8001dea:	e0f4      	b.n	8001fd6 <HAL_UART_MspInit+0x622>
  else if(uartHandle->Instance==USART2)
 8001dec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001df0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a7c      	ldr	r2, [pc, #496]	@ (8001fec <HAL_UART_MspInit+0x638>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	f040 808b 	bne.w	8001f16 <HAL_UART_MspInit+0x562>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e00:	f04f 0202 	mov.w	r2, #2
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e12:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e16:	4618      	mov	r0, r3
 8001e18:	f005 fb3c 	bl	8007494 <HAL_RCCEx_PeriphCLKConfig>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_UART_MspInit+0x472>
      Error_Handler();
 8001e22:	f7ff fb27 	bl	8001474 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e26:	4b6f      	ldr	r3, [pc, #444]	@ (8001fe4 <HAL_UART_MspInit+0x630>)
 8001e28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e2c:	4a6d      	ldr	r2, [pc, #436]	@ (8001fe4 <HAL_UART_MspInit+0x630>)
 8001e2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e32:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e36:	4b6b      	ldr	r3, [pc, #428]	@ (8001fe4 <HAL_UART_MspInit+0x630>)
 8001e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e3c:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 8001e40:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001e44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001e4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e52:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e54:	4b63      	ldr	r3, [pc, #396]	@ (8001fe4 <HAL_UART_MspInit+0x630>)
 8001e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e5a:	4a62      	ldr	r2, [pc, #392]	@ (8001fe4 <HAL_UART_MspInit+0x630>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e64:	4b5f      	ldr	r3, [pc, #380]	@ (8001fe4 <HAL_UART_MspInit+0x630>)
 8001e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e6a:	f003 0201 	and.w	r2, r3, #1
 8001e6e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001e72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001e7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e80:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e82:	4b58      	ldr	r3, [pc, #352]	@ (8001fe4 <HAL_UART_MspInit+0x630>)
 8001e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e88:	4a56      	ldr	r2, [pc, #344]	@ (8001fe4 <HAL_UART_MspInit+0x630>)
 8001e8a:	f043 0308 	orr.w	r3, r3, #8
 8001e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e92:	4b54      	ldr	r3, [pc, #336]	@ (8001fe4 <HAL_UART_MspInit+0x630>)
 8001e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e98:	f003 0208 	and.w	r2, r3, #8
 8001e9c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ea0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001eaa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001eae:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001eb0:	2308      	movs	r3, #8
 8001eb2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ec8:	2307      	movs	r3, #7
 8001eca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ece:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4846      	ldr	r0, [pc, #280]	@ (8001ff0 <HAL_UART_MspInit+0x63c>)
 8001ed6:	f003 f921 	bl	800511c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001eda:	2330      	movs	r3, #48	@ 0x30
 8001edc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ef2:	2307      	movs	r3, #7
 8001ef4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ef8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001efc:	4619      	mov	r1, r3
 8001efe:	483d      	ldr	r0, [pc, #244]	@ (8001ff4 <HAL_UART_MspInit+0x640>)
 8001f00:	f003 f90c 	bl	800511c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001f04:	2200      	movs	r2, #0
 8001f06:	2105      	movs	r1, #5
 8001f08:	2026      	movs	r0, #38	@ 0x26
 8001f0a:	f000 faa3 	bl	8002454 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f0e:	2026      	movs	r0, #38	@ 0x26
 8001f10:	f000 faba 	bl	8002488 <HAL_NVIC_EnableIRQ>
}
 8001f14:	e05f      	b.n	8001fd6 <HAL_UART_MspInit+0x622>
  else if(uartHandle->Instance==USART3)
 8001f16:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001f1a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a35      	ldr	r2, [pc, #212]	@ (8001ff8 <HAL_UART_MspInit+0x644>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d156      	bne.n	8001fd6 <HAL_UART_MspInit+0x622>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f28:	f04f 0202 	mov.w	r2, #2
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f3a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f005 faa8 	bl	8007494 <HAL_RCCEx_PeriphCLKConfig>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_UART_MspInit+0x59a>
      Error_Handler();
 8001f4a:	f7ff fa93 	bl	8001474 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f4e:	4b25      	ldr	r3, [pc, #148]	@ (8001fe4 <HAL_UART_MspInit+0x630>)
 8001f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f54:	4a23      	ldr	r2, [pc, #140]	@ (8001fe4 <HAL_UART_MspInit+0x630>)
 8001f56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f5a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f5e:	4b21      	ldr	r3, [pc, #132]	@ (8001fe4 <HAL_UART_MspInit+0x630>)
 8001f60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f64:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8001f68:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001f6c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001f76:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001f7a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f7c:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <HAL_UART_MspInit+0x630>)
 8001f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f82:	4a18      	ldr	r2, [pc, #96]	@ (8001fe4 <HAL_UART_MspInit+0x630>)
 8001f84:	f043 0308 	orr.w	r3, r3, #8
 8001f88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f8c:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <HAL_UART_MspInit+0x630>)
 8001f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f92:	f003 0208 	and.w	r2, r3, #8
 8001f96:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001f9a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001fa4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001fa8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001faa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fae:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fc4:	2307      	movs	r3, #7
 8001fc6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fca:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4808      	ldr	r0, [pc, #32]	@ (8001ff4 <HAL_UART_MspInit+0x640>)
 8001fd2:	f003 f8a3 	bl	800511c <HAL_GPIO_Init>
}
 8001fd6:	bf00      	nop
 8001fd8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40011000 	.word	0x40011000
 8001fe4:	58024400 	.word	0x58024400
 8001fe8:	58020400 	.word	0x58020400
 8001fec:	40004400 	.word	0x40004400
 8001ff0:	58020000 	.word	0x58020000
 8001ff4:	58020c00 	.word	0x58020c00
 8001ff8:	40004800 	.word	0x40004800

08001ffc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002000:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002002:	4a16      	ldr	r2, [pc, #88]	@ (800205c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002004:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002006:	4b14      	ldr	r3, [pc, #80]	@ (8002058 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002008:	2209      	movs	r2, #9
 800200a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800200c:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800200e:	2202      	movs	r2, #2
 8002010:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002012:	4b11      	ldr	r3, [pc, #68]	@ (8002058 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002014:	2200      	movs	r2, #0
 8002016:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002018:	4b0f      	ldr	r3, [pc, #60]	@ (8002058 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800201a:	2202      	movs	r2, #2
 800201c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800201e:	4b0e      	ldr	r3, [pc, #56]	@ (8002058 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002020:	2201      	movs	r2, #1
 8002022:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002024:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002026:	2200      	movs	r2, #0
 8002028:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800202a:	4b0b      	ldr	r3, [pc, #44]	@ (8002058 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800202c:	2200      	movs	r2, #0
 800202e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002030:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002032:	2201      	movs	r2, #1
 8002034:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002036:	4b08      	ldr	r3, [pc, #32]	@ (8002058 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002038:	2201      	movs	r2, #1
 800203a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800203c:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800203e:	2200      	movs	r2, #0
 8002040:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002042:	4805      	ldr	r0, [pc, #20]	@ (8002058 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002044:	f004 f863 	bl	800610e <HAL_PCD_Init>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800204e:	f7ff fa11 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	24000950 	.word	0x24000950
 800205c:	40080000 	.word	0x40080000

08002060 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b0ba      	sub	sp, #232	@ 0xe8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002078:	f107 0310 	add.w	r3, r7, #16
 800207c:	22c0      	movs	r2, #192	@ 0xc0
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f00d f873 	bl	800f16c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a38      	ldr	r2, [pc, #224]	@ (800216c <HAL_PCD_MspInit+0x10c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d169      	bne.n	8002164 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002090:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800209c:	2301      	movs	r3, #1
 800209e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80020a0:	2312      	movs	r3, #18
 80020a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80020a4:	2302      	movs	r3, #2
 80020a6:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80020a8:	2303      	movs	r3, #3
 80020aa:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80020ac:	2302      	movs	r3, #2
 80020ae:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80020b0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80020b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80020b6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80020ba:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80020bc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80020c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c4:	f107 0310 	add.w	r3, r7, #16
 80020c8:	4618      	mov	r0, r3
 80020ca:	f005 f9e3 	bl	8007494 <HAL_RCCEx_PeriphCLKConfig>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 80020d4:	f7ff f9ce 	bl	8001474 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80020d8:	f004 f9a4 	bl	8006424 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020dc:	4b24      	ldr	r3, [pc, #144]	@ (8002170 <HAL_PCD_MspInit+0x110>)
 80020de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e2:	4a23      	ldr	r2, [pc, #140]	@ (8002170 <HAL_PCD_MspInit+0x110>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020ec:	4b20      	ldr	r3, [pc, #128]	@ (8002170 <HAL_PCD_MspInit+0x110>)
 80020ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80020fa:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80020fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002114:	230a      	movs	r3, #10
 8002116:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800211e:	4619      	mov	r1, r3
 8002120:	4814      	ldr	r0, [pc, #80]	@ (8002174 <HAL_PCD_MspInit+0x114>)
 8002122:	f002 fffb 	bl	800511c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002126:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800212a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800212e:	2300      	movs	r3, #0
 8002130:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800213e:	4619      	mov	r1, r3
 8002140:	480c      	ldr	r0, [pc, #48]	@ (8002174 <HAL_PCD_MspInit+0x114>)
 8002142:	f002 ffeb 	bl	800511c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002146:	4b0a      	ldr	r3, [pc, #40]	@ (8002170 <HAL_PCD_MspInit+0x110>)
 8002148:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800214c:	4a08      	ldr	r2, [pc, #32]	@ (8002170 <HAL_PCD_MspInit+0x110>)
 800214e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002152:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002156:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <HAL_PCD_MspInit+0x110>)
 8002158:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800215c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002164:	bf00      	nop
 8002166:	37e8      	adds	r7, #232	@ 0xe8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40080000 	.word	0x40080000
 8002170:	58024400 	.word	0x58024400
 8002174:	58020000 	.word	0x58020000

08002178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002178:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800217c:	f7fe fa28 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002180:	480c      	ldr	r0, [pc, #48]	@ (80021b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002182:	490d      	ldr	r1, [pc, #52]	@ (80021b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002184:	4a0d      	ldr	r2, [pc, #52]	@ (80021bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002188:	e002      	b.n	8002190 <LoopCopyDataInit>

0800218a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800218c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218e:	3304      	adds	r3, #4

08002190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002194:	d3f9      	bcc.n	800218a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002196:	4a0a      	ldr	r2, [pc, #40]	@ (80021c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002198:	4c0a      	ldr	r4, [pc, #40]	@ (80021c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800219c:	e001      	b.n	80021a2 <LoopFillZerobss>

0800219e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a0:	3204      	adds	r2, #4

080021a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a4:	d3fb      	bcc.n	800219e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021a6:	f00d f845 	bl	800f234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021aa:	f7fe fd3d 	bl	8000c28 <main>
  bx  lr
 80021ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80021b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021b8:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 80021bc:	0800f484 	.word	0x0800f484
  ldr r2, =_sbss
 80021c0:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 80021c4:	24004ccc 	.word	0x24004ccc

080021c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c8:	e7fe      	b.n	80021c8 <ADC3_IRQHandler>
	...

080021cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d2:	2003      	movs	r0, #3
 80021d4:	f000 f933 	bl	800243e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021d8:	f004 ff44 	bl	8007064 <HAL_RCC_GetSysClockFreq>
 80021dc:	4602      	mov	r2, r0
 80021de:	4b15      	ldr	r3, [pc, #84]	@ (8002234 <HAL_Init+0x68>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	4913      	ldr	r1, [pc, #76]	@ (8002238 <HAL_Init+0x6c>)
 80021ea:	5ccb      	ldrb	r3, [r1, r3]
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
 80021f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <HAL_Init+0x68>)
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002238 <HAL_Init+0x6c>)
 8002200:	5cd3      	ldrb	r3, [r2, r3]
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	fa22 f303 	lsr.w	r3, r2, r3
 800220c:	4a0b      	ldr	r2, [pc, #44]	@ (800223c <HAL_Init+0x70>)
 800220e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002210:	4a0b      	ldr	r2, [pc, #44]	@ (8002240 <HAL_Init+0x74>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002216:	200f      	movs	r0, #15
 8002218:	f7ff f950 	bl	80014bc <HAL_InitTick>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e002      	b.n	800222c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002226:	f7ff f92b 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	58024400 	.word	0x58024400
 8002238:	0800f434 	.word	0x0800f434
 800223c:	24000004 	.word	0x24000004
 8002240:	24000000 	.word	0x24000000

08002244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <HAL_IncTick+0x20>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <HAL_IncTick+0x24>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4413      	add	r3, r2
 8002254:	4a04      	ldr	r2, [pc, #16]	@ (8002268 <HAL_IncTick+0x24>)
 8002256:	6013      	str	r3, [r2, #0]
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	24000024 	.word	0x24000024
 8002268:	24000e34 	.word	0x24000e34

0800226c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return uwTick;
 8002270:	4b03      	ldr	r3, [pc, #12]	@ (8002280 <HAL_GetTick+0x14>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	24000e34 	.word	0x24000e34

08002284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800228c:	f7ff ffee 	bl	800226c <HAL_GetTick>
 8002290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d005      	beq.n	80022aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800229e:	4b0a      	ldr	r3, [pc, #40]	@ (80022c8 <HAL_Delay+0x44>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022aa:	bf00      	nop
 80022ac:	f7ff ffde 	bl	800226c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d8f7      	bhi.n	80022ac <HAL_Delay+0x28>
  {
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	24000024 	.word	0x24000024

080022cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80022d0:	4b03      	ldr	r3, [pc, #12]	@ (80022e0 <HAL_GetREVID+0x14>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	0c1b      	lsrs	r3, r3, #16
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	5c001000 	.word	0x5c001000

080022e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002324 <__NVIC_SetPriorityGrouping+0x40>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002300:	4013      	ands	r3, r2
 8002302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800230c:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <__NVIC_SetPriorityGrouping+0x44>)
 800230e:	4313      	orrs	r3, r2
 8002310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002312:	4a04      	ldr	r2, [pc, #16]	@ (8002324 <__NVIC_SetPriorityGrouping+0x40>)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	60d3      	str	r3, [r2, #12]
}
 8002318:	bf00      	nop
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00
 8002328:	05fa0000 	.word	0x05fa0000

0800232c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002330:	4b04      	ldr	r3, [pc, #16]	@ (8002344 <__NVIC_GetPriorityGrouping+0x18>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	f003 0307 	and.w	r3, r3, #7
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002356:	2b00      	cmp	r3, #0
 8002358:	db0b      	blt.n	8002372 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	f003 021f 	and.w	r2, r3, #31
 8002360:	4907      	ldr	r1, [pc, #28]	@ (8002380 <__NVIC_EnableIRQ+0x38>)
 8002362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002366:	095b      	lsrs	r3, r3, #5
 8002368:	2001      	movs	r0, #1
 800236a:	fa00 f202 	lsl.w	r2, r0, r2
 800236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000e100 	.word	0xe000e100

08002384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	6039      	str	r1, [r7, #0]
 800238e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002390:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002394:	2b00      	cmp	r3, #0
 8002396:	db0a      	blt.n	80023ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	b2da      	uxtb	r2, r3
 800239c:	490c      	ldr	r1, [pc, #48]	@ (80023d0 <__NVIC_SetPriority+0x4c>)
 800239e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023a2:	0112      	lsls	r2, r2, #4
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	440b      	add	r3, r1
 80023a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023ac:	e00a      	b.n	80023c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4908      	ldr	r1, [pc, #32]	@ (80023d4 <__NVIC_SetPriority+0x50>)
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	3b04      	subs	r3, #4
 80023bc:	0112      	lsls	r2, r2, #4
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	440b      	add	r3, r1
 80023c2:	761a      	strb	r2, [r3, #24]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000e100 	.word	0xe000e100
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b089      	sub	sp, #36	@ 0x24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f1c3 0307 	rsb	r3, r3, #7
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	bf28      	it	cs
 80023f6:	2304      	movcs	r3, #4
 80023f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3304      	adds	r3, #4
 80023fe:	2b06      	cmp	r3, #6
 8002400:	d902      	bls.n	8002408 <NVIC_EncodePriority+0x30>
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3b03      	subs	r3, #3
 8002406:	e000      	b.n	800240a <NVIC_EncodePriority+0x32>
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800240c:	f04f 32ff 	mov.w	r2, #4294967295
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43da      	mvns	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	401a      	ands	r2, r3
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002420:	f04f 31ff 	mov.w	r1, #4294967295
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	fa01 f303 	lsl.w	r3, r1, r3
 800242a:	43d9      	mvns	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002430:	4313      	orrs	r3, r2
         );
}
 8002432:	4618      	mov	r0, r3
 8002434:	3724      	adds	r7, #36	@ 0x24
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff ff4c 	bl	80022e4 <__NVIC_SetPriorityGrouping>
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002462:	f7ff ff63 	bl	800232c <__NVIC_GetPriorityGrouping>
 8002466:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	68b9      	ldr	r1, [r7, #8]
 800246c:	6978      	ldr	r0, [r7, #20]
 800246e:	f7ff ffb3 	bl	80023d8 <NVIC_EncodePriority>
 8002472:	4602      	mov	r2, r0
 8002474:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff ff82 	bl	8002384 <__NVIC_SetPriority>
}
 8002480:	bf00      	nop
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002492:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff ff56 	bl	8002348 <__NVIC_EnableIRQ>
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80024ac:	f7ff fede 	bl	800226c <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e316      	b.n	8002aea <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a66      	ldr	r2, [pc, #408]	@ (800265c <HAL_DMA_Init+0x1b8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d04a      	beq.n	800255c <HAL_DMA_Init+0xb8>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a65      	ldr	r2, [pc, #404]	@ (8002660 <HAL_DMA_Init+0x1bc>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d045      	beq.n	800255c <HAL_DMA_Init+0xb8>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a63      	ldr	r2, [pc, #396]	@ (8002664 <HAL_DMA_Init+0x1c0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d040      	beq.n	800255c <HAL_DMA_Init+0xb8>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a62      	ldr	r2, [pc, #392]	@ (8002668 <HAL_DMA_Init+0x1c4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d03b      	beq.n	800255c <HAL_DMA_Init+0xb8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a60      	ldr	r2, [pc, #384]	@ (800266c <HAL_DMA_Init+0x1c8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d036      	beq.n	800255c <HAL_DMA_Init+0xb8>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a5f      	ldr	r2, [pc, #380]	@ (8002670 <HAL_DMA_Init+0x1cc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d031      	beq.n	800255c <HAL_DMA_Init+0xb8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a5d      	ldr	r2, [pc, #372]	@ (8002674 <HAL_DMA_Init+0x1d0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d02c      	beq.n	800255c <HAL_DMA_Init+0xb8>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a5c      	ldr	r2, [pc, #368]	@ (8002678 <HAL_DMA_Init+0x1d4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d027      	beq.n	800255c <HAL_DMA_Init+0xb8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a5a      	ldr	r2, [pc, #360]	@ (800267c <HAL_DMA_Init+0x1d8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d022      	beq.n	800255c <HAL_DMA_Init+0xb8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a59      	ldr	r2, [pc, #356]	@ (8002680 <HAL_DMA_Init+0x1dc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d01d      	beq.n	800255c <HAL_DMA_Init+0xb8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a57      	ldr	r2, [pc, #348]	@ (8002684 <HAL_DMA_Init+0x1e0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d018      	beq.n	800255c <HAL_DMA_Init+0xb8>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a56      	ldr	r2, [pc, #344]	@ (8002688 <HAL_DMA_Init+0x1e4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d013      	beq.n	800255c <HAL_DMA_Init+0xb8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a54      	ldr	r2, [pc, #336]	@ (800268c <HAL_DMA_Init+0x1e8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00e      	beq.n	800255c <HAL_DMA_Init+0xb8>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a53      	ldr	r2, [pc, #332]	@ (8002690 <HAL_DMA_Init+0x1ec>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d009      	beq.n	800255c <HAL_DMA_Init+0xb8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a51      	ldr	r2, [pc, #324]	@ (8002694 <HAL_DMA_Init+0x1f0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d004      	beq.n	800255c <HAL_DMA_Init+0xb8>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a50      	ldr	r2, [pc, #320]	@ (8002698 <HAL_DMA_Init+0x1f4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d101      	bne.n	8002560 <HAL_DMA_Init+0xbc>
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <HAL_DMA_Init+0xbe>
 8002560:	2300      	movs	r3, #0
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 813b 	beq.w	80027de <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a37      	ldr	r2, [pc, #220]	@ (800265c <HAL_DMA_Init+0x1b8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d04a      	beq.n	8002618 <HAL_DMA_Init+0x174>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a36      	ldr	r2, [pc, #216]	@ (8002660 <HAL_DMA_Init+0x1bc>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d045      	beq.n	8002618 <HAL_DMA_Init+0x174>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a34      	ldr	r2, [pc, #208]	@ (8002664 <HAL_DMA_Init+0x1c0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d040      	beq.n	8002618 <HAL_DMA_Init+0x174>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a33      	ldr	r2, [pc, #204]	@ (8002668 <HAL_DMA_Init+0x1c4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d03b      	beq.n	8002618 <HAL_DMA_Init+0x174>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a31      	ldr	r2, [pc, #196]	@ (800266c <HAL_DMA_Init+0x1c8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d036      	beq.n	8002618 <HAL_DMA_Init+0x174>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a30      	ldr	r2, [pc, #192]	@ (8002670 <HAL_DMA_Init+0x1cc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d031      	beq.n	8002618 <HAL_DMA_Init+0x174>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002674 <HAL_DMA_Init+0x1d0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d02c      	beq.n	8002618 <HAL_DMA_Init+0x174>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002678 <HAL_DMA_Init+0x1d4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d027      	beq.n	8002618 <HAL_DMA_Init+0x174>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a2b      	ldr	r2, [pc, #172]	@ (800267c <HAL_DMA_Init+0x1d8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d022      	beq.n	8002618 <HAL_DMA_Init+0x174>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002680 <HAL_DMA_Init+0x1dc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d01d      	beq.n	8002618 <HAL_DMA_Init+0x174>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a28      	ldr	r2, [pc, #160]	@ (8002684 <HAL_DMA_Init+0x1e0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d018      	beq.n	8002618 <HAL_DMA_Init+0x174>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a27      	ldr	r2, [pc, #156]	@ (8002688 <HAL_DMA_Init+0x1e4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d013      	beq.n	8002618 <HAL_DMA_Init+0x174>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a25      	ldr	r2, [pc, #148]	@ (800268c <HAL_DMA_Init+0x1e8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00e      	beq.n	8002618 <HAL_DMA_Init+0x174>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a24      	ldr	r2, [pc, #144]	@ (8002690 <HAL_DMA_Init+0x1ec>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d009      	beq.n	8002618 <HAL_DMA_Init+0x174>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a22      	ldr	r2, [pc, #136]	@ (8002694 <HAL_DMA_Init+0x1f0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d004      	beq.n	8002618 <HAL_DMA_Init+0x174>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a21      	ldr	r2, [pc, #132]	@ (8002698 <HAL_DMA_Init+0x1f4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d108      	bne.n	800262a <HAL_DMA_Init+0x186>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0201 	bic.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e007      	b.n	800263a <HAL_DMA_Init+0x196>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0201 	bic.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800263a:	e02f      	b.n	800269c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800263c:	f7ff fe16 	bl	800226c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b05      	cmp	r3, #5
 8002648:	d928      	bls.n	800269c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2220      	movs	r2, #32
 800264e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2203      	movs	r2, #3
 8002654:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e246      	b.n	8002aea <HAL_DMA_Init+0x646>
 800265c:	40020010 	.word	0x40020010
 8002660:	40020028 	.word	0x40020028
 8002664:	40020040 	.word	0x40020040
 8002668:	40020058 	.word	0x40020058
 800266c:	40020070 	.word	0x40020070
 8002670:	40020088 	.word	0x40020088
 8002674:	400200a0 	.word	0x400200a0
 8002678:	400200b8 	.word	0x400200b8
 800267c:	40020410 	.word	0x40020410
 8002680:	40020428 	.word	0x40020428
 8002684:	40020440 	.word	0x40020440
 8002688:	40020458 	.word	0x40020458
 800268c:	40020470 	.word	0x40020470
 8002690:	40020488 	.word	0x40020488
 8002694:	400204a0 	.word	0x400204a0
 8002698:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1c8      	bne.n	800263c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4b83      	ldr	r3, [pc, #524]	@ (80028c4 <HAL_DMA_Init+0x420>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80026c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026da:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d107      	bne.n	8002700 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f8:	4313      	orrs	r3, r2
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002700:	4b71      	ldr	r3, [pc, #452]	@ (80028c8 <HAL_DMA_Init+0x424>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b71      	ldr	r3, [pc, #452]	@ (80028cc <HAL_DMA_Init+0x428>)
 8002706:	4013      	ands	r3, r2
 8002708:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800270c:	d328      	bcc.n	8002760 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b28      	cmp	r3, #40	@ 0x28
 8002714:	d903      	bls.n	800271e <HAL_DMA_Init+0x27a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b2e      	cmp	r3, #46	@ 0x2e
 800271c:	d917      	bls.n	800274e <HAL_DMA_Init+0x2aa>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b3e      	cmp	r3, #62	@ 0x3e
 8002724:	d903      	bls.n	800272e <HAL_DMA_Init+0x28a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b42      	cmp	r3, #66	@ 0x42
 800272c:	d90f      	bls.n	800274e <HAL_DMA_Init+0x2aa>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b46      	cmp	r3, #70	@ 0x46
 8002734:	d903      	bls.n	800273e <HAL_DMA_Init+0x29a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b48      	cmp	r3, #72	@ 0x48
 800273c:	d907      	bls.n	800274e <HAL_DMA_Init+0x2aa>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b4e      	cmp	r3, #78	@ 0x4e
 8002744:	d905      	bls.n	8002752 <HAL_DMA_Init+0x2ae>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b52      	cmp	r3, #82	@ 0x52
 800274c:	d801      	bhi.n	8002752 <HAL_DMA_Init+0x2ae>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_DMA_Init+0x2b0>
 8002752:	2300      	movs	r3, #0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800275e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f023 0307 	bic.w	r3, r3, #7
 8002776:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	4313      	orrs	r3, r2
 8002780:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002786:	2b04      	cmp	r3, #4
 8002788:	d117      	bne.n	80027ba <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00e      	beq.n	80027ba <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f002 fb33 	bl	8004e08 <DMA_CheckFifoParam>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2240      	movs	r2, #64	@ 0x40
 80027ac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e197      	b.n	8002aea <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f002 fa6e 	bl	8004ca4 <DMA_CalcBaseAndBitshift>
 80027c8:	4603      	mov	r3, r0
 80027ca:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	223f      	movs	r2, #63	@ 0x3f
 80027d6:	409a      	lsls	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	e0cd      	b.n	800297a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a3b      	ldr	r2, [pc, #236]	@ (80028d0 <HAL_DMA_Init+0x42c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d022      	beq.n	800282e <HAL_DMA_Init+0x38a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a39      	ldr	r2, [pc, #228]	@ (80028d4 <HAL_DMA_Init+0x430>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d01d      	beq.n	800282e <HAL_DMA_Init+0x38a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a38      	ldr	r2, [pc, #224]	@ (80028d8 <HAL_DMA_Init+0x434>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d018      	beq.n	800282e <HAL_DMA_Init+0x38a>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a36      	ldr	r2, [pc, #216]	@ (80028dc <HAL_DMA_Init+0x438>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d013      	beq.n	800282e <HAL_DMA_Init+0x38a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a35      	ldr	r2, [pc, #212]	@ (80028e0 <HAL_DMA_Init+0x43c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d00e      	beq.n	800282e <HAL_DMA_Init+0x38a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a33      	ldr	r2, [pc, #204]	@ (80028e4 <HAL_DMA_Init+0x440>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d009      	beq.n	800282e <HAL_DMA_Init+0x38a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a32      	ldr	r2, [pc, #200]	@ (80028e8 <HAL_DMA_Init+0x444>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d004      	beq.n	800282e <HAL_DMA_Init+0x38a>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a30      	ldr	r2, [pc, #192]	@ (80028ec <HAL_DMA_Init+0x448>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d101      	bne.n	8002832 <HAL_DMA_Init+0x38e>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_DMA_Init+0x390>
 8002832:	2300      	movs	r3, #0
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 8097 	beq.w	8002968 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a24      	ldr	r2, [pc, #144]	@ (80028d0 <HAL_DMA_Init+0x42c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d021      	beq.n	8002888 <HAL_DMA_Init+0x3e4>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a22      	ldr	r2, [pc, #136]	@ (80028d4 <HAL_DMA_Init+0x430>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d01c      	beq.n	8002888 <HAL_DMA_Init+0x3e4>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a21      	ldr	r2, [pc, #132]	@ (80028d8 <HAL_DMA_Init+0x434>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d017      	beq.n	8002888 <HAL_DMA_Init+0x3e4>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1f      	ldr	r2, [pc, #124]	@ (80028dc <HAL_DMA_Init+0x438>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d012      	beq.n	8002888 <HAL_DMA_Init+0x3e4>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1e      	ldr	r2, [pc, #120]	@ (80028e0 <HAL_DMA_Init+0x43c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d00d      	beq.n	8002888 <HAL_DMA_Init+0x3e4>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a1c      	ldr	r2, [pc, #112]	@ (80028e4 <HAL_DMA_Init+0x440>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d008      	beq.n	8002888 <HAL_DMA_Init+0x3e4>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1b      	ldr	r2, [pc, #108]	@ (80028e8 <HAL_DMA_Init+0x444>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d003      	beq.n	8002888 <HAL_DMA_Init+0x3e4>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a19      	ldr	r2, [pc, #100]	@ (80028ec <HAL_DMA_Init+0x448>)
 8002886:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	4b13      	ldr	r3, [pc, #76]	@ (80028f0 <HAL_DMA_Init+0x44c>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b40      	cmp	r3, #64	@ 0x40
 80028ae:	d021      	beq.n	80028f4 <HAL_DMA_Init+0x450>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b80      	cmp	r3, #128	@ 0x80
 80028b6:	d102      	bne.n	80028be <HAL_DMA_Init+0x41a>
 80028b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028bc:	e01b      	b.n	80028f6 <HAL_DMA_Init+0x452>
 80028be:	2300      	movs	r3, #0
 80028c0:	e019      	b.n	80028f6 <HAL_DMA_Init+0x452>
 80028c2:	bf00      	nop
 80028c4:	fe10803f 	.word	0xfe10803f
 80028c8:	5c001000 	.word	0x5c001000
 80028cc:	ffff0000 	.word	0xffff0000
 80028d0:	58025408 	.word	0x58025408
 80028d4:	5802541c 	.word	0x5802541c
 80028d8:	58025430 	.word	0x58025430
 80028dc:	58025444 	.word	0x58025444
 80028e0:	58025458 	.word	0x58025458
 80028e4:	5802546c 	.word	0x5802546c
 80028e8:	58025480 	.word	0x58025480
 80028ec:	58025494 	.word	0x58025494
 80028f0:	fffe000f 	.word	0xfffe000f
 80028f4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68d2      	ldr	r2, [r2, #12]
 80028fa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002904:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800290c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002914:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800291c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002924:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4313      	orrs	r3, r2
 800292a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	4b6e      	ldr	r3, [pc, #440]	@ (8002af4 <HAL_DMA_Init+0x650>)
 800293c:	4413      	add	r3, r2
 800293e:	4a6e      	ldr	r2, [pc, #440]	@ (8002af8 <HAL_DMA_Init+0x654>)
 8002940:	fba2 2303 	umull	r2, r3, r2, r3
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	009a      	lsls	r2, r3, #2
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f002 f9a9 	bl	8004ca4 <DMA_CalcBaseAndBitshift>
 8002952:	4603      	mov	r3, r0
 8002954:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	2201      	movs	r2, #1
 8002960:	409a      	lsls	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	e008      	b.n	800297a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2240      	movs	r2, #64	@ 0x40
 800296c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2203      	movs	r2, #3
 8002972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e0b7      	b.n	8002aea <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a5f      	ldr	r2, [pc, #380]	@ (8002afc <HAL_DMA_Init+0x658>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d072      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a5d      	ldr	r2, [pc, #372]	@ (8002b00 <HAL_DMA_Init+0x65c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d06d      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a5c      	ldr	r2, [pc, #368]	@ (8002b04 <HAL_DMA_Init+0x660>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d068      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a5a      	ldr	r2, [pc, #360]	@ (8002b08 <HAL_DMA_Init+0x664>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d063      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a59      	ldr	r2, [pc, #356]	@ (8002b0c <HAL_DMA_Init+0x668>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d05e      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a57      	ldr	r2, [pc, #348]	@ (8002b10 <HAL_DMA_Init+0x66c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d059      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a56      	ldr	r2, [pc, #344]	@ (8002b14 <HAL_DMA_Init+0x670>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d054      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a54      	ldr	r2, [pc, #336]	@ (8002b18 <HAL_DMA_Init+0x674>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d04f      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a53      	ldr	r2, [pc, #332]	@ (8002b1c <HAL_DMA_Init+0x678>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d04a      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a51      	ldr	r2, [pc, #324]	@ (8002b20 <HAL_DMA_Init+0x67c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d045      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a50      	ldr	r2, [pc, #320]	@ (8002b24 <HAL_DMA_Init+0x680>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d040      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002b28 <HAL_DMA_Init+0x684>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d03b      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a4d      	ldr	r2, [pc, #308]	@ (8002b2c <HAL_DMA_Init+0x688>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d036      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a4b      	ldr	r2, [pc, #300]	@ (8002b30 <HAL_DMA_Init+0x68c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d031      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a4a      	ldr	r2, [pc, #296]	@ (8002b34 <HAL_DMA_Init+0x690>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d02c      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a48      	ldr	r2, [pc, #288]	@ (8002b38 <HAL_DMA_Init+0x694>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d027      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a47      	ldr	r2, [pc, #284]	@ (8002b3c <HAL_DMA_Init+0x698>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d022      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a45      	ldr	r2, [pc, #276]	@ (8002b40 <HAL_DMA_Init+0x69c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d01d      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a44      	ldr	r2, [pc, #272]	@ (8002b44 <HAL_DMA_Init+0x6a0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d018      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a42      	ldr	r2, [pc, #264]	@ (8002b48 <HAL_DMA_Init+0x6a4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d013      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a41      	ldr	r2, [pc, #260]	@ (8002b4c <HAL_DMA_Init+0x6a8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d00e      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a3f      	ldr	r2, [pc, #252]	@ (8002b50 <HAL_DMA_Init+0x6ac>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d009      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a3e      	ldr	r2, [pc, #248]	@ (8002b54 <HAL_DMA_Init+0x6b0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d004      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a3c      	ldr	r2, [pc, #240]	@ (8002b58 <HAL_DMA_Init+0x6b4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d101      	bne.n	8002a6e <HAL_DMA_Init+0x5ca>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <HAL_DMA_Init+0x5cc>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d032      	beq.n	8002ada <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f002 fa43 	bl	8004f00 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b80      	cmp	r3, #128	@ 0x80
 8002a80:	d102      	bne.n	8002a88 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a9c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d010      	beq.n	8002ac8 <HAL_DMA_Init+0x624>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d80c      	bhi.n	8002ac8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f002 fac0 	bl	8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	e008      	b.n	8002ada <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	a7fdabf8 	.word	0xa7fdabf8
 8002af8:	cccccccd 	.word	0xcccccccd
 8002afc:	40020010 	.word	0x40020010
 8002b00:	40020028 	.word	0x40020028
 8002b04:	40020040 	.word	0x40020040
 8002b08:	40020058 	.word	0x40020058
 8002b0c:	40020070 	.word	0x40020070
 8002b10:	40020088 	.word	0x40020088
 8002b14:	400200a0 	.word	0x400200a0
 8002b18:	400200b8 	.word	0x400200b8
 8002b1c:	40020410 	.word	0x40020410
 8002b20:	40020428 	.word	0x40020428
 8002b24:	40020440 	.word	0x40020440
 8002b28:	40020458 	.word	0x40020458
 8002b2c:	40020470 	.word	0x40020470
 8002b30:	40020488 	.word	0x40020488
 8002b34:	400204a0 	.word	0x400204a0
 8002b38:	400204b8 	.word	0x400204b8
 8002b3c:	58025408 	.word	0x58025408
 8002b40:	5802541c 	.word	0x5802541c
 8002b44:	58025430 	.word	0x58025430
 8002b48:	58025444 	.word	0x58025444
 8002b4c:	58025458 	.word	0x58025458
 8002b50:	5802546c 	.word	0x5802546c
 8002b54:	58025480 	.word	0x58025480
 8002b58:	58025494 	.word	0x58025494

08002b5c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e226      	b.n	8002fc6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <HAL_DMA_Start_IT+0x2a>
 8002b82:	2302      	movs	r3, #2
 8002b84:	e21f      	b.n	8002fc6 <HAL_DMA_Start_IT+0x46a>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	f040 820a 	bne.w	8002fb0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a68      	ldr	r2, [pc, #416]	@ (8002d50 <HAL_DMA_Start_IT+0x1f4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d04a      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a66      	ldr	r2, [pc, #408]	@ (8002d54 <HAL_DMA_Start_IT+0x1f8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d045      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a65      	ldr	r2, [pc, #404]	@ (8002d58 <HAL_DMA_Start_IT+0x1fc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d040      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a63      	ldr	r2, [pc, #396]	@ (8002d5c <HAL_DMA_Start_IT+0x200>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d03b      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a62      	ldr	r2, [pc, #392]	@ (8002d60 <HAL_DMA_Start_IT+0x204>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d036      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a60      	ldr	r2, [pc, #384]	@ (8002d64 <HAL_DMA_Start_IT+0x208>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d031      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a5f      	ldr	r2, [pc, #380]	@ (8002d68 <HAL_DMA_Start_IT+0x20c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d02c      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a5d      	ldr	r2, [pc, #372]	@ (8002d6c <HAL_DMA_Start_IT+0x210>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d027      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a5c      	ldr	r2, [pc, #368]	@ (8002d70 <HAL_DMA_Start_IT+0x214>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d022      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a5a      	ldr	r2, [pc, #360]	@ (8002d74 <HAL_DMA_Start_IT+0x218>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d01d      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a59      	ldr	r2, [pc, #356]	@ (8002d78 <HAL_DMA_Start_IT+0x21c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d018      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a57      	ldr	r2, [pc, #348]	@ (8002d7c <HAL_DMA_Start_IT+0x220>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d013      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a56      	ldr	r2, [pc, #344]	@ (8002d80 <HAL_DMA_Start_IT+0x224>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00e      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a54      	ldr	r2, [pc, #336]	@ (8002d84 <HAL_DMA_Start_IT+0x228>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d009      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a53      	ldr	r2, [pc, #332]	@ (8002d88 <HAL_DMA_Start_IT+0x22c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d004      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a51      	ldr	r2, [pc, #324]	@ (8002d8c <HAL_DMA_Start_IT+0x230>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d108      	bne.n	8002c5c <HAL_DMA_Start_IT+0x100>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0201 	bic.w	r2, r2, #1
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	e007      	b.n	8002c6c <HAL_DMA_Start_IT+0x110>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0201 	bic.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f001 fe6a 	bl	800494c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a34      	ldr	r2, [pc, #208]	@ (8002d50 <HAL_DMA_Start_IT+0x1f4>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d04a      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a33      	ldr	r2, [pc, #204]	@ (8002d54 <HAL_DMA_Start_IT+0x1f8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d045      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a31      	ldr	r2, [pc, #196]	@ (8002d58 <HAL_DMA_Start_IT+0x1fc>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d040      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a30      	ldr	r2, [pc, #192]	@ (8002d5c <HAL_DMA_Start_IT+0x200>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d03b      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a2e      	ldr	r2, [pc, #184]	@ (8002d60 <HAL_DMA_Start_IT+0x204>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d036      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a2d      	ldr	r2, [pc, #180]	@ (8002d64 <HAL_DMA_Start_IT+0x208>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d031      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a2b      	ldr	r2, [pc, #172]	@ (8002d68 <HAL_DMA_Start_IT+0x20c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d02c      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a2a      	ldr	r2, [pc, #168]	@ (8002d6c <HAL_DMA_Start_IT+0x210>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d027      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a28      	ldr	r2, [pc, #160]	@ (8002d70 <HAL_DMA_Start_IT+0x214>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d022      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a27      	ldr	r2, [pc, #156]	@ (8002d74 <HAL_DMA_Start_IT+0x218>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d01d      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a25      	ldr	r2, [pc, #148]	@ (8002d78 <HAL_DMA_Start_IT+0x21c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d018      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a24      	ldr	r2, [pc, #144]	@ (8002d7c <HAL_DMA_Start_IT+0x220>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d013      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a22      	ldr	r2, [pc, #136]	@ (8002d80 <HAL_DMA_Start_IT+0x224>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00e      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a21      	ldr	r2, [pc, #132]	@ (8002d84 <HAL_DMA_Start_IT+0x228>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d009      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a1f      	ldr	r2, [pc, #124]	@ (8002d88 <HAL_DMA_Start_IT+0x22c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d004      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a1e      	ldr	r2, [pc, #120]	@ (8002d8c <HAL_DMA_Start_IT+0x230>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d101      	bne.n	8002d1c <HAL_DMA_Start_IT+0x1c0>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <HAL_DMA_Start_IT+0x1c2>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d036      	beq.n	8002d90 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f023 021e 	bic.w	r2, r3, #30
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 0216 	orr.w	r2, r2, #22
 8002d34:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d03e      	beq.n	8002dbc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 0208 	orr.w	r2, r2, #8
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e035      	b.n	8002dbc <HAL_DMA_Start_IT+0x260>
 8002d50:	40020010 	.word	0x40020010
 8002d54:	40020028 	.word	0x40020028
 8002d58:	40020040 	.word	0x40020040
 8002d5c:	40020058 	.word	0x40020058
 8002d60:	40020070 	.word	0x40020070
 8002d64:	40020088 	.word	0x40020088
 8002d68:	400200a0 	.word	0x400200a0
 8002d6c:	400200b8 	.word	0x400200b8
 8002d70:	40020410 	.word	0x40020410
 8002d74:	40020428 	.word	0x40020428
 8002d78:	40020440 	.word	0x40020440
 8002d7c:	40020458 	.word	0x40020458
 8002d80:	40020470 	.word	0x40020470
 8002d84:	40020488 	.word	0x40020488
 8002d88:	400204a0 	.word	0x400204a0
 8002d8c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 020e 	bic.w	r2, r3, #14
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 020a 	orr.w	r2, r2, #10
 8002da2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d007      	beq.n	8002dbc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0204 	orr.w	r2, r2, #4
 8002dba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a83      	ldr	r2, [pc, #524]	@ (8002fd0 <HAL_DMA_Start_IT+0x474>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d072      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a82      	ldr	r2, [pc, #520]	@ (8002fd4 <HAL_DMA_Start_IT+0x478>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d06d      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a80      	ldr	r2, [pc, #512]	@ (8002fd8 <HAL_DMA_Start_IT+0x47c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d068      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a7f      	ldr	r2, [pc, #508]	@ (8002fdc <HAL_DMA_Start_IT+0x480>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d063      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a7d      	ldr	r2, [pc, #500]	@ (8002fe0 <HAL_DMA_Start_IT+0x484>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d05e      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a7c      	ldr	r2, [pc, #496]	@ (8002fe4 <HAL_DMA_Start_IT+0x488>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d059      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a7a      	ldr	r2, [pc, #488]	@ (8002fe8 <HAL_DMA_Start_IT+0x48c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d054      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a79      	ldr	r2, [pc, #484]	@ (8002fec <HAL_DMA_Start_IT+0x490>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d04f      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a77      	ldr	r2, [pc, #476]	@ (8002ff0 <HAL_DMA_Start_IT+0x494>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d04a      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a76      	ldr	r2, [pc, #472]	@ (8002ff4 <HAL_DMA_Start_IT+0x498>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d045      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a74      	ldr	r2, [pc, #464]	@ (8002ff8 <HAL_DMA_Start_IT+0x49c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d040      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a73      	ldr	r2, [pc, #460]	@ (8002ffc <HAL_DMA_Start_IT+0x4a0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d03b      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a71      	ldr	r2, [pc, #452]	@ (8003000 <HAL_DMA_Start_IT+0x4a4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d036      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a70      	ldr	r2, [pc, #448]	@ (8003004 <HAL_DMA_Start_IT+0x4a8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d031      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a6e      	ldr	r2, [pc, #440]	@ (8003008 <HAL_DMA_Start_IT+0x4ac>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d02c      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a6d      	ldr	r2, [pc, #436]	@ (800300c <HAL_DMA_Start_IT+0x4b0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d027      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a6b      	ldr	r2, [pc, #428]	@ (8003010 <HAL_DMA_Start_IT+0x4b4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d022      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a6a      	ldr	r2, [pc, #424]	@ (8003014 <HAL_DMA_Start_IT+0x4b8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d01d      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a68      	ldr	r2, [pc, #416]	@ (8003018 <HAL_DMA_Start_IT+0x4bc>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d018      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a67      	ldr	r2, [pc, #412]	@ (800301c <HAL_DMA_Start_IT+0x4c0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d013      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a65      	ldr	r2, [pc, #404]	@ (8003020 <HAL_DMA_Start_IT+0x4c4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00e      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a64      	ldr	r2, [pc, #400]	@ (8003024 <HAL_DMA_Start_IT+0x4c8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d009      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a62      	ldr	r2, [pc, #392]	@ (8003028 <HAL_DMA_Start_IT+0x4cc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d004      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a61      	ldr	r2, [pc, #388]	@ (800302c <HAL_DMA_Start_IT+0x4d0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d101      	bne.n	8002eb0 <HAL_DMA_Start_IT+0x354>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <HAL_DMA_Start_IT+0x356>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d01a      	beq.n	8002eec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d007      	beq.n	8002ed4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ece:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ed2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ee6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a37      	ldr	r2, [pc, #220]	@ (8002fd0 <HAL_DMA_Start_IT+0x474>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d04a      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a36      	ldr	r2, [pc, #216]	@ (8002fd4 <HAL_DMA_Start_IT+0x478>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d045      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a34      	ldr	r2, [pc, #208]	@ (8002fd8 <HAL_DMA_Start_IT+0x47c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d040      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a33      	ldr	r2, [pc, #204]	@ (8002fdc <HAL_DMA_Start_IT+0x480>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d03b      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a31      	ldr	r2, [pc, #196]	@ (8002fe0 <HAL_DMA_Start_IT+0x484>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d036      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a30      	ldr	r2, [pc, #192]	@ (8002fe4 <HAL_DMA_Start_IT+0x488>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d031      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a2e      	ldr	r2, [pc, #184]	@ (8002fe8 <HAL_DMA_Start_IT+0x48c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d02c      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a2d      	ldr	r2, [pc, #180]	@ (8002fec <HAL_DMA_Start_IT+0x490>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d027      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a2b      	ldr	r2, [pc, #172]	@ (8002ff0 <HAL_DMA_Start_IT+0x494>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d022      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a2a      	ldr	r2, [pc, #168]	@ (8002ff4 <HAL_DMA_Start_IT+0x498>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d01d      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a28      	ldr	r2, [pc, #160]	@ (8002ff8 <HAL_DMA_Start_IT+0x49c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d018      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a27      	ldr	r2, [pc, #156]	@ (8002ffc <HAL_DMA_Start_IT+0x4a0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d013      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a25      	ldr	r2, [pc, #148]	@ (8003000 <HAL_DMA_Start_IT+0x4a4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00e      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a24      	ldr	r2, [pc, #144]	@ (8003004 <HAL_DMA_Start_IT+0x4a8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d009      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a22      	ldr	r2, [pc, #136]	@ (8003008 <HAL_DMA_Start_IT+0x4ac>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d004      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a21      	ldr	r2, [pc, #132]	@ (800300c <HAL_DMA_Start_IT+0x4b0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d108      	bne.n	8002f9e <HAL_DMA_Start_IT+0x442>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	e012      	b.n	8002fc4 <HAL_DMA_Start_IT+0x468>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0201 	orr.w	r2, r2, #1
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	e009      	b.n	8002fc4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002fb6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40020010 	.word	0x40020010
 8002fd4:	40020028 	.word	0x40020028
 8002fd8:	40020040 	.word	0x40020040
 8002fdc:	40020058 	.word	0x40020058
 8002fe0:	40020070 	.word	0x40020070
 8002fe4:	40020088 	.word	0x40020088
 8002fe8:	400200a0 	.word	0x400200a0
 8002fec:	400200b8 	.word	0x400200b8
 8002ff0:	40020410 	.word	0x40020410
 8002ff4:	40020428 	.word	0x40020428
 8002ff8:	40020440 	.word	0x40020440
 8002ffc:	40020458 	.word	0x40020458
 8003000:	40020470 	.word	0x40020470
 8003004:	40020488 	.word	0x40020488
 8003008:	400204a0 	.word	0x400204a0
 800300c:	400204b8 	.word	0x400204b8
 8003010:	58025408 	.word	0x58025408
 8003014:	5802541c 	.word	0x5802541c
 8003018:	58025430 	.word	0x58025430
 800301c:	58025444 	.word	0x58025444
 8003020:	58025458 	.word	0x58025458
 8003024:	5802546c 	.word	0x5802546c
 8003028:	58025480 	.word	0x58025480
 800302c:	58025494 	.word	0x58025494

08003030 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003038:	f7ff f918 	bl	800226c <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e2dc      	b.n	8003602 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d008      	beq.n	8003066 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2280      	movs	r2, #128	@ 0x80
 8003058:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e2cd      	b.n	8003602 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a76      	ldr	r2, [pc, #472]	@ (8003244 <HAL_DMA_Abort+0x214>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d04a      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a74      	ldr	r2, [pc, #464]	@ (8003248 <HAL_DMA_Abort+0x218>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d045      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a73      	ldr	r2, [pc, #460]	@ (800324c <HAL_DMA_Abort+0x21c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d040      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a71      	ldr	r2, [pc, #452]	@ (8003250 <HAL_DMA_Abort+0x220>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d03b      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a70      	ldr	r2, [pc, #448]	@ (8003254 <HAL_DMA_Abort+0x224>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d036      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a6e      	ldr	r2, [pc, #440]	@ (8003258 <HAL_DMA_Abort+0x228>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d031      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a6d      	ldr	r2, [pc, #436]	@ (800325c <HAL_DMA_Abort+0x22c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d02c      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a6b      	ldr	r2, [pc, #428]	@ (8003260 <HAL_DMA_Abort+0x230>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d027      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a6a      	ldr	r2, [pc, #424]	@ (8003264 <HAL_DMA_Abort+0x234>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d022      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a68      	ldr	r2, [pc, #416]	@ (8003268 <HAL_DMA_Abort+0x238>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d01d      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a67      	ldr	r2, [pc, #412]	@ (800326c <HAL_DMA_Abort+0x23c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d018      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a65      	ldr	r2, [pc, #404]	@ (8003270 <HAL_DMA_Abort+0x240>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d013      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a64      	ldr	r2, [pc, #400]	@ (8003274 <HAL_DMA_Abort+0x244>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00e      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a62      	ldr	r2, [pc, #392]	@ (8003278 <HAL_DMA_Abort+0x248>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d009      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a61      	ldr	r2, [pc, #388]	@ (800327c <HAL_DMA_Abort+0x24c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d004      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a5f      	ldr	r2, [pc, #380]	@ (8003280 <HAL_DMA_Abort+0x250>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d101      	bne.n	800310a <HAL_DMA_Abort+0xda>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <HAL_DMA_Abort+0xdc>
 800310a:	2300      	movs	r3, #0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d013      	beq.n	8003138 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 021e 	bic.w	r2, r2, #30
 800311e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800312e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	e00a      	b.n	800314e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 020e 	bic.w	r2, r2, #14
 8003146:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a3c      	ldr	r2, [pc, #240]	@ (8003244 <HAL_DMA_Abort+0x214>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d072      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a3a      	ldr	r2, [pc, #232]	@ (8003248 <HAL_DMA_Abort+0x218>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d06d      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a39      	ldr	r2, [pc, #228]	@ (800324c <HAL_DMA_Abort+0x21c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d068      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a37      	ldr	r2, [pc, #220]	@ (8003250 <HAL_DMA_Abort+0x220>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d063      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a36      	ldr	r2, [pc, #216]	@ (8003254 <HAL_DMA_Abort+0x224>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d05e      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a34      	ldr	r2, [pc, #208]	@ (8003258 <HAL_DMA_Abort+0x228>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d059      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a33      	ldr	r2, [pc, #204]	@ (800325c <HAL_DMA_Abort+0x22c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d054      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a31      	ldr	r2, [pc, #196]	@ (8003260 <HAL_DMA_Abort+0x230>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d04f      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a30      	ldr	r2, [pc, #192]	@ (8003264 <HAL_DMA_Abort+0x234>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d04a      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a2e      	ldr	r2, [pc, #184]	@ (8003268 <HAL_DMA_Abort+0x238>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d045      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a2d      	ldr	r2, [pc, #180]	@ (800326c <HAL_DMA_Abort+0x23c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d040      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003270 <HAL_DMA_Abort+0x240>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d03b      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2a      	ldr	r2, [pc, #168]	@ (8003274 <HAL_DMA_Abort+0x244>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d036      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a28      	ldr	r2, [pc, #160]	@ (8003278 <HAL_DMA_Abort+0x248>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d031      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a27      	ldr	r2, [pc, #156]	@ (800327c <HAL_DMA_Abort+0x24c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d02c      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a25      	ldr	r2, [pc, #148]	@ (8003280 <HAL_DMA_Abort+0x250>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d027      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a24      	ldr	r2, [pc, #144]	@ (8003284 <HAL_DMA_Abort+0x254>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d022      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a22      	ldr	r2, [pc, #136]	@ (8003288 <HAL_DMA_Abort+0x258>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01d      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a21      	ldr	r2, [pc, #132]	@ (800328c <HAL_DMA_Abort+0x25c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d018      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1f      	ldr	r2, [pc, #124]	@ (8003290 <HAL_DMA_Abort+0x260>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d013      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1e      	ldr	r2, [pc, #120]	@ (8003294 <HAL_DMA_Abort+0x264>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00e      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1c      	ldr	r2, [pc, #112]	@ (8003298 <HAL_DMA_Abort+0x268>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d009      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1b      	ldr	r2, [pc, #108]	@ (800329c <HAL_DMA_Abort+0x26c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d004      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a19      	ldr	r2, [pc, #100]	@ (80032a0 <HAL_DMA_Abort+0x270>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d132      	bne.n	80032a4 <HAL_DMA_Abort+0x274>
 800323e:	2301      	movs	r3, #1
 8003240:	e031      	b.n	80032a6 <HAL_DMA_Abort+0x276>
 8003242:	bf00      	nop
 8003244:	40020010 	.word	0x40020010
 8003248:	40020028 	.word	0x40020028
 800324c:	40020040 	.word	0x40020040
 8003250:	40020058 	.word	0x40020058
 8003254:	40020070 	.word	0x40020070
 8003258:	40020088 	.word	0x40020088
 800325c:	400200a0 	.word	0x400200a0
 8003260:	400200b8 	.word	0x400200b8
 8003264:	40020410 	.word	0x40020410
 8003268:	40020428 	.word	0x40020428
 800326c:	40020440 	.word	0x40020440
 8003270:	40020458 	.word	0x40020458
 8003274:	40020470 	.word	0x40020470
 8003278:	40020488 	.word	0x40020488
 800327c:	400204a0 	.word	0x400204a0
 8003280:	400204b8 	.word	0x400204b8
 8003284:	58025408 	.word	0x58025408
 8003288:	5802541c 	.word	0x5802541c
 800328c:	58025430 	.word	0x58025430
 8003290:	58025444 	.word	0x58025444
 8003294:	58025458 	.word	0x58025458
 8003298:	5802546c 	.word	0x5802546c
 800329c:	58025480 	.word	0x58025480
 80032a0:	58025494 	.word	0x58025494
 80032a4:	2300      	movs	r3, #0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d007      	beq.n	80032ba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a6d      	ldr	r2, [pc, #436]	@ (8003474 <HAL_DMA_Abort+0x444>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d04a      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a6b      	ldr	r2, [pc, #428]	@ (8003478 <HAL_DMA_Abort+0x448>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d045      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a6a      	ldr	r2, [pc, #424]	@ (800347c <HAL_DMA_Abort+0x44c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d040      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a68      	ldr	r2, [pc, #416]	@ (8003480 <HAL_DMA_Abort+0x450>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d03b      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a67      	ldr	r2, [pc, #412]	@ (8003484 <HAL_DMA_Abort+0x454>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d036      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a65      	ldr	r2, [pc, #404]	@ (8003488 <HAL_DMA_Abort+0x458>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d031      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a64      	ldr	r2, [pc, #400]	@ (800348c <HAL_DMA_Abort+0x45c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d02c      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a62      	ldr	r2, [pc, #392]	@ (8003490 <HAL_DMA_Abort+0x460>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d027      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a61      	ldr	r2, [pc, #388]	@ (8003494 <HAL_DMA_Abort+0x464>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d022      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a5f      	ldr	r2, [pc, #380]	@ (8003498 <HAL_DMA_Abort+0x468>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d01d      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a5e      	ldr	r2, [pc, #376]	@ (800349c <HAL_DMA_Abort+0x46c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d018      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a5c      	ldr	r2, [pc, #368]	@ (80034a0 <HAL_DMA_Abort+0x470>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a5b      	ldr	r2, [pc, #364]	@ (80034a4 <HAL_DMA_Abort+0x474>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00e      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a59      	ldr	r2, [pc, #356]	@ (80034a8 <HAL_DMA_Abort+0x478>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d009      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a58      	ldr	r2, [pc, #352]	@ (80034ac <HAL_DMA_Abort+0x47c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a56      	ldr	r2, [pc, #344]	@ (80034b0 <HAL_DMA_Abort+0x480>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d108      	bne.n	800336c <HAL_DMA_Abort+0x33c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0201 	bic.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	e007      	b.n	800337c <HAL_DMA_Abort+0x34c>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0201 	bic.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800337c:	e013      	b.n	80033a6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800337e:	f7fe ff75 	bl	800226c <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b05      	cmp	r3, #5
 800338a:	d90c      	bls.n	80033a6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2203      	movs	r2, #3
 8003396:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e12d      	b.n	8003602 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1e5      	bne.n	800337e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a2f      	ldr	r2, [pc, #188]	@ (8003474 <HAL_DMA_Abort+0x444>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d04a      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003478 <HAL_DMA_Abort+0x448>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d045      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a2c      	ldr	r2, [pc, #176]	@ (800347c <HAL_DMA_Abort+0x44c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d040      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003480 <HAL_DMA_Abort+0x450>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d03b      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a29      	ldr	r2, [pc, #164]	@ (8003484 <HAL_DMA_Abort+0x454>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d036      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a27      	ldr	r2, [pc, #156]	@ (8003488 <HAL_DMA_Abort+0x458>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d031      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a26      	ldr	r2, [pc, #152]	@ (800348c <HAL_DMA_Abort+0x45c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d02c      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a24      	ldr	r2, [pc, #144]	@ (8003490 <HAL_DMA_Abort+0x460>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d027      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a23      	ldr	r2, [pc, #140]	@ (8003494 <HAL_DMA_Abort+0x464>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d022      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a21      	ldr	r2, [pc, #132]	@ (8003498 <HAL_DMA_Abort+0x468>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d01d      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a20      	ldr	r2, [pc, #128]	@ (800349c <HAL_DMA_Abort+0x46c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d018      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1e      	ldr	r2, [pc, #120]	@ (80034a0 <HAL_DMA_Abort+0x470>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d013      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1d      	ldr	r2, [pc, #116]	@ (80034a4 <HAL_DMA_Abort+0x474>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00e      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1b      	ldr	r2, [pc, #108]	@ (80034a8 <HAL_DMA_Abort+0x478>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d009      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a1a      	ldr	r2, [pc, #104]	@ (80034ac <HAL_DMA_Abort+0x47c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d004      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a18      	ldr	r2, [pc, #96]	@ (80034b0 <HAL_DMA_Abort+0x480>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d101      	bne.n	8003456 <HAL_DMA_Abort+0x426>
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <HAL_DMA_Abort+0x428>
 8003456:	2300      	movs	r3, #0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d02b      	beq.n	80034b4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003460:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	223f      	movs	r2, #63	@ 0x3f
 800346c:	409a      	lsls	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	609a      	str	r2, [r3, #8]
 8003472:	e02a      	b.n	80034ca <HAL_DMA_Abort+0x49a>
 8003474:	40020010 	.word	0x40020010
 8003478:	40020028 	.word	0x40020028
 800347c:	40020040 	.word	0x40020040
 8003480:	40020058 	.word	0x40020058
 8003484:	40020070 	.word	0x40020070
 8003488:	40020088 	.word	0x40020088
 800348c:	400200a0 	.word	0x400200a0
 8003490:	400200b8 	.word	0x400200b8
 8003494:	40020410 	.word	0x40020410
 8003498:	40020428 	.word	0x40020428
 800349c:	40020440 	.word	0x40020440
 80034a0:	40020458 	.word	0x40020458
 80034a4:	40020470 	.word	0x40020470
 80034a8:	40020488 	.word	0x40020488
 80034ac:	400204a0 	.word	0x400204a0
 80034b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034be:	f003 031f 	and.w	r3, r3, #31
 80034c2:	2201      	movs	r2, #1
 80034c4:	409a      	lsls	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a4f      	ldr	r2, [pc, #316]	@ (800360c <HAL_DMA_Abort+0x5dc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d072      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a4d      	ldr	r2, [pc, #308]	@ (8003610 <HAL_DMA_Abort+0x5e0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d06d      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a4c      	ldr	r2, [pc, #304]	@ (8003614 <HAL_DMA_Abort+0x5e4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d068      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a4a      	ldr	r2, [pc, #296]	@ (8003618 <HAL_DMA_Abort+0x5e8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d063      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a49      	ldr	r2, [pc, #292]	@ (800361c <HAL_DMA_Abort+0x5ec>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d05e      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a47      	ldr	r2, [pc, #284]	@ (8003620 <HAL_DMA_Abort+0x5f0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d059      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a46      	ldr	r2, [pc, #280]	@ (8003624 <HAL_DMA_Abort+0x5f4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d054      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a44      	ldr	r2, [pc, #272]	@ (8003628 <HAL_DMA_Abort+0x5f8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d04f      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a43      	ldr	r2, [pc, #268]	@ (800362c <HAL_DMA_Abort+0x5fc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d04a      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a41      	ldr	r2, [pc, #260]	@ (8003630 <HAL_DMA_Abort+0x600>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d045      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a40      	ldr	r2, [pc, #256]	@ (8003634 <HAL_DMA_Abort+0x604>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d040      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a3e      	ldr	r2, [pc, #248]	@ (8003638 <HAL_DMA_Abort+0x608>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d03b      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a3d      	ldr	r2, [pc, #244]	@ (800363c <HAL_DMA_Abort+0x60c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d036      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a3b      	ldr	r2, [pc, #236]	@ (8003640 <HAL_DMA_Abort+0x610>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d031      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a3a      	ldr	r2, [pc, #232]	@ (8003644 <HAL_DMA_Abort+0x614>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d02c      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a38      	ldr	r2, [pc, #224]	@ (8003648 <HAL_DMA_Abort+0x618>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d027      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a37      	ldr	r2, [pc, #220]	@ (800364c <HAL_DMA_Abort+0x61c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d022      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a35      	ldr	r2, [pc, #212]	@ (8003650 <HAL_DMA_Abort+0x620>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d01d      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a34      	ldr	r2, [pc, #208]	@ (8003654 <HAL_DMA_Abort+0x624>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d018      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a32      	ldr	r2, [pc, #200]	@ (8003658 <HAL_DMA_Abort+0x628>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d013      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a31      	ldr	r2, [pc, #196]	@ (800365c <HAL_DMA_Abort+0x62c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00e      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a2f      	ldr	r2, [pc, #188]	@ (8003660 <HAL_DMA_Abort+0x630>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d009      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a2e      	ldr	r2, [pc, #184]	@ (8003664 <HAL_DMA_Abort+0x634>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d004      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003668 <HAL_DMA_Abort+0x638>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d101      	bne.n	80035be <HAL_DMA_Abort+0x58e>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <HAL_DMA_Abort+0x590>
 80035be:	2300      	movs	r3, #0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d015      	beq.n	80035f0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80035cc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00c      	beq.n	80035f0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035e4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80035ee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40020010 	.word	0x40020010
 8003610:	40020028 	.word	0x40020028
 8003614:	40020040 	.word	0x40020040
 8003618:	40020058 	.word	0x40020058
 800361c:	40020070 	.word	0x40020070
 8003620:	40020088 	.word	0x40020088
 8003624:	400200a0 	.word	0x400200a0
 8003628:	400200b8 	.word	0x400200b8
 800362c:	40020410 	.word	0x40020410
 8003630:	40020428 	.word	0x40020428
 8003634:	40020440 	.word	0x40020440
 8003638:	40020458 	.word	0x40020458
 800363c:	40020470 	.word	0x40020470
 8003640:	40020488 	.word	0x40020488
 8003644:	400204a0 	.word	0x400204a0
 8003648:	400204b8 	.word	0x400204b8
 800364c:	58025408 	.word	0x58025408
 8003650:	5802541c 	.word	0x5802541c
 8003654:	58025430 	.word	0x58025430
 8003658:	58025444 	.word	0x58025444
 800365c:	58025458 	.word	0x58025458
 8003660:	5802546c 	.word	0x5802546c
 8003664:	58025480 	.word	0x58025480
 8003668:	58025494 	.word	0x58025494

0800366c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e237      	b.n	8003aee <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d004      	beq.n	8003694 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2280      	movs	r2, #128	@ 0x80
 800368e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e22c      	b.n	8003aee <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a5c      	ldr	r2, [pc, #368]	@ (800380c <HAL_DMA_Abort_IT+0x1a0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d04a      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003810 <HAL_DMA_Abort_IT+0x1a4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d045      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a59      	ldr	r2, [pc, #356]	@ (8003814 <HAL_DMA_Abort_IT+0x1a8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d040      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a58      	ldr	r2, [pc, #352]	@ (8003818 <HAL_DMA_Abort_IT+0x1ac>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d03b      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a56      	ldr	r2, [pc, #344]	@ (800381c <HAL_DMA_Abort_IT+0x1b0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d036      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a55      	ldr	r2, [pc, #340]	@ (8003820 <HAL_DMA_Abort_IT+0x1b4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d031      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a53      	ldr	r2, [pc, #332]	@ (8003824 <HAL_DMA_Abort_IT+0x1b8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d02c      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a52      	ldr	r2, [pc, #328]	@ (8003828 <HAL_DMA_Abort_IT+0x1bc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d027      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a50      	ldr	r2, [pc, #320]	@ (800382c <HAL_DMA_Abort_IT+0x1c0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d022      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a4f      	ldr	r2, [pc, #316]	@ (8003830 <HAL_DMA_Abort_IT+0x1c4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d01d      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a4d      	ldr	r2, [pc, #308]	@ (8003834 <HAL_DMA_Abort_IT+0x1c8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d018      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a4c      	ldr	r2, [pc, #304]	@ (8003838 <HAL_DMA_Abort_IT+0x1cc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d013      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a4a      	ldr	r2, [pc, #296]	@ (800383c <HAL_DMA_Abort_IT+0x1d0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00e      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a49      	ldr	r2, [pc, #292]	@ (8003840 <HAL_DMA_Abort_IT+0x1d4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d009      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a47      	ldr	r2, [pc, #284]	@ (8003844 <HAL_DMA_Abort_IT+0x1d8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d004      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a46      	ldr	r2, [pc, #280]	@ (8003848 <HAL_DMA_Abort_IT+0x1dc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d101      	bne.n	8003738 <HAL_DMA_Abort_IT+0xcc>
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <HAL_DMA_Abort_IT+0xce>
 8003738:	2300      	movs	r3, #0
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 8086 	beq.w	800384c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2204      	movs	r2, #4
 8003744:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a2f      	ldr	r2, [pc, #188]	@ (800380c <HAL_DMA_Abort_IT+0x1a0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d04a      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a2e      	ldr	r2, [pc, #184]	@ (8003810 <HAL_DMA_Abort_IT+0x1a4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d045      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a2c      	ldr	r2, [pc, #176]	@ (8003814 <HAL_DMA_Abort_IT+0x1a8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d040      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a2b      	ldr	r2, [pc, #172]	@ (8003818 <HAL_DMA_Abort_IT+0x1ac>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d03b      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a29      	ldr	r2, [pc, #164]	@ (800381c <HAL_DMA_Abort_IT+0x1b0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d036      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a28      	ldr	r2, [pc, #160]	@ (8003820 <HAL_DMA_Abort_IT+0x1b4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d031      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a26      	ldr	r2, [pc, #152]	@ (8003824 <HAL_DMA_Abort_IT+0x1b8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d02c      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a25      	ldr	r2, [pc, #148]	@ (8003828 <HAL_DMA_Abort_IT+0x1bc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d027      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a23      	ldr	r2, [pc, #140]	@ (800382c <HAL_DMA_Abort_IT+0x1c0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d022      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a22      	ldr	r2, [pc, #136]	@ (8003830 <HAL_DMA_Abort_IT+0x1c4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d01d      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a20      	ldr	r2, [pc, #128]	@ (8003834 <HAL_DMA_Abort_IT+0x1c8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d018      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003838 <HAL_DMA_Abort_IT+0x1cc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d013      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1d      	ldr	r2, [pc, #116]	@ (800383c <HAL_DMA_Abort_IT+0x1d0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00e      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003840 <HAL_DMA_Abort_IT+0x1d4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d009      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003844 <HAL_DMA_Abort_IT+0x1d8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d004      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a19      	ldr	r2, [pc, #100]	@ (8003848 <HAL_DMA_Abort_IT+0x1dc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d108      	bne.n	80037fa <HAL_DMA_Abort_IT+0x18e>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0201 	bic.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	e178      	b.n	8003aec <HAL_DMA_Abort_IT+0x480>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0201 	bic.w	r2, r2, #1
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e16f      	b.n	8003aec <HAL_DMA_Abort_IT+0x480>
 800380c:	40020010 	.word	0x40020010
 8003810:	40020028 	.word	0x40020028
 8003814:	40020040 	.word	0x40020040
 8003818:	40020058 	.word	0x40020058
 800381c:	40020070 	.word	0x40020070
 8003820:	40020088 	.word	0x40020088
 8003824:	400200a0 	.word	0x400200a0
 8003828:	400200b8 	.word	0x400200b8
 800382c:	40020410 	.word	0x40020410
 8003830:	40020428 	.word	0x40020428
 8003834:	40020440 	.word	0x40020440
 8003838:	40020458 	.word	0x40020458
 800383c:	40020470 	.word	0x40020470
 8003840:	40020488 	.word	0x40020488
 8003844:	400204a0 	.word	0x400204a0
 8003848:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 020e 	bic.w	r2, r2, #14
 800385a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a6c      	ldr	r2, [pc, #432]	@ (8003a14 <HAL_DMA_Abort_IT+0x3a8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d04a      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a6b      	ldr	r2, [pc, #428]	@ (8003a18 <HAL_DMA_Abort_IT+0x3ac>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d045      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a69      	ldr	r2, [pc, #420]	@ (8003a1c <HAL_DMA_Abort_IT+0x3b0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d040      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a68      	ldr	r2, [pc, #416]	@ (8003a20 <HAL_DMA_Abort_IT+0x3b4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d03b      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a66      	ldr	r2, [pc, #408]	@ (8003a24 <HAL_DMA_Abort_IT+0x3b8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d036      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a65      	ldr	r2, [pc, #404]	@ (8003a28 <HAL_DMA_Abort_IT+0x3bc>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d031      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a63      	ldr	r2, [pc, #396]	@ (8003a2c <HAL_DMA_Abort_IT+0x3c0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d02c      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a62      	ldr	r2, [pc, #392]	@ (8003a30 <HAL_DMA_Abort_IT+0x3c4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d027      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a60      	ldr	r2, [pc, #384]	@ (8003a34 <HAL_DMA_Abort_IT+0x3c8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d022      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a5f      	ldr	r2, [pc, #380]	@ (8003a38 <HAL_DMA_Abort_IT+0x3cc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d01d      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a5d      	ldr	r2, [pc, #372]	@ (8003a3c <HAL_DMA_Abort_IT+0x3d0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d018      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a5c      	ldr	r2, [pc, #368]	@ (8003a40 <HAL_DMA_Abort_IT+0x3d4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d013      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a5a      	ldr	r2, [pc, #360]	@ (8003a44 <HAL_DMA_Abort_IT+0x3d8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00e      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a59      	ldr	r2, [pc, #356]	@ (8003a48 <HAL_DMA_Abort_IT+0x3dc>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d009      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a57      	ldr	r2, [pc, #348]	@ (8003a4c <HAL_DMA_Abort_IT+0x3e0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d004      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a56      	ldr	r2, [pc, #344]	@ (8003a50 <HAL_DMA_Abort_IT+0x3e4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d108      	bne.n	800390e <HAL_DMA_Abort_IT+0x2a2>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	e007      	b.n	800391e <HAL_DMA_Abort_IT+0x2b2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0201 	bic.w	r2, r2, #1
 800391c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a3c      	ldr	r2, [pc, #240]	@ (8003a14 <HAL_DMA_Abort_IT+0x3a8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d072      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a3a      	ldr	r2, [pc, #232]	@ (8003a18 <HAL_DMA_Abort_IT+0x3ac>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d06d      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a39      	ldr	r2, [pc, #228]	@ (8003a1c <HAL_DMA_Abort_IT+0x3b0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d068      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a37      	ldr	r2, [pc, #220]	@ (8003a20 <HAL_DMA_Abort_IT+0x3b4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d063      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a36      	ldr	r2, [pc, #216]	@ (8003a24 <HAL_DMA_Abort_IT+0x3b8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d05e      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a34      	ldr	r2, [pc, #208]	@ (8003a28 <HAL_DMA_Abort_IT+0x3bc>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d059      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a33      	ldr	r2, [pc, #204]	@ (8003a2c <HAL_DMA_Abort_IT+0x3c0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d054      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a31      	ldr	r2, [pc, #196]	@ (8003a30 <HAL_DMA_Abort_IT+0x3c4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d04f      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a30      	ldr	r2, [pc, #192]	@ (8003a34 <HAL_DMA_Abort_IT+0x3c8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d04a      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a2e      	ldr	r2, [pc, #184]	@ (8003a38 <HAL_DMA_Abort_IT+0x3cc>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d045      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a2d      	ldr	r2, [pc, #180]	@ (8003a3c <HAL_DMA_Abort_IT+0x3d0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d040      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a2b      	ldr	r2, [pc, #172]	@ (8003a40 <HAL_DMA_Abort_IT+0x3d4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d03b      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a2a      	ldr	r2, [pc, #168]	@ (8003a44 <HAL_DMA_Abort_IT+0x3d8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d036      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a28      	ldr	r2, [pc, #160]	@ (8003a48 <HAL_DMA_Abort_IT+0x3dc>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d031      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a27      	ldr	r2, [pc, #156]	@ (8003a4c <HAL_DMA_Abort_IT+0x3e0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d02c      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a25      	ldr	r2, [pc, #148]	@ (8003a50 <HAL_DMA_Abort_IT+0x3e4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d027      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a24      	ldr	r2, [pc, #144]	@ (8003a54 <HAL_DMA_Abort_IT+0x3e8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d022      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a22      	ldr	r2, [pc, #136]	@ (8003a58 <HAL_DMA_Abort_IT+0x3ec>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d01d      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a21      	ldr	r2, [pc, #132]	@ (8003a5c <HAL_DMA_Abort_IT+0x3f0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d018      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003a60 <HAL_DMA_Abort_IT+0x3f4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d013      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003a64 <HAL_DMA_Abort_IT+0x3f8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00e      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003a68 <HAL_DMA_Abort_IT+0x3fc>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d009      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1b      	ldr	r2, [pc, #108]	@ (8003a6c <HAL_DMA_Abort_IT+0x400>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d004      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a19      	ldr	r2, [pc, #100]	@ (8003a70 <HAL_DMA_Abort_IT+0x404>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d132      	bne.n	8003a74 <HAL_DMA_Abort_IT+0x408>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e031      	b.n	8003a76 <HAL_DMA_Abort_IT+0x40a>
 8003a12:	bf00      	nop
 8003a14:	40020010 	.word	0x40020010
 8003a18:	40020028 	.word	0x40020028
 8003a1c:	40020040 	.word	0x40020040
 8003a20:	40020058 	.word	0x40020058
 8003a24:	40020070 	.word	0x40020070
 8003a28:	40020088 	.word	0x40020088
 8003a2c:	400200a0 	.word	0x400200a0
 8003a30:	400200b8 	.word	0x400200b8
 8003a34:	40020410 	.word	0x40020410
 8003a38:	40020428 	.word	0x40020428
 8003a3c:	40020440 	.word	0x40020440
 8003a40:	40020458 	.word	0x40020458
 8003a44:	40020470 	.word	0x40020470
 8003a48:	40020488 	.word	0x40020488
 8003a4c:	400204a0 	.word	0x400204a0
 8003a50:	400204b8 	.word	0x400204b8
 8003a54:	58025408 	.word	0x58025408
 8003a58:	5802541c 	.word	0x5802541c
 8003a5c:	58025430 	.word	0x58025430
 8003a60:	58025444 	.word	0x58025444
 8003a64:	58025458 	.word	0x58025458
 8003a68:	5802546c 	.word	0x5802546c
 8003a6c:	58025480 	.word	0x58025480
 8003a70:	58025494 	.word	0x58025494
 8003a74:	2300      	movs	r3, #0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d028      	beq.n	8003acc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a88:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	2201      	movs	r2, #1
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003aa8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00c      	beq.n	8003acc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003abc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ac0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003aca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop

08003af8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08a      	sub	sp, #40	@ 0x28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b04:	4b67      	ldr	r3, [pc, #412]	@ (8003ca4 <HAL_DMA_IRQHandler+0x1ac>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a67      	ldr	r2, [pc, #412]	@ (8003ca8 <HAL_DMA_IRQHandler+0x1b0>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	0a9b      	lsrs	r3, r3, #10
 8003b10:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b16:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b1c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a5f      	ldr	r2, [pc, #380]	@ (8003cac <HAL_DMA_IRQHandler+0x1b4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d04a      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a5d      	ldr	r2, [pc, #372]	@ (8003cb0 <HAL_DMA_IRQHandler+0x1b8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d045      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a5c      	ldr	r2, [pc, #368]	@ (8003cb4 <HAL_DMA_IRQHandler+0x1bc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d040      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a5a      	ldr	r2, [pc, #360]	@ (8003cb8 <HAL_DMA_IRQHandler+0x1c0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d03b      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a59      	ldr	r2, [pc, #356]	@ (8003cbc <HAL_DMA_IRQHandler+0x1c4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d036      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a57      	ldr	r2, [pc, #348]	@ (8003cc0 <HAL_DMA_IRQHandler+0x1c8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d031      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a56      	ldr	r2, [pc, #344]	@ (8003cc4 <HAL_DMA_IRQHandler+0x1cc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d02c      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a54      	ldr	r2, [pc, #336]	@ (8003cc8 <HAL_DMA_IRQHandler+0x1d0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d027      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a53      	ldr	r2, [pc, #332]	@ (8003ccc <HAL_DMA_IRQHandler+0x1d4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d022      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a51      	ldr	r2, [pc, #324]	@ (8003cd0 <HAL_DMA_IRQHandler+0x1d8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d01d      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a50      	ldr	r2, [pc, #320]	@ (8003cd4 <HAL_DMA_IRQHandler+0x1dc>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d018      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a4e      	ldr	r2, [pc, #312]	@ (8003cd8 <HAL_DMA_IRQHandler+0x1e0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d013      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a4d      	ldr	r2, [pc, #308]	@ (8003cdc <HAL_DMA_IRQHandler+0x1e4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00e      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a4b      	ldr	r2, [pc, #300]	@ (8003ce0 <HAL_DMA_IRQHandler+0x1e8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d009      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a4a      	ldr	r2, [pc, #296]	@ (8003ce4 <HAL_DMA_IRQHandler+0x1ec>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d004      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a48      	ldr	r2, [pc, #288]	@ (8003ce8 <HAL_DMA_IRQHandler+0x1f0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d101      	bne.n	8003bce <HAL_DMA_IRQHandler+0xd6>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <HAL_DMA_IRQHandler+0xd8>
 8003bce:	2300      	movs	r3, #0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 842b 	beq.w	800442c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	2208      	movs	r2, #8
 8003be0:	409a      	lsls	r2, r3
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80a2 	beq.w	8003d30 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a2e      	ldr	r2, [pc, #184]	@ (8003cac <HAL_DMA_IRQHandler+0x1b4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d04a      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a2d      	ldr	r2, [pc, #180]	@ (8003cb0 <HAL_DMA_IRQHandler+0x1b8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d045      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a2b      	ldr	r2, [pc, #172]	@ (8003cb4 <HAL_DMA_IRQHandler+0x1bc>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d040      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a2a      	ldr	r2, [pc, #168]	@ (8003cb8 <HAL_DMA_IRQHandler+0x1c0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d03b      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a28      	ldr	r2, [pc, #160]	@ (8003cbc <HAL_DMA_IRQHandler+0x1c4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d036      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a27      	ldr	r2, [pc, #156]	@ (8003cc0 <HAL_DMA_IRQHandler+0x1c8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d031      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a25      	ldr	r2, [pc, #148]	@ (8003cc4 <HAL_DMA_IRQHandler+0x1cc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d02c      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a24      	ldr	r2, [pc, #144]	@ (8003cc8 <HAL_DMA_IRQHandler+0x1d0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d027      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a22      	ldr	r2, [pc, #136]	@ (8003ccc <HAL_DMA_IRQHandler+0x1d4>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d022      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a21      	ldr	r2, [pc, #132]	@ (8003cd0 <HAL_DMA_IRQHandler+0x1d8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d01d      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a1f      	ldr	r2, [pc, #124]	@ (8003cd4 <HAL_DMA_IRQHandler+0x1dc>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d018      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003cd8 <HAL_DMA_IRQHandler+0x1e0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d013      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a1c      	ldr	r2, [pc, #112]	@ (8003cdc <HAL_DMA_IRQHandler+0x1e4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00e      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce0 <HAL_DMA_IRQHandler+0x1e8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d009      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a19      	ldr	r2, [pc, #100]	@ (8003ce4 <HAL_DMA_IRQHandler+0x1ec>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d004      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a18      	ldr	r2, [pc, #96]	@ (8003ce8 <HAL_DMA_IRQHandler+0x1f0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d12f      	bne.n	8003cec <HAL_DMA_IRQHandler+0x1f4>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	bf14      	ite	ne
 8003c9a:	2301      	movne	r3, #1
 8003c9c:	2300      	moveq	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	e02e      	b.n	8003d00 <HAL_DMA_IRQHandler+0x208>
 8003ca2:	bf00      	nop
 8003ca4:	24000000 	.word	0x24000000
 8003ca8:	1b4e81b5 	.word	0x1b4e81b5
 8003cac:	40020010 	.word	0x40020010
 8003cb0:	40020028 	.word	0x40020028
 8003cb4:	40020040 	.word	0x40020040
 8003cb8:	40020058 	.word	0x40020058
 8003cbc:	40020070 	.word	0x40020070
 8003cc0:	40020088 	.word	0x40020088
 8003cc4:	400200a0 	.word	0x400200a0
 8003cc8:	400200b8 	.word	0x400200b8
 8003ccc:	40020410 	.word	0x40020410
 8003cd0:	40020428 	.word	0x40020428
 8003cd4:	40020440 	.word	0x40020440
 8003cd8:	40020458 	.word	0x40020458
 8003cdc:	40020470 	.word	0x40020470
 8003ce0:	40020488 	.word	0x40020488
 8003ce4:	400204a0 	.word	0x400204a0
 8003ce8:	400204b8 	.word	0x400204b8
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	bf14      	ite	ne
 8003cfa:	2301      	movne	r3, #1
 8003cfc:	2300      	moveq	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d015      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0204 	bic.w	r2, r2, #4
 8003d12:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d28:	f043 0201 	orr.w	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d06e      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a69      	ldr	r2, [pc, #420]	@ (8003ef0 <HAL_DMA_IRQHandler+0x3f8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d04a      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a67      	ldr	r2, [pc, #412]	@ (8003ef4 <HAL_DMA_IRQHandler+0x3fc>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d045      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a66      	ldr	r2, [pc, #408]	@ (8003ef8 <HAL_DMA_IRQHandler+0x400>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d040      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a64      	ldr	r2, [pc, #400]	@ (8003efc <HAL_DMA_IRQHandler+0x404>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d03b      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a63      	ldr	r2, [pc, #396]	@ (8003f00 <HAL_DMA_IRQHandler+0x408>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d036      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a61      	ldr	r2, [pc, #388]	@ (8003f04 <HAL_DMA_IRQHandler+0x40c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d031      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a60      	ldr	r2, [pc, #384]	@ (8003f08 <HAL_DMA_IRQHandler+0x410>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d02c      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a5e      	ldr	r2, [pc, #376]	@ (8003f0c <HAL_DMA_IRQHandler+0x414>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d027      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a5d      	ldr	r2, [pc, #372]	@ (8003f10 <HAL_DMA_IRQHandler+0x418>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d022      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a5b      	ldr	r2, [pc, #364]	@ (8003f14 <HAL_DMA_IRQHandler+0x41c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01d      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a5a      	ldr	r2, [pc, #360]	@ (8003f18 <HAL_DMA_IRQHandler+0x420>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d018      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a58      	ldr	r2, [pc, #352]	@ (8003f1c <HAL_DMA_IRQHandler+0x424>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d013      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a57      	ldr	r2, [pc, #348]	@ (8003f20 <HAL_DMA_IRQHandler+0x428>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00e      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a55      	ldr	r2, [pc, #340]	@ (8003f24 <HAL_DMA_IRQHandler+0x42c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d009      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a54      	ldr	r2, [pc, #336]	@ (8003f28 <HAL_DMA_IRQHandler+0x430>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a52      	ldr	r2, [pc, #328]	@ (8003f2c <HAL_DMA_IRQHandler+0x434>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d10a      	bne.n	8003dfc <HAL_DMA_IRQHandler+0x304>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bf14      	ite	ne
 8003df4:	2301      	movne	r3, #1
 8003df6:	2300      	moveq	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	e003      	b.n	8003e04 <HAL_DMA_IRQHandler+0x30c>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2300      	movs	r3, #0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00d      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	2201      	movs	r2, #1
 8003e12:	409a      	lsls	r2, r3
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e1c:	f043 0202 	orr.w	r2, r3, #2
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 808f 	beq.w	8003f58 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ef0 <HAL_DMA_IRQHandler+0x3f8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d04a      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a2a      	ldr	r2, [pc, #168]	@ (8003ef4 <HAL_DMA_IRQHandler+0x3fc>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d045      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a29      	ldr	r2, [pc, #164]	@ (8003ef8 <HAL_DMA_IRQHandler+0x400>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d040      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a27      	ldr	r2, [pc, #156]	@ (8003efc <HAL_DMA_IRQHandler+0x404>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d03b      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a26      	ldr	r2, [pc, #152]	@ (8003f00 <HAL_DMA_IRQHandler+0x408>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d036      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a24      	ldr	r2, [pc, #144]	@ (8003f04 <HAL_DMA_IRQHandler+0x40c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d031      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a23      	ldr	r2, [pc, #140]	@ (8003f08 <HAL_DMA_IRQHandler+0x410>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d02c      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a21      	ldr	r2, [pc, #132]	@ (8003f0c <HAL_DMA_IRQHandler+0x414>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d027      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a20      	ldr	r2, [pc, #128]	@ (8003f10 <HAL_DMA_IRQHandler+0x418>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d022      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a1e      	ldr	r2, [pc, #120]	@ (8003f14 <HAL_DMA_IRQHandler+0x41c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01d      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a1d      	ldr	r2, [pc, #116]	@ (8003f18 <HAL_DMA_IRQHandler+0x420>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d018      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a1b      	ldr	r2, [pc, #108]	@ (8003f1c <HAL_DMA_IRQHandler+0x424>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d013      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1a      	ldr	r2, [pc, #104]	@ (8003f20 <HAL_DMA_IRQHandler+0x428>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00e      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a18      	ldr	r2, [pc, #96]	@ (8003f24 <HAL_DMA_IRQHandler+0x42c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d009      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a17      	ldr	r2, [pc, #92]	@ (8003f28 <HAL_DMA_IRQHandler+0x430>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d004      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a15      	ldr	r2, [pc, #84]	@ (8003f2c <HAL_DMA_IRQHandler+0x434>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d12a      	bne.n	8003f30 <HAL_DMA_IRQHandler+0x438>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bf14      	ite	ne
 8003ee8:	2301      	movne	r3, #1
 8003eea:	2300      	moveq	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	e023      	b.n	8003f38 <HAL_DMA_IRQHandler+0x440>
 8003ef0:	40020010 	.word	0x40020010
 8003ef4:	40020028 	.word	0x40020028
 8003ef8:	40020040 	.word	0x40020040
 8003efc:	40020058 	.word	0x40020058
 8003f00:	40020070 	.word	0x40020070
 8003f04:	40020088 	.word	0x40020088
 8003f08:	400200a0 	.word	0x400200a0
 8003f0c:	400200b8 	.word	0x400200b8
 8003f10:	40020410 	.word	0x40020410
 8003f14:	40020428 	.word	0x40020428
 8003f18:	40020440 	.word	0x40020440
 8003f1c:	40020458 	.word	0x40020458
 8003f20:	40020470 	.word	0x40020470
 8003f24:	40020488 	.word	0x40020488
 8003f28:	400204a0 	.word	0x400204a0
 8003f2c:	400204b8 	.word	0x400204b8
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2300      	movs	r3, #0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00d      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	2204      	movs	r2, #4
 8003f46:	409a      	lsls	r2, r3
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f50:	f043 0204 	orr.w	r2, r3, #4
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	2210      	movs	r2, #16
 8003f62:	409a      	lsls	r2, r3
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 80a6 	beq.w	80040ba <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a85      	ldr	r2, [pc, #532]	@ (8004188 <HAL_DMA_IRQHandler+0x690>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d04a      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a83      	ldr	r2, [pc, #524]	@ (800418c <HAL_DMA_IRQHandler+0x694>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d045      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a82      	ldr	r2, [pc, #520]	@ (8004190 <HAL_DMA_IRQHandler+0x698>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d040      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a80      	ldr	r2, [pc, #512]	@ (8004194 <HAL_DMA_IRQHandler+0x69c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d03b      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a7f      	ldr	r2, [pc, #508]	@ (8004198 <HAL_DMA_IRQHandler+0x6a0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d036      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a7d      	ldr	r2, [pc, #500]	@ (800419c <HAL_DMA_IRQHandler+0x6a4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d031      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a7c      	ldr	r2, [pc, #496]	@ (80041a0 <HAL_DMA_IRQHandler+0x6a8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d02c      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a7a      	ldr	r2, [pc, #488]	@ (80041a4 <HAL_DMA_IRQHandler+0x6ac>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d027      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a79      	ldr	r2, [pc, #484]	@ (80041a8 <HAL_DMA_IRQHandler+0x6b0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d022      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a77      	ldr	r2, [pc, #476]	@ (80041ac <HAL_DMA_IRQHandler+0x6b4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d01d      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a76      	ldr	r2, [pc, #472]	@ (80041b0 <HAL_DMA_IRQHandler+0x6b8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d018      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a74      	ldr	r2, [pc, #464]	@ (80041b4 <HAL_DMA_IRQHandler+0x6bc>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d013      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a73      	ldr	r2, [pc, #460]	@ (80041b8 <HAL_DMA_IRQHandler+0x6c0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00e      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a71      	ldr	r2, [pc, #452]	@ (80041bc <HAL_DMA_IRQHandler+0x6c4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d009      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a70      	ldr	r2, [pc, #448]	@ (80041c0 <HAL_DMA_IRQHandler+0x6c8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d004      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a6e      	ldr	r2, [pc, #440]	@ (80041c4 <HAL_DMA_IRQHandler+0x6cc>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d10a      	bne.n	8004024 <HAL_DMA_IRQHandler+0x52c>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b00      	cmp	r3, #0
 800401a:	bf14      	ite	ne
 800401c:	2301      	movne	r3, #1
 800401e:	2300      	moveq	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	e009      	b.n	8004038 <HAL_DMA_IRQHandler+0x540>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	bf14      	ite	ne
 8004032:	2301      	movne	r3, #1
 8004034:	2300      	moveq	r3, #0
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d03e      	beq.n	80040ba <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004040:	f003 031f 	and.w	r3, r3, #31
 8004044:	2210      	movs	r2, #16
 8004046:	409a      	lsls	r2, r3
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d018      	beq.n	800408c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d108      	bne.n	800407a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406c:	2b00      	cmp	r3, #0
 800406e:	d024      	beq.n	80040ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	4798      	blx	r3
 8004078:	e01f      	b.n	80040ba <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800407e:	2b00      	cmp	r3, #0
 8004080:	d01b      	beq.n	80040ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	4798      	blx	r3
 800408a:	e016      	b.n	80040ba <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004096:	2b00      	cmp	r3, #0
 8004098:	d107      	bne.n	80040aa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0208 	bic.w	r2, r2, #8
 80040a8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040be:	f003 031f 	and.w	r3, r3, #31
 80040c2:	2220      	movs	r2, #32
 80040c4:	409a      	lsls	r2, r3
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8110 	beq.w	80042f0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a2c      	ldr	r2, [pc, #176]	@ (8004188 <HAL_DMA_IRQHandler+0x690>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d04a      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a2b      	ldr	r2, [pc, #172]	@ (800418c <HAL_DMA_IRQHandler+0x694>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d045      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a29      	ldr	r2, [pc, #164]	@ (8004190 <HAL_DMA_IRQHandler+0x698>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d040      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a28      	ldr	r2, [pc, #160]	@ (8004194 <HAL_DMA_IRQHandler+0x69c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d03b      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a26      	ldr	r2, [pc, #152]	@ (8004198 <HAL_DMA_IRQHandler+0x6a0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d036      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a25      	ldr	r2, [pc, #148]	@ (800419c <HAL_DMA_IRQHandler+0x6a4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d031      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a23      	ldr	r2, [pc, #140]	@ (80041a0 <HAL_DMA_IRQHandler+0x6a8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d02c      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a22      	ldr	r2, [pc, #136]	@ (80041a4 <HAL_DMA_IRQHandler+0x6ac>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d027      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a20      	ldr	r2, [pc, #128]	@ (80041a8 <HAL_DMA_IRQHandler+0x6b0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d022      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1f      	ldr	r2, [pc, #124]	@ (80041ac <HAL_DMA_IRQHandler+0x6b4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d01d      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a1d      	ldr	r2, [pc, #116]	@ (80041b0 <HAL_DMA_IRQHandler+0x6b8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d018      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1c      	ldr	r2, [pc, #112]	@ (80041b4 <HAL_DMA_IRQHandler+0x6bc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d013      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a1a      	ldr	r2, [pc, #104]	@ (80041b8 <HAL_DMA_IRQHandler+0x6c0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d00e      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a19      	ldr	r2, [pc, #100]	@ (80041bc <HAL_DMA_IRQHandler+0x6c4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d009      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a17      	ldr	r2, [pc, #92]	@ (80041c0 <HAL_DMA_IRQHandler+0x6c8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d004      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a16      	ldr	r2, [pc, #88]	@ (80041c4 <HAL_DMA_IRQHandler+0x6cc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d12b      	bne.n	80041c8 <HAL_DMA_IRQHandler+0x6d0>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0310 	and.w	r3, r3, #16
 800417a:	2b00      	cmp	r3, #0
 800417c:	bf14      	ite	ne
 800417e:	2301      	movne	r3, #1
 8004180:	2300      	moveq	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	e02a      	b.n	80041dc <HAL_DMA_IRQHandler+0x6e4>
 8004186:	bf00      	nop
 8004188:	40020010 	.word	0x40020010
 800418c:	40020028 	.word	0x40020028
 8004190:	40020040 	.word	0x40020040
 8004194:	40020058 	.word	0x40020058
 8004198:	40020070 	.word	0x40020070
 800419c:	40020088 	.word	0x40020088
 80041a0:	400200a0 	.word	0x400200a0
 80041a4:	400200b8 	.word	0x400200b8
 80041a8:	40020410 	.word	0x40020410
 80041ac:	40020428 	.word	0x40020428
 80041b0:	40020440 	.word	0x40020440
 80041b4:	40020458 	.word	0x40020458
 80041b8:	40020470 	.word	0x40020470
 80041bc:	40020488 	.word	0x40020488
 80041c0:	400204a0 	.word	0x400204a0
 80041c4:	400204b8 	.word	0x400204b8
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bf14      	ite	ne
 80041d6:	2301      	movne	r3, #1
 80041d8:	2300      	moveq	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 8087 	beq.w	80042f0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	2220      	movs	r2, #32
 80041ec:	409a      	lsls	r2, r3
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d139      	bne.n	8004272 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0216 	bic.w	r2, r2, #22
 800420c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695a      	ldr	r2, [r3, #20]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800421c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004222:	2b00      	cmp	r3, #0
 8004224:	d103      	bne.n	800422e <HAL_DMA_IRQHandler+0x736>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800422a:	2b00      	cmp	r3, #0
 800422c:	d007      	beq.n	800423e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0208 	bic.w	r2, r2, #8
 800423c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	223f      	movs	r2, #63	@ 0x3f
 8004248:	409a      	lsls	r2, r3
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 834a 	beq.w	80048fc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	4798      	blx	r3
          }
          return;
 8004270:	e344      	b.n	80048fc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d018      	beq.n	80042b2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d108      	bne.n	80042a0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004292:	2b00      	cmp	r3, #0
 8004294:	d02c      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	4798      	blx	r3
 800429e:	e027      	b.n	80042f0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d023      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	4798      	blx	r3
 80042b0:	e01e      	b.n	80042f0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10f      	bne.n	80042e0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0210 	bic.w	r2, r2, #16
 80042ce:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 8306 	beq.w	8004906 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 8088 	beq.w	8004418 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2204      	movs	r2, #4
 800430c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a7a      	ldr	r2, [pc, #488]	@ (8004500 <HAL_DMA_IRQHandler+0xa08>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d04a      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a79      	ldr	r2, [pc, #484]	@ (8004504 <HAL_DMA_IRQHandler+0xa0c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d045      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a77      	ldr	r2, [pc, #476]	@ (8004508 <HAL_DMA_IRQHandler+0xa10>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d040      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a76      	ldr	r2, [pc, #472]	@ (800450c <HAL_DMA_IRQHandler+0xa14>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d03b      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a74      	ldr	r2, [pc, #464]	@ (8004510 <HAL_DMA_IRQHandler+0xa18>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d036      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a73      	ldr	r2, [pc, #460]	@ (8004514 <HAL_DMA_IRQHandler+0xa1c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d031      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a71      	ldr	r2, [pc, #452]	@ (8004518 <HAL_DMA_IRQHandler+0xa20>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d02c      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a70      	ldr	r2, [pc, #448]	@ (800451c <HAL_DMA_IRQHandler+0xa24>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d027      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a6e      	ldr	r2, [pc, #440]	@ (8004520 <HAL_DMA_IRQHandler+0xa28>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d022      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a6d      	ldr	r2, [pc, #436]	@ (8004524 <HAL_DMA_IRQHandler+0xa2c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d01d      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a6b      	ldr	r2, [pc, #428]	@ (8004528 <HAL_DMA_IRQHandler+0xa30>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d018      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a6a      	ldr	r2, [pc, #424]	@ (800452c <HAL_DMA_IRQHandler+0xa34>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d013      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a68      	ldr	r2, [pc, #416]	@ (8004530 <HAL_DMA_IRQHandler+0xa38>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00e      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a67      	ldr	r2, [pc, #412]	@ (8004534 <HAL_DMA_IRQHandler+0xa3c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d009      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a65      	ldr	r2, [pc, #404]	@ (8004538 <HAL_DMA_IRQHandler+0xa40>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d004      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a64      	ldr	r2, [pc, #400]	@ (800453c <HAL_DMA_IRQHandler+0xa44>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d108      	bne.n	80043c2 <HAL_DMA_IRQHandler+0x8ca>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0201 	bic.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	e007      	b.n	80043d2 <HAL_DMA_IRQHandler+0x8da>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0201 	bic.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3301      	adds	r3, #1
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043da:	429a      	cmp	r2, r3
 80043dc:	d307      	bcc.n	80043ee <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1f2      	bne.n	80043d2 <HAL_DMA_IRQHandler+0x8da>
 80043ec:	e000      	b.n	80043f0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80043ee:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d004      	beq.n	8004408 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2203      	movs	r2, #3
 8004402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004406:	e003      	b.n	8004410 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 8272 	beq.w	8004906 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	4798      	blx	r3
 800442a:	e26c      	b.n	8004906 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a43      	ldr	r2, [pc, #268]	@ (8004540 <HAL_DMA_IRQHandler+0xa48>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d022      	beq.n	800447c <HAL_DMA_IRQHandler+0x984>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a42      	ldr	r2, [pc, #264]	@ (8004544 <HAL_DMA_IRQHandler+0xa4c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d01d      	beq.n	800447c <HAL_DMA_IRQHandler+0x984>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a40      	ldr	r2, [pc, #256]	@ (8004548 <HAL_DMA_IRQHandler+0xa50>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d018      	beq.n	800447c <HAL_DMA_IRQHandler+0x984>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a3f      	ldr	r2, [pc, #252]	@ (800454c <HAL_DMA_IRQHandler+0xa54>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d013      	beq.n	800447c <HAL_DMA_IRQHandler+0x984>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a3d      	ldr	r2, [pc, #244]	@ (8004550 <HAL_DMA_IRQHandler+0xa58>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00e      	beq.n	800447c <HAL_DMA_IRQHandler+0x984>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a3c      	ldr	r2, [pc, #240]	@ (8004554 <HAL_DMA_IRQHandler+0xa5c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d009      	beq.n	800447c <HAL_DMA_IRQHandler+0x984>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a3a      	ldr	r2, [pc, #232]	@ (8004558 <HAL_DMA_IRQHandler+0xa60>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d004      	beq.n	800447c <HAL_DMA_IRQHandler+0x984>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a39      	ldr	r2, [pc, #228]	@ (800455c <HAL_DMA_IRQHandler+0xa64>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d101      	bne.n	8004480 <HAL_DMA_IRQHandler+0x988>
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <HAL_DMA_IRQHandler+0x98a>
 8004480:	2300      	movs	r3, #0
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 823f 	beq.w	8004906 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	2204      	movs	r2, #4
 800449a:	409a      	lsls	r2, r3
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	4013      	ands	r3, r2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80cd 	beq.w	8004640 <HAL_DMA_IRQHandler+0xb48>
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 80c7 	beq.w	8004640 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b6:	f003 031f 	and.w	r3, r3, #31
 80044ba:	2204      	movs	r2, #4
 80044bc:	409a      	lsls	r2, r3
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d049      	beq.n	8004560 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 8210 	beq.w	8004900 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044e8:	e20a      	b.n	8004900 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 8206 	beq.w	8004900 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044fc:	e200      	b.n	8004900 <HAL_DMA_IRQHandler+0xe08>
 80044fe:	bf00      	nop
 8004500:	40020010 	.word	0x40020010
 8004504:	40020028 	.word	0x40020028
 8004508:	40020040 	.word	0x40020040
 800450c:	40020058 	.word	0x40020058
 8004510:	40020070 	.word	0x40020070
 8004514:	40020088 	.word	0x40020088
 8004518:	400200a0 	.word	0x400200a0
 800451c:	400200b8 	.word	0x400200b8
 8004520:	40020410 	.word	0x40020410
 8004524:	40020428 	.word	0x40020428
 8004528:	40020440 	.word	0x40020440
 800452c:	40020458 	.word	0x40020458
 8004530:	40020470 	.word	0x40020470
 8004534:	40020488 	.word	0x40020488
 8004538:	400204a0 	.word	0x400204a0
 800453c:	400204b8 	.word	0x400204b8
 8004540:	58025408 	.word	0x58025408
 8004544:	5802541c 	.word	0x5802541c
 8004548:	58025430 	.word	0x58025430
 800454c:	58025444 	.word	0x58025444
 8004550:	58025458 	.word	0x58025458
 8004554:	5802546c 	.word	0x5802546c
 8004558:	58025480 	.word	0x58025480
 800455c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	2b00      	cmp	r3, #0
 8004568:	d160      	bne.n	800462c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a7f      	ldr	r2, [pc, #508]	@ (800476c <HAL_DMA_IRQHandler+0xc74>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d04a      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a7d      	ldr	r2, [pc, #500]	@ (8004770 <HAL_DMA_IRQHandler+0xc78>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d045      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a7c      	ldr	r2, [pc, #496]	@ (8004774 <HAL_DMA_IRQHandler+0xc7c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d040      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a7a      	ldr	r2, [pc, #488]	@ (8004778 <HAL_DMA_IRQHandler+0xc80>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d03b      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a79      	ldr	r2, [pc, #484]	@ (800477c <HAL_DMA_IRQHandler+0xc84>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d036      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a77      	ldr	r2, [pc, #476]	@ (8004780 <HAL_DMA_IRQHandler+0xc88>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d031      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a76      	ldr	r2, [pc, #472]	@ (8004784 <HAL_DMA_IRQHandler+0xc8c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d02c      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a74      	ldr	r2, [pc, #464]	@ (8004788 <HAL_DMA_IRQHandler+0xc90>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d027      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a73      	ldr	r2, [pc, #460]	@ (800478c <HAL_DMA_IRQHandler+0xc94>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d022      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a71      	ldr	r2, [pc, #452]	@ (8004790 <HAL_DMA_IRQHandler+0xc98>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d01d      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a70      	ldr	r2, [pc, #448]	@ (8004794 <HAL_DMA_IRQHandler+0xc9c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d018      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a6e      	ldr	r2, [pc, #440]	@ (8004798 <HAL_DMA_IRQHandler+0xca0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d013      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a6d      	ldr	r2, [pc, #436]	@ (800479c <HAL_DMA_IRQHandler+0xca4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d00e      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a6b      	ldr	r2, [pc, #428]	@ (80047a0 <HAL_DMA_IRQHandler+0xca8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d009      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a6a      	ldr	r2, [pc, #424]	@ (80047a4 <HAL_DMA_IRQHandler+0xcac>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d004      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a68      	ldr	r2, [pc, #416]	@ (80047a8 <HAL_DMA_IRQHandler+0xcb0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d108      	bne.n	800461c <HAL_DMA_IRQHandler+0xb24>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0208 	bic.w	r2, r2, #8
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	e007      	b.n	800462c <HAL_DMA_IRQHandler+0xb34>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0204 	bic.w	r2, r2, #4
 800462a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 8165 	beq.w	8004900 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800463e:	e15f      	b.n	8004900 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	2202      	movs	r2, #2
 800464a:	409a      	lsls	r2, r3
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	4013      	ands	r3, r2
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80c5 	beq.w	80047e0 <HAL_DMA_IRQHandler+0xce8>
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 80bf 	beq.w	80047e0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004666:	f003 031f 	and.w	r3, r3, #31
 800466a:	2202      	movs	r2, #2
 800466c:	409a      	lsls	r2, r3
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d018      	beq.n	80046ae <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d109      	bne.n	800469a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 813a 	beq.w	8004904 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004698:	e134      	b.n	8004904 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 8130 	beq.w	8004904 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046ac:	e12a      	b.n	8004904 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f040 8089 	bne.w	80047cc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a2b      	ldr	r2, [pc, #172]	@ (800476c <HAL_DMA_IRQHandler+0xc74>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d04a      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a29      	ldr	r2, [pc, #164]	@ (8004770 <HAL_DMA_IRQHandler+0xc78>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d045      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a28      	ldr	r2, [pc, #160]	@ (8004774 <HAL_DMA_IRQHandler+0xc7c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d040      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a26      	ldr	r2, [pc, #152]	@ (8004778 <HAL_DMA_IRQHandler+0xc80>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d03b      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a25      	ldr	r2, [pc, #148]	@ (800477c <HAL_DMA_IRQHandler+0xc84>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d036      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a23      	ldr	r2, [pc, #140]	@ (8004780 <HAL_DMA_IRQHandler+0xc88>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d031      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a22      	ldr	r2, [pc, #136]	@ (8004784 <HAL_DMA_IRQHandler+0xc8c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d02c      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a20      	ldr	r2, [pc, #128]	@ (8004788 <HAL_DMA_IRQHandler+0xc90>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d027      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1f      	ldr	r2, [pc, #124]	@ (800478c <HAL_DMA_IRQHandler+0xc94>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d022      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1d      	ldr	r2, [pc, #116]	@ (8004790 <HAL_DMA_IRQHandler+0xc98>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d01d      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a1c      	ldr	r2, [pc, #112]	@ (8004794 <HAL_DMA_IRQHandler+0xc9c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d018      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a1a      	ldr	r2, [pc, #104]	@ (8004798 <HAL_DMA_IRQHandler+0xca0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d013      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a19      	ldr	r2, [pc, #100]	@ (800479c <HAL_DMA_IRQHandler+0xca4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00e      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a17      	ldr	r2, [pc, #92]	@ (80047a0 <HAL_DMA_IRQHandler+0xca8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d009      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a16      	ldr	r2, [pc, #88]	@ (80047a4 <HAL_DMA_IRQHandler+0xcac>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d004      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a14      	ldr	r2, [pc, #80]	@ (80047a8 <HAL_DMA_IRQHandler+0xcb0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d128      	bne.n	80047ac <HAL_DMA_IRQHandler+0xcb4>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0214 	bic.w	r2, r2, #20
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	e027      	b.n	80047bc <HAL_DMA_IRQHandler+0xcc4>
 800476c:	40020010 	.word	0x40020010
 8004770:	40020028 	.word	0x40020028
 8004774:	40020040 	.word	0x40020040
 8004778:	40020058 	.word	0x40020058
 800477c:	40020070 	.word	0x40020070
 8004780:	40020088 	.word	0x40020088
 8004784:	400200a0 	.word	0x400200a0
 8004788:	400200b8 	.word	0x400200b8
 800478c:	40020410 	.word	0x40020410
 8004790:	40020428 	.word	0x40020428
 8004794:	40020440 	.word	0x40020440
 8004798:	40020458 	.word	0x40020458
 800479c:	40020470 	.word	0x40020470
 80047a0:	40020488 	.word	0x40020488
 80047a4:	400204a0 	.word	0x400204a0
 80047a8:	400204b8 	.word	0x400204b8
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 020a 	bic.w	r2, r2, #10
 80047ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8097 	beq.w	8004904 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047de:	e091      	b.n	8004904 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	2208      	movs	r2, #8
 80047ea:	409a      	lsls	r2, r3
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 8088 	beq.w	8004906 <HAL_DMA_IRQHandler+0xe0e>
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 8082 	beq.w	8004906 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a41      	ldr	r2, [pc, #260]	@ (800490c <HAL_DMA_IRQHandler+0xe14>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d04a      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a3f      	ldr	r2, [pc, #252]	@ (8004910 <HAL_DMA_IRQHandler+0xe18>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d045      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a3e      	ldr	r2, [pc, #248]	@ (8004914 <HAL_DMA_IRQHandler+0xe1c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d040      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a3c      	ldr	r2, [pc, #240]	@ (8004918 <HAL_DMA_IRQHandler+0xe20>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d03b      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a3b      	ldr	r2, [pc, #236]	@ (800491c <HAL_DMA_IRQHandler+0xe24>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d036      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a39      	ldr	r2, [pc, #228]	@ (8004920 <HAL_DMA_IRQHandler+0xe28>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d031      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a38      	ldr	r2, [pc, #224]	@ (8004924 <HAL_DMA_IRQHandler+0xe2c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d02c      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a36      	ldr	r2, [pc, #216]	@ (8004928 <HAL_DMA_IRQHandler+0xe30>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d027      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a35      	ldr	r2, [pc, #212]	@ (800492c <HAL_DMA_IRQHandler+0xe34>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d022      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a33      	ldr	r2, [pc, #204]	@ (8004930 <HAL_DMA_IRQHandler+0xe38>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d01d      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a32      	ldr	r2, [pc, #200]	@ (8004934 <HAL_DMA_IRQHandler+0xe3c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d018      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a30      	ldr	r2, [pc, #192]	@ (8004938 <HAL_DMA_IRQHandler+0xe40>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d013      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a2f      	ldr	r2, [pc, #188]	@ (800493c <HAL_DMA_IRQHandler+0xe44>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00e      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a2d      	ldr	r2, [pc, #180]	@ (8004940 <HAL_DMA_IRQHandler+0xe48>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d009      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a2c      	ldr	r2, [pc, #176]	@ (8004944 <HAL_DMA_IRQHandler+0xe4c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d004      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a2a      	ldr	r2, [pc, #168]	@ (8004948 <HAL_DMA_IRQHandler+0xe50>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d108      	bne.n	80048b4 <HAL_DMA_IRQHandler+0xdbc>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 021c 	bic.w	r2, r2, #28
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	e007      	b.n	80048c4 <HAL_DMA_IRQHandler+0xdcc>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 020e 	bic.w	r2, r2, #14
 80048c2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c8:	f003 031f 	and.w	r3, r3, #31
 80048cc:	2201      	movs	r2, #1
 80048ce:	409a      	lsls	r2, r3
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d009      	beq.n	8004906 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	4798      	blx	r3
 80048fa:	e004      	b.n	8004906 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80048fc:	bf00      	nop
 80048fe:	e002      	b.n	8004906 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004900:	bf00      	nop
 8004902:	e000      	b.n	8004906 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004904:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004906:	3728      	adds	r7, #40	@ 0x28
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40020010 	.word	0x40020010
 8004910:	40020028 	.word	0x40020028
 8004914:	40020040 	.word	0x40020040
 8004918:	40020058 	.word	0x40020058
 800491c:	40020070 	.word	0x40020070
 8004920:	40020088 	.word	0x40020088
 8004924:	400200a0 	.word	0x400200a0
 8004928:	400200b8 	.word	0x400200b8
 800492c:	40020410 	.word	0x40020410
 8004930:	40020428 	.word	0x40020428
 8004934:	40020440 	.word	0x40020440
 8004938:	40020458 	.word	0x40020458
 800493c:	40020470 	.word	0x40020470
 8004940:	40020488 	.word	0x40020488
 8004944:	400204a0 	.word	0x400204a0
 8004948:	400204b8 	.word	0x400204b8

0800494c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004964:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a7f      	ldr	r2, [pc, #508]	@ (8004b68 <DMA_SetConfig+0x21c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d072      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a7d      	ldr	r2, [pc, #500]	@ (8004b6c <DMA_SetConfig+0x220>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d06d      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a7c      	ldr	r2, [pc, #496]	@ (8004b70 <DMA_SetConfig+0x224>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d068      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a7a      	ldr	r2, [pc, #488]	@ (8004b74 <DMA_SetConfig+0x228>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d063      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a79      	ldr	r2, [pc, #484]	@ (8004b78 <DMA_SetConfig+0x22c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d05e      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a77      	ldr	r2, [pc, #476]	@ (8004b7c <DMA_SetConfig+0x230>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d059      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a76      	ldr	r2, [pc, #472]	@ (8004b80 <DMA_SetConfig+0x234>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d054      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a74      	ldr	r2, [pc, #464]	@ (8004b84 <DMA_SetConfig+0x238>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d04f      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a73      	ldr	r2, [pc, #460]	@ (8004b88 <DMA_SetConfig+0x23c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d04a      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a71      	ldr	r2, [pc, #452]	@ (8004b8c <DMA_SetConfig+0x240>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d045      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a70      	ldr	r2, [pc, #448]	@ (8004b90 <DMA_SetConfig+0x244>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d040      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a6e      	ldr	r2, [pc, #440]	@ (8004b94 <DMA_SetConfig+0x248>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d03b      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a6d      	ldr	r2, [pc, #436]	@ (8004b98 <DMA_SetConfig+0x24c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d036      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a6b      	ldr	r2, [pc, #428]	@ (8004b9c <DMA_SetConfig+0x250>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d031      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a6a      	ldr	r2, [pc, #424]	@ (8004ba0 <DMA_SetConfig+0x254>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d02c      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a68      	ldr	r2, [pc, #416]	@ (8004ba4 <DMA_SetConfig+0x258>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d027      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a67      	ldr	r2, [pc, #412]	@ (8004ba8 <DMA_SetConfig+0x25c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d022      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a65      	ldr	r2, [pc, #404]	@ (8004bac <DMA_SetConfig+0x260>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d01d      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a64      	ldr	r2, [pc, #400]	@ (8004bb0 <DMA_SetConfig+0x264>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d018      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a62      	ldr	r2, [pc, #392]	@ (8004bb4 <DMA_SetConfig+0x268>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d013      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a61      	ldr	r2, [pc, #388]	@ (8004bb8 <DMA_SetConfig+0x26c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00e      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a5f      	ldr	r2, [pc, #380]	@ (8004bbc <DMA_SetConfig+0x270>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d009      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a5e      	ldr	r2, [pc, #376]	@ (8004bc0 <DMA_SetConfig+0x274>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d004      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a5c      	ldr	r2, [pc, #368]	@ (8004bc4 <DMA_SetConfig+0x278>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d101      	bne.n	8004a5a <DMA_SetConfig+0x10e>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <DMA_SetConfig+0x110>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00d      	beq.n	8004a7c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004a68:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d004      	beq.n	8004a7c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a7a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a39      	ldr	r2, [pc, #228]	@ (8004b68 <DMA_SetConfig+0x21c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d04a      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a38      	ldr	r2, [pc, #224]	@ (8004b6c <DMA_SetConfig+0x220>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d045      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a36      	ldr	r2, [pc, #216]	@ (8004b70 <DMA_SetConfig+0x224>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d040      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a35      	ldr	r2, [pc, #212]	@ (8004b74 <DMA_SetConfig+0x228>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d03b      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a33      	ldr	r2, [pc, #204]	@ (8004b78 <DMA_SetConfig+0x22c>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d036      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a32      	ldr	r2, [pc, #200]	@ (8004b7c <DMA_SetConfig+0x230>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d031      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a30      	ldr	r2, [pc, #192]	@ (8004b80 <DMA_SetConfig+0x234>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d02c      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8004b84 <DMA_SetConfig+0x238>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d027      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8004b88 <DMA_SetConfig+0x23c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d022      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a2c      	ldr	r2, [pc, #176]	@ (8004b8c <DMA_SetConfig+0x240>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d01d      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a2a      	ldr	r2, [pc, #168]	@ (8004b90 <DMA_SetConfig+0x244>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d018      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a29      	ldr	r2, [pc, #164]	@ (8004b94 <DMA_SetConfig+0x248>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d013      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a27      	ldr	r2, [pc, #156]	@ (8004b98 <DMA_SetConfig+0x24c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d00e      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a26      	ldr	r2, [pc, #152]	@ (8004b9c <DMA_SetConfig+0x250>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d009      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a24      	ldr	r2, [pc, #144]	@ (8004ba0 <DMA_SetConfig+0x254>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d004      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a23      	ldr	r2, [pc, #140]	@ (8004ba4 <DMA_SetConfig+0x258>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d101      	bne.n	8004b20 <DMA_SetConfig+0x1d4>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <DMA_SetConfig+0x1d6>
 8004b20:	2300      	movs	r3, #0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d059      	beq.n	8004bda <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	223f      	movs	r2, #63	@ 0x3f
 8004b30:	409a      	lsls	r2, r3
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004b44:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b40      	cmp	r3, #64	@ 0x40
 8004b54:	d138      	bne.n	8004bc8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b66:	e086      	b.n	8004c76 <DMA_SetConfig+0x32a>
 8004b68:	40020010 	.word	0x40020010
 8004b6c:	40020028 	.word	0x40020028
 8004b70:	40020040 	.word	0x40020040
 8004b74:	40020058 	.word	0x40020058
 8004b78:	40020070 	.word	0x40020070
 8004b7c:	40020088 	.word	0x40020088
 8004b80:	400200a0 	.word	0x400200a0
 8004b84:	400200b8 	.word	0x400200b8
 8004b88:	40020410 	.word	0x40020410
 8004b8c:	40020428 	.word	0x40020428
 8004b90:	40020440 	.word	0x40020440
 8004b94:	40020458 	.word	0x40020458
 8004b98:	40020470 	.word	0x40020470
 8004b9c:	40020488 	.word	0x40020488
 8004ba0:	400204a0 	.word	0x400204a0
 8004ba4:	400204b8 	.word	0x400204b8
 8004ba8:	58025408 	.word	0x58025408
 8004bac:	5802541c 	.word	0x5802541c
 8004bb0:	58025430 	.word	0x58025430
 8004bb4:	58025444 	.word	0x58025444
 8004bb8:	58025458 	.word	0x58025458
 8004bbc:	5802546c 	.word	0x5802546c
 8004bc0:	58025480 	.word	0x58025480
 8004bc4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	60da      	str	r2, [r3, #12]
}
 8004bd8:	e04d      	b.n	8004c76 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a29      	ldr	r2, [pc, #164]	@ (8004c84 <DMA_SetConfig+0x338>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d022      	beq.n	8004c2a <DMA_SetConfig+0x2de>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a27      	ldr	r2, [pc, #156]	@ (8004c88 <DMA_SetConfig+0x33c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d01d      	beq.n	8004c2a <DMA_SetConfig+0x2de>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a26      	ldr	r2, [pc, #152]	@ (8004c8c <DMA_SetConfig+0x340>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d018      	beq.n	8004c2a <DMA_SetConfig+0x2de>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a24      	ldr	r2, [pc, #144]	@ (8004c90 <DMA_SetConfig+0x344>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d013      	beq.n	8004c2a <DMA_SetConfig+0x2de>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a23      	ldr	r2, [pc, #140]	@ (8004c94 <DMA_SetConfig+0x348>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00e      	beq.n	8004c2a <DMA_SetConfig+0x2de>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a21      	ldr	r2, [pc, #132]	@ (8004c98 <DMA_SetConfig+0x34c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d009      	beq.n	8004c2a <DMA_SetConfig+0x2de>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a20      	ldr	r2, [pc, #128]	@ (8004c9c <DMA_SetConfig+0x350>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d004      	beq.n	8004c2a <DMA_SetConfig+0x2de>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a1e      	ldr	r2, [pc, #120]	@ (8004ca0 <DMA_SetConfig+0x354>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d101      	bne.n	8004c2e <DMA_SetConfig+0x2e2>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <DMA_SetConfig+0x2e4>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d020      	beq.n	8004c76 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c38:	f003 031f 	and.w	r3, r3, #31
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b40      	cmp	r3, #64	@ 0x40
 8004c52:	d108      	bne.n	8004c66 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	60da      	str	r2, [r3, #12]
}
 8004c64:	e007      	b.n	8004c76 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	60da      	str	r2, [r3, #12]
}
 8004c76:	bf00      	nop
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	58025408 	.word	0x58025408
 8004c88:	5802541c 	.word	0x5802541c
 8004c8c:	58025430 	.word	0x58025430
 8004c90:	58025444 	.word	0x58025444
 8004c94:	58025458 	.word	0x58025458
 8004c98:	5802546c 	.word	0x5802546c
 8004c9c:	58025480 	.word	0x58025480
 8004ca0:	58025494 	.word	0x58025494

08004ca4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a42      	ldr	r2, [pc, #264]	@ (8004dbc <DMA_CalcBaseAndBitshift+0x118>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d04a      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a41      	ldr	r2, [pc, #260]	@ (8004dc0 <DMA_CalcBaseAndBitshift+0x11c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d045      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a3f      	ldr	r2, [pc, #252]	@ (8004dc4 <DMA_CalcBaseAndBitshift+0x120>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d040      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a3e      	ldr	r2, [pc, #248]	@ (8004dc8 <DMA_CalcBaseAndBitshift+0x124>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d03b      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a3c      	ldr	r2, [pc, #240]	@ (8004dcc <DMA_CalcBaseAndBitshift+0x128>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d036      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a3b      	ldr	r2, [pc, #236]	@ (8004dd0 <DMA_CalcBaseAndBitshift+0x12c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d031      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a39      	ldr	r2, [pc, #228]	@ (8004dd4 <DMA_CalcBaseAndBitshift+0x130>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d02c      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a38      	ldr	r2, [pc, #224]	@ (8004dd8 <DMA_CalcBaseAndBitshift+0x134>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d027      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a36      	ldr	r2, [pc, #216]	@ (8004ddc <DMA_CalcBaseAndBitshift+0x138>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d022      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a35      	ldr	r2, [pc, #212]	@ (8004de0 <DMA_CalcBaseAndBitshift+0x13c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d01d      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a33      	ldr	r2, [pc, #204]	@ (8004de4 <DMA_CalcBaseAndBitshift+0x140>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d018      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a32      	ldr	r2, [pc, #200]	@ (8004de8 <DMA_CalcBaseAndBitshift+0x144>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d013      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a30      	ldr	r2, [pc, #192]	@ (8004dec <DMA_CalcBaseAndBitshift+0x148>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00e      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a2f      	ldr	r2, [pc, #188]	@ (8004df0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d009      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a2d      	ldr	r2, [pc, #180]	@ (8004df4 <DMA_CalcBaseAndBitshift+0x150>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d004      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a2c      	ldr	r2, [pc, #176]	@ (8004df8 <DMA_CalcBaseAndBitshift+0x154>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d101      	bne.n	8004d50 <DMA_CalcBaseAndBitshift+0xac>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e000      	b.n	8004d52 <DMA_CalcBaseAndBitshift+0xae>
 8004d50:	2300      	movs	r3, #0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d024      	beq.n	8004da0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	3b10      	subs	r3, #16
 8004d5e:	4a27      	ldr	r2, [pc, #156]	@ (8004dfc <DMA_CalcBaseAndBitshift+0x158>)
 8004d60:	fba2 2303 	umull	r2, r3, r2, r3
 8004d64:	091b      	lsrs	r3, r3, #4
 8004d66:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	4a24      	ldr	r2, [pc, #144]	@ (8004e00 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d70:	5cd3      	ldrb	r3, [r2, r3]
 8004d72:	461a      	mov	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d908      	bls.n	8004d90 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	4b1f      	ldr	r3, [pc, #124]	@ (8004e04 <DMA_CalcBaseAndBitshift+0x160>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	1d1a      	adds	r2, r3, #4
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d8e:	e00d      	b.n	8004dac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	461a      	mov	r2, r3
 8004d96:	4b1b      	ldr	r3, [pc, #108]	@ (8004e04 <DMA_CalcBaseAndBitshift+0x160>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d9e:	e005      	b.n	8004dac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	40020010 	.word	0x40020010
 8004dc0:	40020028 	.word	0x40020028
 8004dc4:	40020040 	.word	0x40020040
 8004dc8:	40020058 	.word	0x40020058
 8004dcc:	40020070 	.word	0x40020070
 8004dd0:	40020088 	.word	0x40020088
 8004dd4:	400200a0 	.word	0x400200a0
 8004dd8:	400200b8 	.word	0x400200b8
 8004ddc:	40020410 	.word	0x40020410
 8004de0:	40020428 	.word	0x40020428
 8004de4:	40020440 	.word	0x40020440
 8004de8:	40020458 	.word	0x40020458
 8004dec:	40020470 	.word	0x40020470
 8004df0:	40020488 	.word	0x40020488
 8004df4:	400204a0 	.word	0x400204a0
 8004df8:	400204b8 	.word	0x400204b8
 8004dfc:	aaaaaaab 	.word	0xaaaaaaab
 8004e00:	0800f444 	.word	0x0800f444
 8004e04:	fffffc00 	.word	0xfffffc00

08004e08 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e10:	2300      	movs	r3, #0
 8004e12:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d120      	bne.n	8004e5e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d858      	bhi.n	8004ed6 <DMA_CheckFifoParam+0xce>
 8004e24:	a201      	add	r2, pc, #4	@ (adr r2, 8004e2c <DMA_CheckFifoParam+0x24>)
 8004e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2a:	bf00      	nop
 8004e2c:	08004e3d 	.word	0x08004e3d
 8004e30:	08004e4f 	.word	0x08004e4f
 8004e34:	08004e3d 	.word	0x08004e3d
 8004e38:	08004ed7 	.word	0x08004ed7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d048      	beq.n	8004eda <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e4c:	e045      	b.n	8004eda <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e56:	d142      	bne.n	8004ede <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e5c:	e03f      	b.n	8004ede <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e66:	d123      	bne.n	8004eb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6c:	2b03      	cmp	r3, #3
 8004e6e:	d838      	bhi.n	8004ee2 <DMA_CheckFifoParam+0xda>
 8004e70:	a201      	add	r2, pc, #4	@ (adr r2, 8004e78 <DMA_CheckFifoParam+0x70>)
 8004e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e76:	bf00      	nop
 8004e78:	08004e89 	.word	0x08004e89
 8004e7c:	08004e8f 	.word	0x08004e8f
 8004e80:	08004e89 	.word	0x08004e89
 8004e84:	08004ea1 	.word	0x08004ea1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	73fb      	strb	r3, [r7, #15]
        break;
 8004e8c:	e030      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d025      	beq.n	8004ee6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e9e:	e022      	b.n	8004ee6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ea8:	d11f      	bne.n	8004eea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004eae:	e01c      	b.n	8004eea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d902      	bls.n	8004ebe <DMA_CheckFifoParam+0xb6>
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d003      	beq.n	8004ec4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ebc:	e018      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ec2:	e015      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00e      	beq.n	8004eee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	73fb      	strb	r3, [r7, #15]
    break;
 8004ed4:	e00b      	b.n	8004eee <DMA_CheckFifoParam+0xe6>
        break;
 8004ed6:	bf00      	nop
 8004ed8:	e00a      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
        break;
 8004eda:	bf00      	nop
 8004edc:	e008      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
        break;
 8004ede:	bf00      	nop
 8004ee0:	e006      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
        break;
 8004ee2:	bf00      	nop
 8004ee4:	e004      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
        break;
 8004ee6:	bf00      	nop
 8004ee8:	e002      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
        break;
 8004eea:	bf00      	nop
 8004eec:	e000      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
    break;
 8004eee:	bf00      	nop
    }
  }

  return status;
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop

08004f00 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a38      	ldr	r2, [pc, #224]	@ (8004ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d022      	beq.n	8004f5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a36      	ldr	r2, [pc, #216]	@ (8004ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d01d      	beq.n	8004f5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a35      	ldr	r2, [pc, #212]	@ (8004ffc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d018      	beq.n	8004f5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a33      	ldr	r2, [pc, #204]	@ (8005000 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a32      	ldr	r2, [pc, #200]	@ (8005004 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a30      	ldr	r2, [pc, #192]	@ (8005008 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d009      	beq.n	8004f5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a2f      	ldr	r2, [pc, #188]	@ (800500c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a2d      	ldr	r2, [pc, #180]	@ (8005010 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d101      	bne.n	8004f62 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f62:	2300      	movs	r3, #0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01a      	beq.n	8004f9e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	3b08      	subs	r3, #8
 8004f70:	4a28      	ldr	r2, [pc, #160]	@ (8005014 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	091b      	lsrs	r3, r3, #4
 8004f78:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4b26      	ldr	r3, [pc, #152]	@ (8005018 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	461a      	mov	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a24      	ldr	r2, [pc, #144]	@ (800501c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f8c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f003 031f 	and.w	r3, r3, #31
 8004f94:	2201      	movs	r2, #1
 8004f96:	409a      	lsls	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f9c:	e024      	b.n	8004fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	3b10      	subs	r3, #16
 8004fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8005020 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fac:	091b      	lsrs	r3, r3, #4
 8004fae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8005024 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d806      	bhi.n	8004fc6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4a1b      	ldr	r2, [pc, #108]	@ (8005028 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d902      	bls.n	8004fc6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4b18      	ldr	r3, [pc, #96]	@ (800502c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004fca:	4413      	add	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	461a      	mov	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a16      	ldr	r2, [pc, #88]	@ (8005030 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004fd8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	409a      	lsls	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004fe8:	bf00      	nop
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	58025408 	.word	0x58025408
 8004ff8:	5802541c 	.word	0x5802541c
 8004ffc:	58025430 	.word	0x58025430
 8005000:	58025444 	.word	0x58025444
 8005004:	58025458 	.word	0x58025458
 8005008:	5802546c 	.word	0x5802546c
 800500c:	58025480 	.word	0x58025480
 8005010:	58025494 	.word	0x58025494
 8005014:	cccccccd 	.word	0xcccccccd
 8005018:	16009600 	.word	0x16009600
 800501c:	58025880 	.word	0x58025880
 8005020:	aaaaaaab 	.word	0xaaaaaaab
 8005024:	400204b8 	.word	0x400204b8
 8005028:	4002040f 	.word	0x4002040f
 800502c:	10008200 	.word	0x10008200
 8005030:	40020880 	.word	0x40020880

08005034 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	b2db      	uxtb	r3, r3
 8005042:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d04a      	beq.n	80050e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2b08      	cmp	r3, #8
 800504e:	d847      	bhi.n	80050e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a25      	ldr	r2, [pc, #148]	@ (80050ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d022      	beq.n	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a24      	ldr	r2, [pc, #144]	@ (80050f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d01d      	beq.n	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a22      	ldr	r2, [pc, #136]	@ (80050f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d018      	beq.n	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a21      	ldr	r2, [pc, #132]	@ (80050f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d013      	beq.n	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a1f      	ldr	r2, [pc, #124]	@ (80050fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00e      	beq.n	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a1e      	ldr	r2, [pc, #120]	@ (8005100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d009      	beq.n	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a1c      	ldr	r2, [pc, #112]	@ (8005104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d004      	beq.n	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a1b      	ldr	r2, [pc, #108]	@ (8005108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d101      	bne.n	80050a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80050a0:	2301      	movs	r3, #1
 80050a2:	e000      	b.n	80050a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80050a4:	2300      	movs	r3, #0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4b17      	ldr	r3, [pc, #92]	@ (800510c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80050ae:	4413      	add	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	461a      	mov	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a15      	ldr	r2, [pc, #84]	@ (8005110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80050bc:	671a      	str	r2, [r3, #112]	@ 0x70
 80050be:	e009      	b.n	80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4b14      	ldr	r3, [pc, #80]	@ (8005114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	461a      	mov	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a11      	ldr	r2, [pc, #68]	@ (8005118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80050d2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	2201      	movs	r2, #1
 80050da:	409a      	lsls	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80050e0:	bf00      	nop
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	58025408 	.word	0x58025408
 80050f0:	5802541c 	.word	0x5802541c
 80050f4:	58025430 	.word	0x58025430
 80050f8:	58025444 	.word	0x58025444
 80050fc:	58025458 	.word	0x58025458
 8005100:	5802546c 	.word	0x5802546c
 8005104:	58025480 	.word	0x58025480
 8005108:	58025494 	.word	0x58025494
 800510c:	1600963f 	.word	0x1600963f
 8005110:	58025940 	.word	0x58025940
 8005114:	1000823f 	.word	0x1000823f
 8005118:	40020940 	.word	0x40020940

0800511c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800511c:	b480      	push	{r7}
 800511e:	b089      	sub	sp, #36	@ 0x24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800512a:	4b89      	ldr	r3, [pc, #548]	@ (8005350 <HAL_GPIO_Init+0x234>)
 800512c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800512e:	e194      	b.n	800545a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	2101      	movs	r1, #1
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	fa01 f303 	lsl.w	r3, r1, r3
 800513c:	4013      	ands	r3, r2
 800513e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 8186 	beq.w	8005454 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f003 0303 	and.w	r3, r3, #3
 8005150:	2b01      	cmp	r3, #1
 8005152:	d005      	beq.n	8005160 <HAL_GPIO_Init+0x44>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f003 0303 	and.w	r3, r3, #3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d130      	bne.n	80051c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	2203      	movs	r2, #3
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	43db      	mvns	r3, r3
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	4013      	ands	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	fa02 f303 	lsl.w	r3, r2, r3
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	4313      	orrs	r3, r2
 8005188:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005196:	2201      	movs	r2, #1
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	43db      	mvns	r3, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4013      	ands	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	091b      	lsrs	r3, r3, #4
 80051ac:	f003 0201 	and.w	r2, r3, #1
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	d017      	beq.n	80051fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	2203      	movs	r2, #3
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	43db      	mvns	r3, r3
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	4013      	ands	r3, r2
 80051e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d123      	bne.n	8005252 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	08da      	lsrs	r2, r3, #3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	3208      	adds	r2, #8
 8005212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	220f      	movs	r2, #15
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	43db      	mvns	r3, r3
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	4013      	ands	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	691a      	ldr	r2, [r3, #16]
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	fa02 f303 	lsl.w	r3, r2, r3
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	4313      	orrs	r3, r2
 8005242:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	08da      	lsrs	r2, r3, #3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3208      	adds	r2, #8
 800524c:	69b9      	ldr	r1, [r7, #24]
 800524e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	2203      	movs	r2, #3
 800525e:	fa02 f303 	lsl.w	r3, r2, r3
 8005262:	43db      	mvns	r3, r3
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	4013      	ands	r3, r2
 8005268:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f003 0203 	and.w	r2, r3, #3
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	fa02 f303 	lsl.w	r3, r2, r3
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	4313      	orrs	r3, r2
 800527e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 80e0 	beq.w	8005454 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005294:	4b2f      	ldr	r3, [pc, #188]	@ (8005354 <HAL_GPIO_Init+0x238>)
 8005296:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800529a:	4a2e      	ldr	r2, [pc, #184]	@ (8005354 <HAL_GPIO_Init+0x238>)
 800529c:	f043 0302 	orr.w	r3, r3, #2
 80052a0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80052a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005354 <HAL_GPIO_Init+0x238>)
 80052a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052b2:	4a29      	ldr	r2, [pc, #164]	@ (8005358 <HAL_GPIO_Init+0x23c>)
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	089b      	lsrs	r3, r3, #2
 80052b8:	3302      	adds	r3, #2
 80052ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	220f      	movs	r2, #15
 80052ca:	fa02 f303 	lsl.w	r3, r2, r3
 80052ce:	43db      	mvns	r3, r3
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	4013      	ands	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a20      	ldr	r2, [pc, #128]	@ (800535c <HAL_GPIO_Init+0x240>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d052      	beq.n	8005384 <HAL_GPIO_Init+0x268>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005360 <HAL_GPIO_Init+0x244>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d031      	beq.n	800534a <HAL_GPIO_Init+0x22e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a1e      	ldr	r2, [pc, #120]	@ (8005364 <HAL_GPIO_Init+0x248>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d02b      	beq.n	8005346 <HAL_GPIO_Init+0x22a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005368 <HAL_GPIO_Init+0x24c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d025      	beq.n	8005342 <HAL_GPIO_Init+0x226>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a1c      	ldr	r2, [pc, #112]	@ (800536c <HAL_GPIO_Init+0x250>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d01f      	beq.n	800533e <HAL_GPIO_Init+0x222>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a1b      	ldr	r2, [pc, #108]	@ (8005370 <HAL_GPIO_Init+0x254>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d019      	beq.n	800533a <HAL_GPIO_Init+0x21e>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a1a      	ldr	r2, [pc, #104]	@ (8005374 <HAL_GPIO_Init+0x258>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d013      	beq.n	8005336 <HAL_GPIO_Init+0x21a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a19      	ldr	r2, [pc, #100]	@ (8005378 <HAL_GPIO_Init+0x25c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00d      	beq.n	8005332 <HAL_GPIO_Init+0x216>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a18      	ldr	r2, [pc, #96]	@ (800537c <HAL_GPIO_Init+0x260>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d007      	beq.n	800532e <HAL_GPIO_Init+0x212>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a17      	ldr	r2, [pc, #92]	@ (8005380 <HAL_GPIO_Init+0x264>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d101      	bne.n	800532a <HAL_GPIO_Init+0x20e>
 8005326:	2309      	movs	r3, #9
 8005328:	e02d      	b.n	8005386 <HAL_GPIO_Init+0x26a>
 800532a:	230a      	movs	r3, #10
 800532c:	e02b      	b.n	8005386 <HAL_GPIO_Init+0x26a>
 800532e:	2308      	movs	r3, #8
 8005330:	e029      	b.n	8005386 <HAL_GPIO_Init+0x26a>
 8005332:	2307      	movs	r3, #7
 8005334:	e027      	b.n	8005386 <HAL_GPIO_Init+0x26a>
 8005336:	2306      	movs	r3, #6
 8005338:	e025      	b.n	8005386 <HAL_GPIO_Init+0x26a>
 800533a:	2305      	movs	r3, #5
 800533c:	e023      	b.n	8005386 <HAL_GPIO_Init+0x26a>
 800533e:	2304      	movs	r3, #4
 8005340:	e021      	b.n	8005386 <HAL_GPIO_Init+0x26a>
 8005342:	2303      	movs	r3, #3
 8005344:	e01f      	b.n	8005386 <HAL_GPIO_Init+0x26a>
 8005346:	2302      	movs	r3, #2
 8005348:	e01d      	b.n	8005386 <HAL_GPIO_Init+0x26a>
 800534a:	2301      	movs	r3, #1
 800534c:	e01b      	b.n	8005386 <HAL_GPIO_Init+0x26a>
 800534e:	bf00      	nop
 8005350:	58000080 	.word	0x58000080
 8005354:	58024400 	.word	0x58024400
 8005358:	58000400 	.word	0x58000400
 800535c:	58020000 	.word	0x58020000
 8005360:	58020400 	.word	0x58020400
 8005364:	58020800 	.word	0x58020800
 8005368:	58020c00 	.word	0x58020c00
 800536c:	58021000 	.word	0x58021000
 8005370:	58021400 	.word	0x58021400
 8005374:	58021800 	.word	0x58021800
 8005378:	58021c00 	.word	0x58021c00
 800537c:	58022000 	.word	0x58022000
 8005380:	58022400 	.word	0x58022400
 8005384:	2300      	movs	r3, #0
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	f002 0203 	and.w	r2, r2, #3
 800538c:	0092      	lsls	r2, r2, #2
 800538e:	4093      	lsls	r3, r2
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	4313      	orrs	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005396:	4938      	ldr	r1, [pc, #224]	@ (8005478 <HAL_GPIO_Init+0x35c>)
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	089b      	lsrs	r3, r3, #2
 800539c:	3302      	adds	r3, #2
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80053a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	43db      	mvns	r3, r3
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	4013      	ands	r3, r2
 80053b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80053ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80053d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	43db      	mvns	r3, r3
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	4013      	ands	r3, r2
 80053e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80053f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	43db      	mvns	r3, r3
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	4013      	ands	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4313      	orrs	r3, r2
 8005422:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	43db      	mvns	r3, r3
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	4013      	ands	r3, r2
 8005438:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	3301      	adds	r3, #1
 8005458:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	fa22 f303 	lsr.w	r3, r2, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	f47f ae63 	bne.w	8005130 <HAL_GPIO_Init+0x14>
  }
}
 800546a:	bf00      	nop
 800546c:	bf00      	nop
 800546e:	3724      	adds	r7, #36	@ 0x24
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	58000400 	.word	0x58000400

0800547c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	807b      	strh	r3, [r7, #2]
 8005488:	4613      	mov	r3, r2
 800548a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800548c:	787b      	ldrb	r3, [r7, #1]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005492:	887a      	ldrh	r2, [r7, #2]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005498:	e003      	b.n	80054a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800549a:	887b      	ldrh	r3, [r7, #2]
 800549c:	041a      	lsls	r2, r3, #16
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	619a      	str	r2, [r3, #24]
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b085      	sub	sp, #20
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	460b      	mov	r3, r1
 80054b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054c0:	887a      	ldrh	r2, [r7, #2]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	4013      	ands	r3, r2
 80054c6:	041a      	lsls	r2, r3, #16
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	43d9      	mvns	r1, r3
 80054cc:	887b      	ldrh	r3, [r7, #2]
 80054ce:	400b      	ands	r3, r1
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	619a      	str	r2, [r3, #24]
}
 80054d6:	bf00      	nop
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
	...

080054e4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80054ec:	4a08      	ldr	r2, [pc, #32]	@ (8005510 <HAL_HSEM_FastTake+0x2c>)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3320      	adds	r3, #32
 80054f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f6:	4a07      	ldr	r2, [pc, #28]	@ (8005514 <HAL_HSEM_FastTake+0x30>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d101      	bne.n	8005500 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80054fc:	2300      	movs	r3, #0
 80054fe:	e000      	b.n	8005502 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
}
 8005502:	4618      	mov	r0, r3
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	58026400 	.word	0x58026400
 8005514:	80000300 	.word	0x80000300

08005518 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005522:	4906      	ldr	r1, [pc, #24]	@ (800553c <HAL_HSEM_Release+0x24>)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	58026400 	.word	0x58026400

08005540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e08b      	b.n	800566a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fb fa90 	bl	8000a8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2224      	movs	r2, #36	@ 0x24
 8005570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0201 	bic.w	r2, r2, #1
 8005582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005590:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d107      	bne.n	80055ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055b6:	609a      	str	r2, [r3, #8]
 80055b8:	e006      	b.n	80055c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80055c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d108      	bne.n	80055e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055de:	605a      	str	r2, [r3, #4]
 80055e0:	e007      	b.n	80055f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6859      	ldr	r1, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005674 <HAL_I2C_Init+0x134>)
 80055fe:	430b      	orrs	r3, r1
 8005600:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005610:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	69d9      	ldr	r1, [r3, #28]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a1a      	ldr	r2, [r3, #32]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2220      	movs	r2, #32
 8005656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	02008000 	.word	0x02008000

08005678 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b088      	sub	sp, #32
 800567c:	af02      	add	r7, sp, #8
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	607a      	str	r2, [r7, #4]
 8005682:	461a      	mov	r2, r3
 8005684:	460b      	mov	r3, r1
 8005686:	817b      	strh	r3, [r7, #10]
 8005688:	4613      	mov	r3, r2
 800568a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b20      	cmp	r3, #32
 8005696:	f040 80fd 	bne.w	8005894 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <HAL_I2C_Master_Transmit+0x30>
 80056a4:	2302      	movs	r3, #2
 80056a6:	e0f6      	b.n	8005896 <HAL_I2C_Master_Transmit+0x21e>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056b0:	f7fc fddc 	bl	800226c <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	2319      	movs	r3, #25
 80056bc:	2201      	movs	r2, #1
 80056be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 fa0a 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e0e1      	b.n	8005896 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2221      	movs	r2, #33	@ 0x21
 80056d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2210      	movs	r2, #16
 80056de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	893a      	ldrh	r2, [r7, #8]
 80056f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2bff      	cmp	r3, #255	@ 0xff
 8005702:	d906      	bls.n	8005712 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	22ff      	movs	r2, #255	@ 0xff
 8005708:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800570a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	e007      	b.n	8005722 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005716:	b29a      	uxth	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800571c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005720:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005726:	2b00      	cmp	r3, #0
 8005728:	d024      	beq.n	8005774 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572e:	781a      	ldrb	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b01      	subs	r3, #1
 8005748:	b29a      	uxth	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800575e:	b2db      	uxtb	r3, r3
 8005760:	3301      	adds	r3, #1
 8005762:	b2da      	uxtb	r2, r3
 8005764:	8979      	ldrh	r1, [r7, #10]
 8005766:	4b4e      	ldr	r3, [pc, #312]	@ (80058a0 <HAL_I2C_Master_Transmit+0x228>)
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 fc05 	bl	8005f7c <I2C_TransferConfig>
 8005772:	e066      	b.n	8005842 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005778:	b2da      	uxtb	r2, r3
 800577a:	8979      	ldrh	r1, [r7, #10]
 800577c:	4b48      	ldr	r3, [pc, #288]	@ (80058a0 <HAL_I2C_Master_Transmit+0x228>)
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 fbfa 	bl	8005f7c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005788:	e05b      	b.n	8005842 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	6a39      	ldr	r1, [r7, #32]
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 f9fd 	bl	8005b8e <I2C_WaitOnTXISFlagUntilTimeout>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e07b      	b.n	8005896 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a2:	781a      	ldrb	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057c6:	3b01      	subs	r3, #1
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d034      	beq.n	8005842 <HAL_I2C_Master_Transmit+0x1ca>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d130      	bne.n	8005842 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	2200      	movs	r2, #0
 80057e8:	2180      	movs	r1, #128	@ 0x80
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 f976 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e04d      	b.n	8005896 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057fe:	b29b      	uxth	r3, r3
 8005800:	2bff      	cmp	r3, #255	@ 0xff
 8005802:	d90e      	bls.n	8005822 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	22ff      	movs	r2, #255	@ 0xff
 8005808:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800580e:	b2da      	uxtb	r2, r3
 8005810:	8979      	ldrh	r1, [r7, #10]
 8005812:	2300      	movs	r3, #0
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 fbae 	bl	8005f7c <I2C_TransferConfig>
 8005820:	e00f      	b.n	8005842 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005826:	b29a      	uxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005830:	b2da      	uxtb	r2, r3
 8005832:	8979      	ldrh	r1, [r7, #10]
 8005834:	2300      	movs	r3, #0
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 fb9d 	bl	8005f7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005846:	b29b      	uxth	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d19e      	bne.n	800578a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	6a39      	ldr	r1, [r7, #32]
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 f9e3 	bl	8005c1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e01a      	b.n	8005896 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2220      	movs	r2, #32
 8005866:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6859      	ldr	r1, [r3, #4]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	4b0c      	ldr	r3, [pc, #48]	@ (80058a4 <HAL_I2C_Master_Transmit+0x22c>)
 8005874:	400b      	ands	r3, r1
 8005876:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2220      	movs	r2, #32
 800587c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005890:	2300      	movs	r3, #0
 8005892:	e000      	b.n	8005896 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005894:	2302      	movs	r3, #2
  }
}
 8005896:	4618      	mov	r0, r3
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	80002000 	.word	0x80002000
 80058a4:	fe00e800 	.word	0xfe00e800

080058a8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	607a      	str	r2, [r7, #4]
 80058b2:	461a      	mov	r2, r3
 80058b4:	460b      	mov	r3, r1
 80058b6:	817b      	strh	r3, [r7, #10]
 80058b8:	4613      	mov	r3, r2
 80058ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b20      	cmp	r3, #32
 80058c6:	f040 80db 	bne.w	8005a80 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d101      	bne.n	80058d8 <HAL_I2C_Master_Receive+0x30>
 80058d4:	2302      	movs	r3, #2
 80058d6:	e0d4      	b.n	8005a82 <HAL_I2C_Master_Receive+0x1da>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058e0:	f7fc fcc4 	bl	800226c <HAL_GetTick>
 80058e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	2319      	movs	r3, #25
 80058ec:	2201      	movs	r2, #1
 80058ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 f8f2 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e0bf      	b.n	8005a82 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2222      	movs	r2, #34	@ 0x22
 8005906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2210      	movs	r2, #16
 800590e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	893a      	ldrh	r2, [r7, #8]
 8005922:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800592e:	b29b      	uxth	r3, r3
 8005930:	2bff      	cmp	r3, #255	@ 0xff
 8005932:	d90e      	bls.n	8005952 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	22ff      	movs	r2, #255	@ 0xff
 8005938:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800593e:	b2da      	uxtb	r2, r3
 8005940:	8979      	ldrh	r1, [r7, #10]
 8005942:	4b52      	ldr	r3, [pc, #328]	@ (8005a8c <HAL_I2C_Master_Receive+0x1e4>)
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 fb16 	bl	8005f7c <I2C_TransferConfig>
 8005950:	e06d      	b.n	8005a2e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005960:	b2da      	uxtb	r2, r3
 8005962:	8979      	ldrh	r1, [r7, #10]
 8005964:	4b49      	ldr	r3, [pc, #292]	@ (8005a8c <HAL_I2C_Master_Receive+0x1e4>)
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 fb05 	bl	8005f7c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005972:	e05c      	b.n	8005a2e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	6a39      	ldr	r1, [r7, #32]
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 f993 	bl	8005ca4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e07c      	b.n	8005a82 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a4:	3b01      	subs	r3, #1
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d034      	beq.n	8005a2e <HAL_I2C_Master_Receive+0x186>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d130      	bne.n	8005a2e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	2200      	movs	r2, #0
 80059d4:	2180      	movs	r1, #128	@ 0x80
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 f880 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e04d      	b.n	8005a82 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2bff      	cmp	r3, #255	@ 0xff
 80059ee:	d90e      	bls.n	8005a0e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	22ff      	movs	r2, #255	@ 0xff
 80059f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	8979      	ldrh	r1, [r7, #10]
 80059fe:	2300      	movs	r3, #0
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 fab8 	bl	8005f7c <I2C_TransferConfig>
 8005a0c:	e00f      	b.n	8005a2e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	8979      	ldrh	r1, [r7, #10]
 8005a20:	2300      	movs	r3, #0
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 faa7 	bl	8005f7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d19d      	bne.n	8005974 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	6a39      	ldr	r1, [r7, #32]
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f000 f8ed 	bl	8005c1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e01a      	b.n	8005a82 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2220      	movs	r2, #32
 8005a52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6859      	ldr	r1, [r3, #4]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a90 <HAL_I2C_Master_Receive+0x1e8>)
 8005a60:	400b      	ands	r3, r1
 8005a62:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2220      	movs	r2, #32
 8005a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	e000      	b.n	8005a82 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005a80:	2302      	movs	r3, #2
  }
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	80002400 	.word	0x80002400
 8005a90:	fe00e800 	.word	0xfe00e800

08005a94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d103      	bne.n	8005ab2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d007      	beq.n	8005ad0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699a      	ldr	r2, [r3, #24]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0201 	orr.w	r2, r2, #1
 8005ace:	619a      	str	r2, [r3, #24]
  }
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005aec:	e03b      	b.n	8005b66 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	6839      	ldr	r1, [r7, #0]
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 f962 	bl	8005dbc <I2C_IsErrorOccurred>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e041      	b.n	8005b86 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b08:	d02d      	beq.n	8005b66 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b0a:	f7fc fbaf 	bl	800226c <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d302      	bcc.n	8005b20 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d122      	bne.n	8005b66 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	bf0c      	ite	eq
 8005b30:	2301      	moveq	r3, #1
 8005b32:	2300      	movne	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	461a      	mov	r2, r3
 8005b38:	79fb      	ldrb	r3, [r7, #7]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d113      	bne.n	8005b66 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b42:	f043 0220 	orr.w	r2, r3, #32
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e00f      	b.n	8005b86 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699a      	ldr	r2, [r3, #24]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	bf0c      	ite	eq
 8005b76:	2301      	moveq	r3, #1
 8005b78:	2300      	movne	r3, #0
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d0b4      	beq.n	8005aee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b084      	sub	sp, #16
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b9a:	e033      	b.n	8005c04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 f90b 	bl	8005dbc <I2C_IsErrorOccurred>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e031      	b.n	8005c14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb6:	d025      	beq.n	8005c04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb8:	f7fc fb58 	bl	800226c <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d302      	bcc.n	8005bce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d11a      	bne.n	8005c04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d013      	beq.n	8005c04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be0:	f043 0220 	orr.w	r2, r3, #32
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e007      	b.n	8005c14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d1c4      	bne.n	8005b9c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c28:	e02f      	b.n	8005c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	68b9      	ldr	r1, [r7, #8]
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 f8c4 	bl	8005dbc <I2C_IsErrorOccurred>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e02d      	b.n	8005c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c3e:	f7fc fb15 	bl	800226c <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d302      	bcc.n	8005c54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d11a      	bne.n	8005c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	f003 0320 	and.w	r3, r3, #32
 8005c5e:	2b20      	cmp	r3, #32
 8005c60:	d013      	beq.n	8005c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c66:	f043 0220 	orr.w	r2, r3, #32
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e007      	b.n	8005c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	f003 0320 	and.w	r3, r3, #32
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d1c8      	bne.n	8005c2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
	...

08005ca4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005cb4:	e071      	b.n	8005d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 f87e 	bl	8005dbc <I2C_IsErrorOccurred>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	f003 0320 	and.w	r3, r3, #32
 8005cd4:	2b20      	cmp	r3, #32
 8005cd6:	d13b      	bne.n	8005d50 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d138      	bne.n	8005d50 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d105      	bne.n	8005cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	f003 0310 	and.w	r3, r3, #16
 8005d02:	2b10      	cmp	r3, #16
 8005d04:	d121      	bne.n	8005d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2210      	movs	r2, #16
 8005d0c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2204      	movs	r2, #4
 8005d12:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6859      	ldr	r1, [r3, #4]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	4b24      	ldr	r3, [pc, #144]	@ (8005db8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005d28:	400b      	ands	r3, r1
 8005d2a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	75fb      	strb	r3, [r7, #23]
 8005d48:	e002      	b.n	8005d50 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005d50:	f7fc fa8c 	bl	800226c <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d302      	bcc.n	8005d66 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d119      	bne.n	8005d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005d66:	7dfb      	ldrb	r3, [r7, #23]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d116      	bne.n	8005d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	f003 0304 	and.w	r3, r3, #4
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d00f      	beq.n	8005d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d7e:	f043 0220 	orr.w	r2, r3, #32
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d002      	beq.n	8005dae <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d083      	beq.n	8005cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	fe00e800 	.word	0xfe00e800

08005dbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08a      	sub	sp, #40	@ 0x28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	f003 0310 	and.w	r3, r3, #16
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d068      	beq.n	8005eba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2210      	movs	r2, #16
 8005dee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005df0:	e049      	b.n	8005e86 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df8:	d045      	beq.n	8005e86 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005dfa:	f7fc fa37 	bl	800226c <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d302      	bcc.n	8005e10 <I2C_IsErrorOccurred+0x54>
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d13a      	bne.n	8005e86 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e32:	d121      	bne.n	8005e78 <I2C_IsErrorOccurred+0xbc>
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e3a:	d01d      	beq.n	8005e78 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005e3c:	7cfb      	ldrb	r3, [r7, #19]
 8005e3e:	2b20      	cmp	r3, #32
 8005e40:	d01a      	beq.n	8005e78 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e50:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005e52:	f7fc fa0b 	bl	800226c <HAL_GetTick>
 8005e56:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e58:	e00e      	b.n	8005e78 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005e5a:	f7fc fa07 	bl	800226c <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b19      	cmp	r3, #25
 8005e66:	d907      	bls.n	8005e78 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	f043 0320 	orr.w	r3, r3, #32
 8005e6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005e76:	e006      	b.n	8005e86 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	f003 0320 	and.w	r3, r3, #32
 8005e82:	2b20      	cmp	r3, #32
 8005e84:	d1e9      	bne.n	8005e5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	f003 0320 	and.w	r3, r3, #32
 8005e90:	2b20      	cmp	r3, #32
 8005e92:	d003      	beq.n	8005e9c <I2C_IsErrorOccurred+0xe0>
 8005e94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0aa      	beq.n	8005df2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d103      	bne.n	8005eac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	f043 0304 	orr.w	r3, r3, #4
 8005eb2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00b      	beq.n	8005ee4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	f043 0301 	orr.w	r3, r3, #1
 8005ed2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005edc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00b      	beq.n	8005f06 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	f043 0308 	orr.w	r3, r3, #8
 8005ef4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005efe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00b      	beq.n	8005f28 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005f10:	6a3b      	ldr	r3, [r7, #32]
 8005f12:	f043 0302 	orr.w	r3, r3, #2
 8005f16:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005f28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01c      	beq.n	8005f6a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f7ff fdaf 	bl	8005a94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6859      	ldr	r1, [r3, #4]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	4b0d      	ldr	r3, [pc, #52]	@ (8005f78 <I2C_IsErrorOccurred+0x1bc>)
 8005f42:	400b      	ands	r3, r1
 8005f44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	431a      	orrs	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3728      	adds	r7, #40	@ 0x28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	fe00e800 	.word	0xfe00e800

08005f7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	607b      	str	r3, [r7, #4]
 8005f86:	460b      	mov	r3, r1
 8005f88:	817b      	strh	r3, [r7, #10]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f8e:	897b      	ldrh	r3, [r7, #10]
 8005f90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f94:	7a7b      	ldrb	r3, [r7, #9]
 8005f96:	041b      	lsls	r3, r3, #16
 8005f98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f9c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005faa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	0d5b      	lsrs	r3, r3, #21
 8005fb6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005fba:	4b08      	ldr	r3, [pc, #32]	@ (8005fdc <I2C_TransferConfig+0x60>)
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	43db      	mvns	r3, r3
 8005fc0:	ea02 0103 	and.w	r1, r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005fce:	bf00      	nop
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	03ff63ff 	.word	0x03ff63ff

08005fe0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b20      	cmp	r3, #32
 8005ff4:	d138      	bne.n	8006068 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d101      	bne.n	8006004 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006000:	2302      	movs	r3, #2
 8006002:	e032      	b.n	800606a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2224      	movs	r2, #36	@ 0x24
 8006010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 0201 	bic.w	r2, r2, #1
 8006022:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006032:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6819      	ldr	r1, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0201 	orr.w	r2, r2, #1
 8006052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	e000      	b.n	800606a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006068:	2302      	movs	r3, #2
  }
}
 800606a:	4618      	mov	r0, r3
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006076:	b480      	push	{r7}
 8006078:	b085      	sub	sp, #20
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b20      	cmp	r3, #32
 800608a:	d139      	bne.n	8006100 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006092:	2b01      	cmp	r3, #1
 8006094:	d101      	bne.n	800609a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006096:	2302      	movs	r3, #2
 8006098:	e033      	b.n	8006102 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2224      	movs	r2, #36	@ 0x24
 80060a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0201 	bic.w	r2, r2, #1
 80060b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80060c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	021b      	lsls	r3, r3, #8
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0201 	orr.w	r2, r2, #1
 80060ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	e000      	b.n	8006102 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006100:	2302      	movs	r3, #2
  }
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b086      	sub	sp, #24
 8006112:	af02      	add	r7, sp, #8
 8006114:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e0fe      	b.n	800631e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	d106      	bne.n	800613a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7fb ff93 	bl	8002060 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2203      	movs	r2, #3
 800613e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4618      	mov	r0, r3
 8006148:	f006 faa0 	bl	800c68c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6818      	ldr	r0, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	7c1a      	ldrb	r2, [r3, #16]
 8006154:	f88d 2000 	strb.w	r2, [sp]
 8006158:	3304      	adds	r3, #4
 800615a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800615c:	f006 fa24 	bl	800c5a8 <USB_CoreInit>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d005      	beq.n	8006172 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2202      	movs	r2, #2
 800616a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e0d5      	b.n	800631e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2100      	movs	r1, #0
 8006178:	4618      	mov	r0, r3
 800617a:	f006 fa98 	bl	800c6ae <USB_SetCurrentMode>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d005      	beq.n	8006190 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e0c6      	b.n	800631e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006190:	2300      	movs	r3, #0
 8006192:	73fb      	strb	r3, [r7, #15]
 8006194:	e04a      	b.n	800622c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006196:	7bfa      	ldrb	r2, [r7, #15]
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	4613      	mov	r3, r2
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	4413      	add	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	440b      	add	r3, r1
 80061a4:	3315      	adds	r3, #21
 80061a6:	2201      	movs	r2, #1
 80061a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80061aa:	7bfa      	ldrb	r2, [r7, #15]
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	4613      	mov	r3, r2
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	440b      	add	r3, r1
 80061b8:	3314      	adds	r3, #20
 80061ba:	7bfa      	ldrb	r2, [r7, #15]
 80061bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80061be:	7bfa      	ldrb	r2, [r7, #15]
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	b298      	uxth	r0, r3
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	4613      	mov	r3, r2
 80061c8:	00db      	lsls	r3, r3, #3
 80061ca:	4413      	add	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	440b      	add	r3, r1
 80061d0:	332e      	adds	r3, #46	@ 0x2e
 80061d2:	4602      	mov	r2, r0
 80061d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80061d6:	7bfa      	ldrb	r2, [r7, #15]
 80061d8:	6879      	ldr	r1, [r7, #4]
 80061da:	4613      	mov	r3, r2
 80061dc:	00db      	lsls	r3, r3, #3
 80061de:	4413      	add	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	440b      	add	r3, r1
 80061e4:	3318      	adds	r3, #24
 80061e6:	2200      	movs	r2, #0
 80061e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80061ea:	7bfa      	ldrb	r2, [r7, #15]
 80061ec:	6879      	ldr	r1, [r7, #4]
 80061ee:	4613      	mov	r3, r2
 80061f0:	00db      	lsls	r3, r3, #3
 80061f2:	4413      	add	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	440b      	add	r3, r1
 80061f8:	331c      	adds	r3, #28
 80061fa:	2200      	movs	r2, #0
 80061fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80061fe:	7bfa      	ldrb	r2, [r7, #15]
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	4613      	mov	r3, r2
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	4413      	add	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	440b      	add	r3, r1
 800620c:	3320      	adds	r3, #32
 800620e:	2200      	movs	r2, #0
 8006210:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006212:	7bfa      	ldrb	r2, [r7, #15]
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	4613      	mov	r3, r2
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	4413      	add	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	440b      	add	r3, r1
 8006220:	3324      	adds	r3, #36	@ 0x24
 8006222:	2200      	movs	r2, #0
 8006224:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006226:	7bfb      	ldrb	r3, [r7, #15]
 8006228:	3301      	adds	r3, #1
 800622a:	73fb      	strb	r3, [r7, #15]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	791b      	ldrb	r3, [r3, #4]
 8006230:	7bfa      	ldrb	r2, [r7, #15]
 8006232:	429a      	cmp	r2, r3
 8006234:	d3af      	bcc.n	8006196 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006236:	2300      	movs	r3, #0
 8006238:	73fb      	strb	r3, [r7, #15]
 800623a:	e044      	b.n	80062c6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800623c:	7bfa      	ldrb	r2, [r7, #15]
 800623e:	6879      	ldr	r1, [r7, #4]
 8006240:	4613      	mov	r3, r2
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	4413      	add	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	440b      	add	r3, r1
 800624a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800624e:	2200      	movs	r2, #0
 8006250:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006252:	7bfa      	ldrb	r2, [r7, #15]
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	4613      	mov	r3, r2
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	440b      	add	r3, r1
 8006260:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006264:	7bfa      	ldrb	r2, [r7, #15]
 8006266:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006268:	7bfa      	ldrb	r2, [r7, #15]
 800626a:	6879      	ldr	r1, [r7, #4]
 800626c:	4613      	mov	r3, r2
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	4413      	add	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	440b      	add	r3, r1
 8006276:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800627a:	2200      	movs	r2, #0
 800627c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800627e:	7bfa      	ldrb	r2, [r7, #15]
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	4613      	mov	r3, r2
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	440b      	add	r3, r1
 800628c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006294:	7bfa      	ldrb	r2, [r7, #15]
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	4613      	mov	r3, r2
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	4413      	add	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	440b      	add	r3, r1
 80062a2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80062a6:	2200      	movs	r2, #0
 80062a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80062aa:	7bfa      	ldrb	r2, [r7, #15]
 80062ac:	6879      	ldr	r1, [r7, #4]
 80062ae:	4613      	mov	r3, r2
 80062b0:	00db      	lsls	r3, r3, #3
 80062b2:	4413      	add	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	440b      	add	r3, r1
 80062b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80062bc:	2200      	movs	r2, #0
 80062be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	3301      	adds	r3, #1
 80062c4:	73fb      	strb	r3, [r7, #15]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	791b      	ldrb	r3, [r3, #4]
 80062ca:	7bfa      	ldrb	r2, [r7, #15]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d3b5      	bcc.n	800623c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6818      	ldr	r0, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	7c1a      	ldrb	r2, [r3, #16]
 80062d8:	f88d 2000 	strb.w	r2, [sp]
 80062dc:	3304      	adds	r3, #4
 80062de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062e0:	f006 fa32 	bl	800c748 <USB_DevInit>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d005      	beq.n	80062f6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2202      	movs	r2, #2
 80062ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e013      	b.n	800631e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	7b1b      	ldrb	r3, [r3, #12]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d102      	bne.n	8006312 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f80b 	bl	8006328 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4618      	mov	r0, r3
 8006318:	f006 fbed 	bl	800caf6 <USB_DevDisconnect>

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006356:	4b05      	ldr	r3, [pc, #20]	@ (800636c <HAL_PCDEx_ActivateLPM+0x44>)
 8006358:	4313      	orrs	r3, r2
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	10000003 	.word	0x10000003

08006370 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006378:	4b29      	ldr	r3, [pc, #164]	@ (8006420 <HAL_PWREx_ConfigSupply+0xb0>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	2b06      	cmp	r3, #6
 8006382:	d00a      	beq.n	800639a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006384:	4b26      	ldr	r3, [pc, #152]	@ (8006420 <HAL_PWREx_ConfigSupply+0xb0>)
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	429a      	cmp	r2, r3
 8006390:	d001      	beq.n	8006396 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e040      	b.n	8006418 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006396:	2300      	movs	r3, #0
 8006398:	e03e      	b.n	8006418 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800639a:	4b21      	ldr	r3, [pc, #132]	@ (8006420 <HAL_PWREx_ConfigSupply+0xb0>)
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80063a2:	491f      	ldr	r1, [pc, #124]	@ (8006420 <HAL_PWREx_ConfigSupply+0xb0>)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80063aa:	f7fb ff5f 	bl	800226c <HAL_GetTick>
 80063ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063b0:	e009      	b.n	80063c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80063b2:	f7fb ff5b 	bl	800226c <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063c0:	d901      	bls.n	80063c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e028      	b.n	8006418 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063c6:	4b16      	ldr	r3, [pc, #88]	@ (8006420 <HAL_PWREx_ConfigSupply+0xb0>)
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063d2:	d1ee      	bne.n	80063b2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b1e      	cmp	r3, #30
 80063d8:	d008      	beq.n	80063ec <HAL_PWREx_ConfigSupply+0x7c>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80063de:	d005      	beq.n	80063ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b1d      	cmp	r3, #29
 80063e4:	d002      	beq.n	80063ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b2d      	cmp	r3, #45	@ 0x2d
 80063ea:	d114      	bne.n	8006416 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80063ec:	f7fb ff3e 	bl	800226c <HAL_GetTick>
 80063f0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80063f2:	e009      	b.n	8006408 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80063f4:	f7fb ff3a 	bl	800226c <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006402:	d901      	bls.n	8006408 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e007      	b.n	8006418 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006408:	4b05      	ldr	r3, [pc, #20]	@ (8006420 <HAL_PWREx_ConfigSupply+0xb0>)
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006414:	d1ee      	bne.n	80063f4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	58024800 	.word	0x58024800

08006424 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006424:	b480      	push	{r7}
 8006426:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006428:	4b05      	ldr	r3, [pc, #20]	@ (8006440 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	4a04      	ldr	r2, [pc, #16]	@ (8006440 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800642e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006432:	60d3      	str	r3, [r2, #12]
}
 8006434:	bf00      	nop
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	58024800 	.word	0x58024800

08006444 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b08c      	sub	sp, #48	@ 0x30
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d102      	bne.n	8006458 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	f000 bc48 	b.w	8006ce8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 8088 	beq.w	8006576 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006466:	4b99      	ldr	r3, [pc, #612]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800646e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006470:	4b96      	ldr	r3, [pc, #600]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 8006472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006474:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006478:	2b10      	cmp	r3, #16
 800647a:	d007      	beq.n	800648c <HAL_RCC_OscConfig+0x48>
 800647c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800647e:	2b18      	cmp	r3, #24
 8006480:	d111      	bne.n	80064a6 <HAL_RCC_OscConfig+0x62>
 8006482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006484:	f003 0303 	and.w	r3, r3, #3
 8006488:	2b02      	cmp	r3, #2
 800648a:	d10c      	bne.n	80064a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800648c:	4b8f      	ldr	r3, [pc, #572]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d06d      	beq.n	8006574 <HAL_RCC_OscConfig+0x130>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d169      	bne.n	8006574 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	f000 bc21 	b.w	8006ce8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064ae:	d106      	bne.n	80064be <HAL_RCC_OscConfig+0x7a>
 80064b0:	4b86      	ldr	r3, [pc, #536]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a85      	ldr	r2, [pc, #532]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 80064b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	e02e      	b.n	800651c <HAL_RCC_OscConfig+0xd8>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10c      	bne.n	80064e0 <HAL_RCC_OscConfig+0x9c>
 80064c6:	4b81      	ldr	r3, [pc, #516]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a80      	ldr	r2, [pc, #512]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 80064cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	4b7e      	ldr	r3, [pc, #504]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a7d      	ldr	r2, [pc, #500]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 80064d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	e01d      	b.n	800651c <HAL_RCC_OscConfig+0xd8>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064e8:	d10c      	bne.n	8006504 <HAL_RCC_OscConfig+0xc0>
 80064ea:	4b78      	ldr	r3, [pc, #480]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a77      	ldr	r2, [pc, #476]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 80064f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064f4:	6013      	str	r3, [r2, #0]
 80064f6:	4b75      	ldr	r3, [pc, #468]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a74      	ldr	r2, [pc, #464]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 80064fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006500:	6013      	str	r3, [r2, #0]
 8006502:	e00b      	b.n	800651c <HAL_RCC_OscConfig+0xd8>
 8006504:	4b71      	ldr	r3, [pc, #452]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a70      	ldr	r2, [pc, #448]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 800650a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800650e:	6013      	str	r3, [r2, #0]
 8006510:	4b6e      	ldr	r3, [pc, #440]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a6d      	ldr	r2, [pc, #436]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 8006516:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800651a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d013      	beq.n	800654c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006524:	f7fb fea2 	bl	800226c <HAL_GetTick>
 8006528:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800652a:	e008      	b.n	800653e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800652c:	f7fb fe9e 	bl	800226c <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b64      	cmp	r3, #100	@ 0x64
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e3d4      	b.n	8006ce8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800653e:	4b63      	ldr	r3, [pc, #396]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d0f0      	beq.n	800652c <HAL_RCC_OscConfig+0xe8>
 800654a:	e014      	b.n	8006576 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654c:	f7fb fe8e 	bl	800226c <HAL_GetTick>
 8006550:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006552:	e008      	b.n	8006566 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006554:	f7fb fe8a 	bl	800226c <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	2b64      	cmp	r3, #100	@ 0x64
 8006560:	d901      	bls.n	8006566 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e3c0      	b.n	8006ce8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006566:	4b59      	ldr	r3, [pc, #356]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1f0      	bne.n	8006554 <HAL_RCC_OscConfig+0x110>
 8006572:	e000      	b.n	8006576 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 80ca 	beq.w	8006718 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006584:	4b51      	ldr	r3, [pc, #324]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800658c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800658e:	4b4f      	ldr	r3, [pc, #316]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 8006590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006592:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d007      	beq.n	80065aa <HAL_RCC_OscConfig+0x166>
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	2b18      	cmp	r3, #24
 800659e:	d156      	bne.n	800664e <HAL_RCC_OscConfig+0x20a>
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d151      	bne.n	800664e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065aa:	4b48      	ldr	r3, [pc, #288]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0304 	and.w	r3, r3, #4
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d005      	beq.n	80065c2 <HAL_RCC_OscConfig+0x17e>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e392      	b.n	8006ce8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065c2:	4b42      	ldr	r3, [pc, #264]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f023 0219 	bic.w	r2, r3, #25
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	493f      	ldr	r1, [pc, #252]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d4:	f7fb fe4a 	bl	800226c <HAL_GetTick>
 80065d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065dc:	f7fb fe46 	bl	800226c <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e37c      	b.n	8006ce8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065ee:	4b37      	ldr	r3, [pc, #220]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0304 	and.w	r3, r3, #4
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0f0      	beq.n	80065dc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065fa:	f7fb fe67 	bl	80022cc <HAL_GetREVID>
 80065fe:	4603      	mov	r3, r0
 8006600:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006604:	4293      	cmp	r3, r2
 8006606:	d817      	bhi.n	8006638 <HAL_RCC_OscConfig+0x1f4>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	2b40      	cmp	r3, #64	@ 0x40
 800660e:	d108      	bne.n	8006622 <HAL_RCC_OscConfig+0x1de>
 8006610:	4b2e      	ldr	r3, [pc, #184]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006618:	4a2c      	ldr	r2, [pc, #176]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 800661a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800661e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006620:	e07a      	b.n	8006718 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006622:	4b2a      	ldr	r3, [pc, #168]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	031b      	lsls	r3, r3, #12
 8006630:	4926      	ldr	r1, [pc, #152]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 8006632:	4313      	orrs	r3, r2
 8006634:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006636:	e06f      	b.n	8006718 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006638:	4b24      	ldr	r3, [pc, #144]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	061b      	lsls	r3, r3, #24
 8006646:	4921      	ldr	r1, [pc, #132]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 8006648:	4313      	orrs	r3, r2
 800664a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800664c:	e064      	b.n	8006718 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d047      	beq.n	80066e6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006656:	4b1d      	ldr	r3, [pc, #116]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f023 0219 	bic.w	r2, r3, #25
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	491a      	ldr	r1, [pc, #104]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 8006664:	4313      	orrs	r3, r2
 8006666:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006668:	f7fb fe00 	bl	800226c <HAL_GetTick>
 800666c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800666e:	e008      	b.n	8006682 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006670:	f7fb fdfc 	bl	800226c <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	2b02      	cmp	r3, #2
 800667c:	d901      	bls.n	8006682 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e332      	b.n	8006ce8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006682:	4b12      	ldr	r3, [pc, #72]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0304 	and.w	r3, r3, #4
 800668a:	2b00      	cmp	r3, #0
 800668c:	d0f0      	beq.n	8006670 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800668e:	f7fb fe1d 	bl	80022cc <HAL_GetREVID>
 8006692:	4603      	mov	r3, r0
 8006694:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006698:	4293      	cmp	r3, r2
 800669a:	d819      	bhi.n	80066d0 <HAL_RCC_OscConfig+0x28c>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	2b40      	cmp	r3, #64	@ 0x40
 80066a2:	d108      	bne.n	80066b6 <HAL_RCC_OscConfig+0x272>
 80066a4:	4b09      	ldr	r3, [pc, #36]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80066ac:	4a07      	ldr	r2, [pc, #28]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 80066ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066b2:	6053      	str	r3, [r2, #4]
 80066b4:	e030      	b.n	8006718 <HAL_RCC_OscConfig+0x2d4>
 80066b6:	4b05      	ldr	r3, [pc, #20]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	031b      	lsls	r3, r3, #12
 80066c4:	4901      	ldr	r1, [pc, #4]	@ (80066cc <HAL_RCC_OscConfig+0x288>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	604b      	str	r3, [r1, #4]
 80066ca:	e025      	b.n	8006718 <HAL_RCC_OscConfig+0x2d4>
 80066cc:	58024400 	.word	0x58024400
 80066d0:	4b9a      	ldr	r3, [pc, #616]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	061b      	lsls	r3, r3, #24
 80066de:	4997      	ldr	r1, [pc, #604]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	604b      	str	r3, [r1, #4]
 80066e4:	e018      	b.n	8006718 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066e6:	4b95      	ldr	r3, [pc, #596]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a94      	ldr	r2, [pc, #592]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 80066ec:	f023 0301 	bic.w	r3, r3, #1
 80066f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f2:	f7fb fdbb 	bl	800226c <HAL_GetTick>
 80066f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066f8:	e008      	b.n	800670c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066fa:	f7fb fdb7 	bl	800226c <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b02      	cmp	r3, #2
 8006706:	d901      	bls.n	800670c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e2ed      	b.n	8006ce8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800670c:	4b8b      	ldr	r3, [pc, #556]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1f0      	bne.n	80066fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0310 	and.w	r3, r3, #16
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 80a9 	beq.w	8006878 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006726:	4b85      	ldr	r3, [pc, #532]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800672e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006730:	4b82      	ldr	r3, [pc, #520]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 8006732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006734:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	2b08      	cmp	r3, #8
 800673a:	d007      	beq.n	800674c <HAL_RCC_OscConfig+0x308>
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	2b18      	cmp	r3, #24
 8006740:	d13a      	bne.n	80067b8 <HAL_RCC_OscConfig+0x374>
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f003 0303 	and.w	r3, r3, #3
 8006748:	2b01      	cmp	r3, #1
 800674a:	d135      	bne.n	80067b8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800674c:	4b7b      	ldr	r3, [pc, #492]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006754:	2b00      	cmp	r3, #0
 8006756:	d005      	beq.n	8006764 <HAL_RCC_OscConfig+0x320>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	69db      	ldr	r3, [r3, #28]
 800675c:	2b80      	cmp	r3, #128	@ 0x80
 800675e:	d001      	beq.n	8006764 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e2c1      	b.n	8006ce8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006764:	f7fb fdb2 	bl	80022cc <HAL_GetREVID>
 8006768:	4603      	mov	r3, r0
 800676a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800676e:	4293      	cmp	r3, r2
 8006770:	d817      	bhi.n	80067a2 <HAL_RCC_OscConfig+0x35e>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	2b20      	cmp	r3, #32
 8006778:	d108      	bne.n	800678c <HAL_RCC_OscConfig+0x348>
 800677a:	4b70      	ldr	r3, [pc, #448]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006782:	4a6e      	ldr	r2, [pc, #440]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 8006784:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006788:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800678a:	e075      	b.n	8006878 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800678c:	4b6b      	ldr	r3, [pc, #428]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	069b      	lsls	r3, r3, #26
 800679a:	4968      	ldr	r1, [pc, #416]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 800679c:	4313      	orrs	r3, r2
 800679e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067a0:	e06a      	b.n	8006878 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067a2:	4b66      	ldr	r3, [pc, #408]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	061b      	lsls	r3, r3, #24
 80067b0:	4962      	ldr	r1, [pc, #392]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067b6:	e05f      	b.n	8006878 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d042      	beq.n	8006846 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80067c0:	4b5e      	ldr	r3, [pc, #376]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a5d      	ldr	r2, [pc, #372]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 80067c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067cc:	f7fb fd4e 	bl	800226c <HAL_GetTick>
 80067d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80067d4:	f7fb fd4a 	bl	800226c <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e280      	b.n	8006ce8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067e6:	4b55      	ldr	r3, [pc, #340]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0f0      	beq.n	80067d4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067f2:	f7fb fd6b 	bl	80022cc <HAL_GetREVID>
 80067f6:	4603      	mov	r3, r0
 80067f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d817      	bhi.n	8006830 <HAL_RCC_OscConfig+0x3ec>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	2b20      	cmp	r3, #32
 8006806:	d108      	bne.n	800681a <HAL_RCC_OscConfig+0x3d6>
 8006808:	4b4c      	ldr	r3, [pc, #304]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006810:	4a4a      	ldr	r2, [pc, #296]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 8006812:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006816:	6053      	str	r3, [r2, #4]
 8006818:	e02e      	b.n	8006878 <HAL_RCC_OscConfig+0x434>
 800681a:	4b48      	ldr	r3, [pc, #288]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	069b      	lsls	r3, r3, #26
 8006828:	4944      	ldr	r1, [pc, #272]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 800682a:	4313      	orrs	r3, r2
 800682c:	604b      	str	r3, [r1, #4]
 800682e:	e023      	b.n	8006878 <HAL_RCC_OscConfig+0x434>
 8006830:	4b42      	ldr	r3, [pc, #264]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	061b      	lsls	r3, r3, #24
 800683e:	493f      	ldr	r1, [pc, #252]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 8006840:	4313      	orrs	r3, r2
 8006842:	60cb      	str	r3, [r1, #12]
 8006844:	e018      	b.n	8006878 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006846:	4b3d      	ldr	r3, [pc, #244]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a3c      	ldr	r2, [pc, #240]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 800684c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006852:	f7fb fd0b 	bl	800226c <HAL_GetTick>
 8006856:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006858:	e008      	b.n	800686c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800685a:	f7fb fd07 	bl	800226c <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	2b02      	cmp	r3, #2
 8006866:	d901      	bls.n	800686c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e23d      	b.n	8006ce8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800686c:	4b33      	ldr	r3, [pc, #204]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1f0      	bne.n	800685a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0308 	and.w	r3, r3, #8
 8006880:	2b00      	cmp	r3, #0
 8006882:	d036      	beq.n	80068f2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d019      	beq.n	80068c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800688c:	4b2b      	ldr	r3, [pc, #172]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 800688e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006890:	4a2a      	ldr	r2, [pc, #168]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 8006892:	f043 0301 	orr.w	r3, r3, #1
 8006896:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006898:	f7fb fce8 	bl	800226c <HAL_GetTick>
 800689c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800689e:	e008      	b.n	80068b2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068a0:	f7fb fce4 	bl	800226c <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e21a      	b.n	8006ce8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80068b2:	4b22      	ldr	r3, [pc, #136]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 80068b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d0f0      	beq.n	80068a0 <HAL_RCC_OscConfig+0x45c>
 80068be:	e018      	b.n	80068f2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068c0:	4b1e      	ldr	r3, [pc, #120]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 80068c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068c4:	4a1d      	ldr	r2, [pc, #116]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 80068c6:	f023 0301 	bic.w	r3, r3, #1
 80068ca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068cc:	f7fb fcce 	bl	800226c <HAL_GetTick>
 80068d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80068d2:	e008      	b.n	80068e6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068d4:	f7fb fcca 	bl	800226c <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e200      	b.n	8006ce8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80068e6:	4b15      	ldr	r3, [pc, #84]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 80068e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1f0      	bne.n	80068d4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d039      	beq.n	8006972 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d01c      	beq.n	8006940 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006906:	4b0d      	ldr	r3, [pc, #52]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a0c      	ldr	r2, [pc, #48]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 800690c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006910:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006912:	f7fb fcab 	bl	800226c <HAL_GetTick>
 8006916:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006918:	e008      	b.n	800692c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800691a:	f7fb fca7 	bl	800226c <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	2b02      	cmp	r3, #2
 8006926:	d901      	bls.n	800692c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e1dd      	b.n	8006ce8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800692c:	4b03      	ldr	r3, [pc, #12]	@ (800693c <HAL_RCC_OscConfig+0x4f8>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0f0      	beq.n	800691a <HAL_RCC_OscConfig+0x4d6>
 8006938:	e01b      	b.n	8006972 <HAL_RCC_OscConfig+0x52e>
 800693a:	bf00      	nop
 800693c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006940:	4b9b      	ldr	r3, [pc, #620]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a9a      	ldr	r2, [pc, #616]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006946:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800694a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800694c:	f7fb fc8e 	bl	800226c <HAL_GetTick>
 8006950:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006954:	f7fb fc8a 	bl	800226c <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e1c0      	b.n	8006ce8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006966:	4b92      	ldr	r3, [pc, #584]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1f0      	bne.n	8006954 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0304 	and.w	r3, r3, #4
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 8081 	beq.w	8006a82 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006980:	4b8c      	ldr	r3, [pc, #560]	@ (8006bb4 <HAL_RCC_OscConfig+0x770>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a8b      	ldr	r2, [pc, #556]	@ (8006bb4 <HAL_RCC_OscConfig+0x770>)
 8006986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800698a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800698c:	f7fb fc6e 	bl	800226c <HAL_GetTick>
 8006990:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006992:	e008      	b.n	80069a6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006994:	f7fb fc6a 	bl	800226c <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b64      	cmp	r3, #100	@ 0x64
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e1a0      	b.n	8006ce8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069a6:	4b83      	ldr	r3, [pc, #524]	@ (8006bb4 <HAL_RCC_OscConfig+0x770>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0f0      	beq.n	8006994 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d106      	bne.n	80069c8 <HAL_RCC_OscConfig+0x584>
 80069ba:	4b7d      	ldr	r3, [pc, #500]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 80069bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069be:	4a7c      	ldr	r2, [pc, #496]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 80069c0:	f043 0301 	orr.w	r3, r3, #1
 80069c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80069c6:	e02d      	b.n	8006a24 <HAL_RCC_OscConfig+0x5e0>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10c      	bne.n	80069ea <HAL_RCC_OscConfig+0x5a6>
 80069d0:	4b77      	ldr	r3, [pc, #476]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 80069d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069d4:	4a76      	ldr	r2, [pc, #472]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 80069d6:	f023 0301 	bic.w	r3, r3, #1
 80069da:	6713      	str	r3, [r2, #112]	@ 0x70
 80069dc:	4b74      	ldr	r3, [pc, #464]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 80069de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e0:	4a73      	ldr	r2, [pc, #460]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 80069e2:	f023 0304 	bic.w	r3, r3, #4
 80069e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80069e8:	e01c      	b.n	8006a24 <HAL_RCC_OscConfig+0x5e0>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	2b05      	cmp	r3, #5
 80069f0:	d10c      	bne.n	8006a0c <HAL_RCC_OscConfig+0x5c8>
 80069f2:	4b6f      	ldr	r3, [pc, #444]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 80069f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069f6:	4a6e      	ldr	r2, [pc, #440]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 80069f8:	f043 0304 	orr.w	r3, r3, #4
 80069fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80069fe:	4b6c      	ldr	r3, [pc, #432]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a02:	4a6b      	ldr	r2, [pc, #428]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006a04:	f043 0301 	orr.w	r3, r3, #1
 8006a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a0a:	e00b      	b.n	8006a24 <HAL_RCC_OscConfig+0x5e0>
 8006a0c:	4b68      	ldr	r3, [pc, #416]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a10:	4a67      	ldr	r2, [pc, #412]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006a12:	f023 0301 	bic.w	r3, r3, #1
 8006a16:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a18:	4b65      	ldr	r3, [pc, #404]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a1c:	4a64      	ldr	r2, [pc, #400]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006a1e:	f023 0304 	bic.w	r3, r3, #4
 8006a22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d015      	beq.n	8006a58 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a2c:	f7fb fc1e 	bl	800226c <HAL_GetTick>
 8006a30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a32:	e00a      	b.n	8006a4a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a34:	f7fb fc1a 	bl	800226c <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e14e      	b.n	8006ce8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a4a:	4b59      	ldr	r3, [pc, #356]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d0ee      	beq.n	8006a34 <HAL_RCC_OscConfig+0x5f0>
 8006a56:	e014      	b.n	8006a82 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a58:	f7fb fc08 	bl	800226c <HAL_GetTick>
 8006a5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a5e:	e00a      	b.n	8006a76 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a60:	f7fb fc04 	bl	800226c <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e138      	b.n	8006ce8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a76:	4b4e      	ldr	r3, [pc, #312]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1ee      	bne.n	8006a60 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 812d 	beq.w	8006ce6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006a8c:	4b48      	ldr	r3, [pc, #288]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a94:	2b18      	cmp	r3, #24
 8006a96:	f000 80bd 	beq.w	8006c14 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	f040 809e 	bne.w	8006be0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aa4:	4b42      	ldr	r3, [pc, #264]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a41      	ldr	r2, [pc, #260]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006aaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab0:	f7fb fbdc 	bl	800226c <HAL_GetTick>
 8006ab4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ab6:	e008      	b.n	8006aca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ab8:	f7fb fbd8 	bl	800226c <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d901      	bls.n	8006aca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e10e      	b.n	8006ce8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006aca:	4b39      	ldr	r3, [pc, #228]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1f0      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ad6:	4b36      	ldr	r3, [pc, #216]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006ad8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ada:	4b37      	ldr	r3, [pc, #220]	@ (8006bb8 <HAL_RCC_OscConfig+0x774>)
 8006adc:	4013      	ands	r3, r2
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006ae6:	0112      	lsls	r2, r2, #4
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	4931      	ldr	r1, [pc, #196]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	628b      	str	r3, [r1, #40]	@ 0x28
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af4:	3b01      	subs	r3, #1
 8006af6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006afe:	3b01      	subs	r3, #1
 8006b00:	025b      	lsls	r3, r3, #9
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	431a      	orrs	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	041b      	lsls	r3, r3, #16
 8006b0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006b12:	431a      	orrs	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	061b      	lsls	r3, r3, #24
 8006b1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006b20:	4923      	ldr	r1, [pc, #140]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006b26:	4b22      	ldr	r3, [pc, #136]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2a:	4a21      	ldr	r2, [pc, #132]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006b2c:	f023 0301 	bic.w	r3, r3, #1
 8006b30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b32:	4b1f      	ldr	r3, [pc, #124]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006b34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b36:	4b21      	ldr	r3, [pc, #132]	@ (8006bbc <HAL_RCC_OscConfig+0x778>)
 8006b38:	4013      	ands	r3, r2
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006b3e:	00d2      	lsls	r2, r2, #3
 8006b40:	491b      	ldr	r1, [pc, #108]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006b46:	4b1a      	ldr	r3, [pc, #104]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b4a:	f023 020c 	bic.w	r2, r3, #12
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b52:	4917      	ldr	r1, [pc, #92]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006b58:	4b15      	ldr	r3, [pc, #84]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5c:	f023 0202 	bic.w	r2, r3, #2
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b64:	4912      	ldr	r1, [pc, #72]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b6a:	4b11      	ldr	r3, [pc, #68]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6e:	4a10      	ldr	r2, [pc, #64]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b76:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b7a:	4a0d      	ldr	r2, [pc, #52]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006b7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006b82:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b86:	4a0a      	ldr	r2, [pc, #40]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006b88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006b8e:	4b08      	ldr	r3, [pc, #32]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b92:	4a07      	ldr	r2, [pc, #28]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006b94:	f043 0301 	orr.w	r3, r3, #1
 8006b98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b9a:	4b05      	ldr	r3, [pc, #20]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a04      	ldr	r2, [pc, #16]	@ (8006bb0 <HAL_RCC_OscConfig+0x76c>)
 8006ba0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba6:	f7fb fb61 	bl	800226c <HAL_GetTick>
 8006baa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006bac:	e011      	b.n	8006bd2 <HAL_RCC_OscConfig+0x78e>
 8006bae:	bf00      	nop
 8006bb0:	58024400 	.word	0x58024400
 8006bb4:	58024800 	.word	0x58024800
 8006bb8:	fffffc0c 	.word	0xfffffc0c
 8006bbc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bc0:	f7fb fb54 	bl	800226c <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d901      	bls.n	8006bd2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e08a      	b.n	8006ce8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006bd2:	4b47      	ldr	r3, [pc, #284]	@ (8006cf0 <HAL_RCC_OscConfig+0x8ac>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0f0      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x77c>
 8006bde:	e082      	b.n	8006ce6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006be0:	4b43      	ldr	r3, [pc, #268]	@ (8006cf0 <HAL_RCC_OscConfig+0x8ac>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a42      	ldr	r2, [pc, #264]	@ (8006cf0 <HAL_RCC_OscConfig+0x8ac>)
 8006be6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bec:	f7fb fb3e 	bl	800226c <HAL_GetTick>
 8006bf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bf2:	e008      	b.n	8006c06 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bf4:	f7fb fb3a 	bl	800226c <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e070      	b.n	8006ce8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c06:	4b3a      	ldr	r3, [pc, #232]	@ (8006cf0 <HAL_RCC_OscConfig+0x8ac>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1f0      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x7b0>
 8006c12:	e068      	b.n	8006ce6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006c14:	4b36      	ldr	r3, [pc, #216]	@ (8006cf0 <HAL_RCC_OscConfig+0x8ac>)
 8006c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c18:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006c1a:	4b35      	ldr	r3, [pc, #212]	@ (8006cf0 <HAL_RCC_OscConfig+0x8ac>)
 8006c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c1e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d031      	beq.n	8006c8c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f003 0203 	and.w	r2, r3, #3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d12a      	bne.n	8006c8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	091b      	lsrs	r3, r3, #4
 8006c3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d122      	bne.n	8006c8c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c50:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d11a      	bne.n	8006c8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	0a5b      	lsrs	r3, r3, #9
 8006c5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c62:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d111      	bne.n	8006c8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	0c1b      	lsrs	r3, r3, #16
 8006c6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c74:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d108      	bne.n	8006c8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	0e1b      	lsrs	r3, r3, #24
 8006c7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c86:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d001      	beq.n	8006c90 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e02b      	b.n	8006ce8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006c90:	4b17      	ldr	r3, [pc, #92]	@ (8006cf0 <HAL_RCC_OscConfig+0x8ac>)
 8006c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c94:	08db      	lsrs	r3, r3, #3
 8006c96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c9a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d01f      	beq.n	8006ce6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006ca6:	4b12      	ldr	r3, [pc, #72]	@ (8006cf0 <HAL_RCC_OscConfig+0x8ac>)
 8006ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006caa:	4a11      	ldr	r2, [pc, #68]	@ (8006cf0 <HAL_RCC_OscConfig+0x8ac>)
 8006cac:	f023 0301 	bic.w	r3, r3, #1
 8006cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006cb2:	f7fb fadb 	bl	800226c <HAL_GetTick>
 8006cb6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006cb8:	bf00      	nop
 8006cba:	f7fb fad7 	bl	800226c <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d0f9      	beq.n	8006cba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf0 <HAL_RCC_OscConfig+0x8ac>)
 8006cc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cca:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf4 <HAL_RCC_OscConfig+0x8b0>)
 8006ccc:	4013      	ands	r3, r2
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006cd2:	00d2      	lsls	r2, r2, #3
 8006cd4:	4906      	ldr	r1, [pc, #24]	@ (8006cf0 <HAL_RCC_OscConfig+0x8ac>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006cda:	4b05      	ldr	r3, [pc, #20]	@ (8006cf0 <HAL_RCC_OscConfig+0x8ac>)
 8006cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cde:	4a04      	ldr	r2, [pc, #16]	@ (8006cf0 <HAL_RCC_OscConfig+0x8ac>)
 8006ce0:	f043 0301 	orr.w	r3, r3, #1
 8006ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3730      	adds	r7, #48	@ 0x30
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	58024400 	.word	0x58024400
 8006cf4:	ffff0007 	.word	0xffff0007

08006cf8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e19c      	b.n	8007046 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d0c:	4b8a      	ldr	r3, [pc, #552]	@ (8006f38 <HAL_RCC_ClockConfig+0x240>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 030f 	and.w	r3, r3, #15
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d910      	bls.n	8006d3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d1a:	4b87      	ldr	r3, [pc, #540]	@ (8006f38 <HAL_RCC_ClockConfig+0x240>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f023 020f 	bic.w	r2, r3, #15
 8006d22:	4985      	ldr	r1, [pc, #532]	@ (8006f38 <HAL_RCC_ClockConfig+0x240>)
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d2a:	4b83      	ldr	r3, [pc, #524]	@ (8006f38 <HAL_RCC_ClockConfig+0x240>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 030f 	and.w	r3, r3, #15
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d001      	beq.n	8006d3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e184      	b.n	8007046 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d010      	beq.n	8006d6a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	691a      	ldr	r2, [r3, #16]
 8006d4c:	4b7b      	ldr	r3, [pc, #492]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d908      	bls.n	8006d6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d58:	4b78      	ldr	r3, [pc, #480]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	4975      	ldr	r1, [pc, #468]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0308 	and.w	r3, r3, #8
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d010      	beq.n	8006d98 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	695a      	ldr	r2, [r3, #20]
 8006d7a:	4b70      	ldr	r3, [pc, #448]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d908      	bls.n	8006d98 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d86:	4b6d      	ldr	r3, [pc, #436]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	496a      	ldr	r1, [pc, #424]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0310 	and.w	r3, r3, #16
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d010      	beq.n	8006dc6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	699a      	ldr	r2, [r3, #24]
 8006da8:	4b64      	ldr	r3, [pc, #400]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d908      	bls.n	8006dc6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006db4:	4b61      	ldr	r3, [pc, #388]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006db6:	69db      	ldr	r3, [r3, #28]
 8006db8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	495e      	ldr	r1, [pc, #376]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0320 	and.w	r3, r3, #32
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d010      	beq.n	8006df4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	69da      	ldr	r2, [r3, #28]
 8006dd6:	4b59      	ldr	r3, [pc, #356]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d908      	bls.n	8006df4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006de2:	4b56      	ldr	r3, [pc, #344]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	4953      	ldr	r1, [pc, #332]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d010      	beq.n	8006e22 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	4b4d      	ldr	r3, [pc, #308]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	f003 030f 	and.w	r3, r3, #15
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d908      	bls.n	8006e22 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e10:	4b4a      	ldr	r3, [pc, #296]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	f023 020f 	bic.w	r2, r3, #15
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	4947      	ldr	r1, [pc, #284]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d055      	beq.n	8006eda <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006e2e:	4b43      	ldr	r3, [pc, #268]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	4940      	ldr	r1, [pc, #256]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d107      	bne.n	8006e58 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e48:	4b3c      	ldr	r3, [pc, #240]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d121      	bne.n	8006e98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e0f6      	b.n	8007046 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	d107      	bne.n	8006e70 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e60:	4b36      	ldr	r3, [pc, #216]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d115      	bne.n	8006e98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e0ea      	b.n	8007046 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d107      	bne.n	8006e88 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e78:	4b30      	ldr	r3, [pc, #192]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d109      	bne.n	8006e98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e0de      	b.n	8007046 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e88:	4b2c      	ldr	r3, [pc, #176]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e0d6      	b.n	8007046 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e98:	4b28      	ldr	r3, [pc, #160]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	f023 0207 	bic.w	r2, r3, #7
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	4925      	ldr	r1, [pc, #148]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eaa:	f7fb f9df 	bl	800226c <HAL_GetTick>
 8006eae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eb0:	e00a      	b.n	8006ec8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eb2:	f7fb f9db 	bl	800226c <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d901      	bls.n	8006ec8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e0be      	b.n	8007046 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	00db      	lsls	r3, r3, #3
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d1eb      	bne.n	8006eb2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d010      	beq.n	8006f08 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	4b14      	ldr	r3, [pc, #80]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	f003 030f 	and.w	r3, r3, #15
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d208      	bcs.n	8006f08 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ef6:	4b11      	ldr	r3, [pc, #68]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	f023 020f 	bic.w	r2, r3, #15
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	490e      	ldr	r1, [pc, #56]	@ (8006f3c <HAL_RCC_ClockConfig+0x244>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f08:	4b0b      	ldr	r3, [pc, #44]	@ (8006f38 <HAL_RCC_ClockConfig+0x240>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 030f 	and.w	r3, r3, #15
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d214      	bcs.n	8006f40 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f16:	4b08      	ldr	r3, [pc, #32]	@ (8006f38 <HAL_RCC_ClockConfig+0x240>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f023 020f 	bic.w	r2, r3, #15
 8006f1e:	4906      	ldr	r1, [pc, #24]	@ (8006f38 <HAL_RCC_ClockConfig+0x240>)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f26:	4b04      	ldr	r3, [pc, #16]	@ (8006f38 <HAL_RCC_ClockConfig+0x240>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 030f 	and.w	r3, r3, #15
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d005      	beq.n	8006f40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e086      	b.n	8007046 <HAL_RCC_ClockConfig+0x34e>
 8006f38:	52002000 	.word	0x52002000
 8006f3c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0304 	and.w	r3, r3, #4
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d010      	beq.n	8006f6e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	691a      	ldr	r2, [r3, #16]
 8006f50:	4b3f      	ldr	r3, [pc, #252]	@ (8007050 <HAL_RCC_ClockConfig+0x358>)
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d208      	bcs.n	8006f6e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f5c:	4b3c      	ldr	r3, [pc, #240]	@ (8007050 <HAL_RCC_ClockConfig+0x358>)
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	4939      	ldr	r1, [pc, #228]	@ (8007050 <HAL_RCC_ClockConfig+0x358>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0308 	and.w	r3, r3, #8
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d010      	beq.n	8006f9c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	695a      	ldr	r2, [r3, #20]
 8006f7e:	4b34      	ldr	r3, [pc, #208]	@ (8007050 <HAL_RCC_ClockConfig+0x358>)
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d208      	bcs.n	8006f9c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f8a:	4b31      	ldr	r3, [pc, #196]	@ (8007050 <HAL_RCC_ClockConfig+0x358>)
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	492e      	ldr	r1, [pc, #184]	@ (8007050 <HAL_RCC_ClockConfig+0x358>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0310 	and.w	r3, r3, #16
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d010      	beq.n	8006fca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	699a      	ldr	r2, [r3, #24]
 8006fac:	4b28      	ldr	r3, [pc, #160]	@ (8007050 <HAL_RCC_ClockConfig+0x358>)
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d208      	bcs.n	8006fca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006fb8:	4b25      	ldr	r3, [pc, #148]	@ (8007050 <HAL_RCC_ClockConfig+0x358>)
 8006fba:	69db      	ldr	r3, [r3, #28]
 8006fbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	4922      	ldr	r1, [pc, #136]	@ (8007050 <HAL_RCC_ClockConfig+0x358>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0320 	and.w	r3, r3, #32
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d010      	beq.n	8006ff8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	69da      	ldr	r2, [r3, #28]
 8006fda:	4b1d      	ldr	r3, [pc, #116]	@ (8007050 <HAL_RCC_ClockConfig+0x358>)
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d208      	bcs.n	8006ff8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8007050 <HAL_RCC_ClockConfig+0x358>)
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	4917      	ldr	r1, [pc, #92]	@ (8007050 <HAL_RCC_ClockConfig+0x358>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ff8:	f000 f834 	bl	8007064 <HAL_RCC_GetSysClockFreq>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	4b14      	ldr	r3, [pc, #80]	@ (8007050 <HAL_RCC_ClockConfig+0x358>)
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	0a1b      	lsrs	r3, r3, #8
 8007004:	f003 030f 	and.w	r3, r3, #15
 8007008:	4912      	ldr	r1, [pc, #72]	@ (8007054 <HAL_RCC_ClockConfig+0x35c>)
 800700a:	5ccb      	ldrb	r3, [r1, r3]
 800700c:	f003 031f 	and.w	r3, r3, #31
 8007010:	fa22 f303 	lsr.w	r3, r2, r3
 8007014:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007016:	4b0e      	ldr	r3, [pc, #56]	@ (8007050 <HAL_RCC_ClockConfig+0x358>)
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	f003 030f 	and.w	r3, r3, #15
 800701e:	4a0d      	ldr	r2, [pc, #52]	@ (8007054 <HAL_RCC_ClockConfig+0x35c>)
 8007020:	5cd3      	ldrb	r3, [r2, r3]
 8007022:	f003 031f 	and.w	r3, r3, #31
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	fa22 f303 	lsr.w	r3, r2, r3
 800702c:	4a0a      	ldr	r2, [pc, #40]	@ (8007058 <HAL_RCC_ClockConfig+0x360>)
 800702e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007030:	4a0a      	ldr	r2, [pc, #40]	@ (800705c <HAL_RCC_ClockConfig+0x364>)
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007036:	4b0a      	ldr	r3, [pc, #40]	@ (8007060 <HAL_RCC_ClockConfig+0x368>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f7fa fa3e 	bl	80014bc <HAL_InitTick>
 8007040:	4603      	mov	r3, r0
 8007042:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007044:	7bfb      	ldrb	r3, [r7, #15]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3718      	adds	r7, #24
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	58024400 	.word	0x58024400
 8007054:	0800f434 	.word	0x0800f434
 8007058:	24000004 	.word	0x24000004
 800705c:	24000000 	.word	0x24000000
 8007060:	24000020 	.word	0x24000020

08007064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007064:	b480      	push	{r7}
 8007066:	b089      	sub	sp, #36	@ 0x24
 8007068:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800706a:	4bb3      	ldr	r3, [pc, #716]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007072:	2b18      	cmp	r3, #24
 8007074:	f200 8155 	bhi.w	8007322 <HAL_RCC_GetSysClockFreq+0x2be>
 8007078:	a201      	add	r2, pc, #4	@ (adr r2, 8007080 <HAL_RCC_GetSysClockFreq+0x1c>)
 800707a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707e:	bf00      	nop
 8007080:	080070e5 	.word	0x080070e5
 8007084:	08007323 	.word	0x08007323
 8007088:	08007323 	.word	0x08007323
 800708c:	08007323 	.word	0x08007323
 8007090:	08007323 	.word	0x08007323
 8007094:	08007323 	.word	0x08007323
 8007098:	08007323 	.word	0x08007323
 800709c:	08007323 	.word	0x08007323
 80070a0:	0800710b 	.word	0x0800710b
 80070a4:	08007323 	.word	0x08007323
 80070a8:	08007323 	.word	0x08007323
 80070ac:	08007323 	.word	0x08007323
 80070b0:	08007323 	.word	0x08007323
 80070b4:	08007323 	.word	0x08007323
 80070b8:	08007323 	.word	0x08007323
 80070bc:	08007323 	.word	0x08007323
 80070c0:	08007111 	.word	0x08007111
 80070c4:	08007323 	.word	0x08007323
 80070c8:	08007323 	.word	0x08007323
 80070cc:	08007323 	.word	0x08007323
 80070d0:	08007323 	.word	0x08007323
 80070d4:	08007323 	.word	0x08007323
 80070d8:	08007323 	.word	0x08007323
 80070dc:	08007323 	.word	0x08007323
 80070e0:	08007117 	.word	0x08007117
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070e4:	4b94      	ldr	r3, [pc, #592]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0320 	and.w	r3, r3, #32
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d009      	beq.n	8007104 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070f0:	4b91      	ldr	r3, [pc, #580]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	08db      	lsrs	r3, r3, #3
 80070f6:	f003 0303 	and.w	r3, r3, #3
 80070fa:	4a90      	ldr	r2, [pc, #576]	@ (800733c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007100:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007102:	e111      	b.n	8007328 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007104:	4b8d      	ldr	r3, [pc, #564]	@ (800733c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007106:	61bb      	str	r3, [r7, #24]
      break;
 8007108:	e10e      	b.n	8007328 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800710a:	4b8d      	ldr	r3, [pc, #564]	@ (8007340 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800710c:	61bb      	str	r3, [r7, #24]
      break;
 800710e:	e10b      	b.n	8007328 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007110:	4b8c      	ldr	r3, [pc, #560]	@ (8007344 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007112:	61bb      	str	r3, [r7, #24]
      break;
 8007114:	e108      	b.n	8007328 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007116:	4b88      	ldr	r3, [pc, #544]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800711a:	f003 0303 	and.w	r3, r3, #3
 800711e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007120:	4b85      	ldr	r3, [pc, #532]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007124:	091b      	lsrs	r3, r3, #4
 8007126:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800712a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800712c:	4b82      	ldr	r3, [pc, #520]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800712e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007136:	4b80      	ldr	r3, [pc, #512]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800713a:	08db      	lsrs	r3, r3, #3
 800713c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	fb02 f303 	mul.w	r3, r2, r3
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800714e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 80e1 	beq.w	800731c <HAL_RCC_GetSysClockFreq+0x2b8>
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2b02      	cmp	r3, #2
 800715e:	f000 8083 	beq.w	8007268 <HAL_RCC_GetSysClockFreq+0x204>
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	2b02      	cmp	r3, #2
 8007166:	f200 80a1 	bhi.w	80072ac <HAL_RCC_GetSysClockFreq+0x248>
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <HAL_RCC_GetSysClockFreq+0x114>
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d056      	beq.n	8007224 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007176:	e099      	b.n	80072ac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007178:	4b6f      	ldr	r3, [pc, #444]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0320 	and.w	r3, r3, #32
 8007180:	2b00      	cmp	r3, #0
 8007182:	d02d      	beq.n	80071e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007184:	4b6c      	ldr	r3, [pc, #432]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	08db      	lsrs	r3, r3, #3
 800718a:	f003 0303 	and.w	r3, r3, #3
 800718e:	4a6b      	ldr	r2, [pc, #428]	@ (800733c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007190:	fa22 f303 	lsr.w	r3, r2, r3
 8007194:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	ee07 3a90 	vmov	s15, r3
 800719c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ae:	4b62      	ldr	r3, [pc, #392]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b6:	ee07 3a90 	vmov	s15, r3
 80071ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071be:	ed97 6a02 	vldr	s12, [r7, #8]
 80071c2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007348 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80071de:	e087      	b.n	80072f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	ee07 3a90 	vmov	s15, r3
 80071e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800734c <HAL_RCC_GetSysClockFreq+0x2e8>
 80071ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071f2:	4b51      	ldr	r3, [pc, #324]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007202:	ed97 6a02 	vldr	s12, [r7, #8]
 8007206:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007348 <HAL_RCC_GetSysClockFreq+0x2e4>
 800720a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800720e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800721a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800721e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007222:	e065      	b.n	80072f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	ee07 3a90 	vmov	s15, r3
 800722a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800722e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007350 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007236:	4b40      	ldr	r3, [pc, #256]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800723a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007246:	ed97 6a02 	vldr	s12, [r7, #8]
 800724a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007348 <HAL_RCC_GetSysClockFreq+0x2e4>
 800724e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800725a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800725e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007262:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007266:	e043      	b.n	80072f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	ee07 3a90 	vmov	s15, r3
 800726e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007272:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007354 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800727a:	4b2f      	ldr	r3, [pc, #188]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800727c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800727e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007282:	ee07 3a90 	vmov	s15, r3
 8007286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800728a:	ed97 6a02 	vldr	s12, [r7, #8]
 800728e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007348 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800729a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800729e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80072aa:	e021      	b.n	80072f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007350 <HAL_RCC_GetSysClockFreq+0x2ec>
 80072ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072be:	4b1e      	ldr	r3, [pc, #120]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c6:	ee07 3a90 	vmov	s15, r3
 80072ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80072d2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007348 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80072ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80072f0:	4b11      	ldr	r3, [pc, #68]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f4:	0a5b      	lsrs	r3, r3, #9
 80072f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072fa:	3301      	adds	r3, #1
 80072fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	ee07 3a90 	vmov	s15, r3
 8007304:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007308:	edd7 6a07 	vldr	s13, [r7, #28]
 800730c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007314:	ee17 3a90 	vmov	r3, s15
 8007318:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800731a:	e005      	b.n	8007328 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800731c:	2300      	movs	r3, #0
 800731e:	61bb      	str	r3, [r7, #24]
      break;
 8007320:	e002      	b.n	8007328 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007322:	4b07      	ldr	r3, [pc, #28]	@ (8007340 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007324:	61bb      	str	r3, [r7, #24]
      break;
 8007326:	bf00      	nop
  }

  return sysclockfreq;
 8007328:	69bb      	ldr	r3, [r7, #24]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3724      	adds	r7, #36	@ 0x24
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	58024400 	.word	0x58024400
 800733c:	03d09000 	.word	0x03d09000
 8007340:	003d0900 	.word	0x003d0900
 8007344:	007a1200 	.word	0x007a1200
 8007348:	46000000 	.word	0x46000000
 800734c:	4c742400 	.word	0x4c742400
 8007350:	4a742400 	.word	0x4a742400
 8007354:	4af42400 	.word	0x4af42400

08007358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800735e:	f7ff fe81 	bl	8007064 <HAL_RCC_GetSysClockFreq>
 8007362:	4602      	mov	r2, r0
 8007364:	4b10      	ldr	r3, [pc, #64]	@ (80073a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	0a1b      	lsrs	r3, r3, #8
 800736a:	f003 030f 	and.w	r3, r3, #15
 800736e:	490f      	ldr	r1, [pc, #60]	@ (80073ac <HAL_RCC_GetHCLKFreq+0x54>)
 8007370:	5ccb      	ldrb	r3, [r1, r3]
 8007372:	f003 031f 	and.w	r3, r3, #31
 8007376:	fa22 f303 	lsr.w	r3, r2, r3
 800737a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800737c:	4b0a      	ldr	r3, [pc, #40]	@ (80073a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	f003 030f 	and.w	r3, r3, #15
 8007384:	4a09      	ldr	r2, [pc, #36]	@ (80073ac <HAL_RCC_GetHCLKFreq+0x54>)
 8007386:	5cd3      	ldrb	r3, [r2, r3]
 8007388:	f003 031f 	and.w	r3, r3, #31
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	fa22 f303 	lsr.w	r3, r2, r3
 8007392:	4a07      	ldr	r2, [pc, #28]	@ (80073b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8007394:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007396:	4a07      	ldr	r2, [pc, #28]	@ (80073b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800739c:	4b04      	ldr	r3, [pc, #16]	@ (80073b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800739e:	681b      	ldr	r3, [r3, #0]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	58024400 	.word	0x58024400
 80073ac:	0800f434 	.word	0x0800f434
 80073b0:	24000004 	.word	0x24000004
 80073b4:	24000000 	.word	0x24000000

080073b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80073bc:	f7ff ffcc 	bl	8007358 <HAL_RCC_GetHCLKFreq>
 80073c0:	4602      	mov	r2, r0
 80073c2:	4b06      	ldr	r3, [pc, #24]	@ (80073dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	091b      	lsrs	r3, r3, #4
 80073c8:	f003 0307 	and.w	r3, r3, #7
 80073cc:	4904      	ldr	r1, [pc, #16]	@ (80073e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80073ce:	5ccb      	ldrb	r3, [r1, r3]
 80073d0:	f003 031f 	and.w	r3, r3, #31
 80073d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80073d8:	4618      	mov	r0, r3
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	58024400 	.word	0x58024400
 80073e0:	0800f434 	.word	0x0800f434

080073e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80073e8:	f7ff ffb6 	bl	8007358 <HAL_RCC_GetHCLKFreq>
 80073ec:	4602      	mov	r2, r0
 80073ee:	4b06      	ldr	r3, [pc, #24]	@ (8007408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	0a1b      	lsrs	r3, r3, #8
 80073f4:	f003 0307 	and.w	r3, r3, #7
 80073f8:	4904      	ldr	r1, [pc, #16]	@ (800740c <HAL_RCC_GetPCLK2Freq+0x28>)
 80073fa:	5ccb      	ldrb	r3, [r1, r3]
 80073fc:	f003 031f 	and.w	r3, r3, #31
 8007400:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007404:	4618      	mov	r0, r3
 8007406:	bd80      	pop	{r7, pc}
 8007408:	58024400 	.word	0x58024400
 800740c:	0800f434 	.word	0x0800f434

08007410 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	223f      	movs	r2, #63	@ 0x3f
 800741e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007420:	4b1a      	ldr	r3, [pc, #104]	@ (800748c <HAL_RCC_GetClockConfig+0x7c>)
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	f003 0207 	and.w	r2, r3, #7
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800742c:	4b17      	ldr	r3, [pc, #92]	@ (800748c <HAL_RCC_GetClockConfig+0x7c>)
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007438:	4b14      	ldr	r3, [pc, #80]	@ (800748c <HAL_RCC_GetClockConfig+0x7c>)
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	f003 020f 	and.w	r2, r3, #15
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007444:	4b11      	ldr	r3, [pc, #68]	@ (800748c <HAL_RCC_GetClockConfig+0x7c>)
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007450:	4b0e      	ldr	r3, [pc, #56]	@ (800748c <HAL_RCC_GetClockConfig+0x7c>)
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800745c:	4b0b      	ldr	r3, [pc, #44]	@ (800748c <HAL_RCC_GetClockConfig+0x7c>)
 800745e:	69db      	ldr	r3, [r3, #28]
 8007460:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007468:	4b08      	ldr	r3, [pc, #32]	@ (800748c <HAL_RCC_GetClockConfig+0x7c>)
 800746a:	6a1b      	ldr	r3, [r3, #32]
 800746c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007474:	4b06      	ldr	r3, [pc, #24]	@ (8007490 <HAL_RCC_GetClockConfig+0x80>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 020f 	and.w	r2, r3, #15
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	601a      	str	r2, [r3, #0]
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	58024400 	.word	0x58024400
 8007490:	52002000 	.word	0x52002000

08007494 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007498:	b0ca      	sub	sp, #296	@ 0x128
 800749a:	af00      	add	r7, sp, #0
 800749c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80074a0:	2300      	movs	r3, #0
 80074a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80074a6:	2300      	movs	r3, #0
 80074a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80074b8:	2500      	movs	r5, #0
 80074ba:	ea54 0305 	orrs.w	r3, r4, r5
 80074be:	d049      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80074c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074ca:	d02f      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80074cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074d0:	d828      	bhi.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80074d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074d6:	d01a      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80074d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074dc:	d822      	bhi.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80074e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074e6:	d007      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80074e8:	e01c      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074ea:	4bb8      	ldr	r3, [pc, #736]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ee:	4ab7      	ldr	r2, [pc, #732]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80074f6:	e01a      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80074f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074fc:	3308      	adds	r3, #8
 80074fe:	2102      	movs	r1, #2
 8007500:	4618      	mov	r0, r3
 8007502:	f001 fc8f 	bl	8008e24 <RCCEx_PLL2_Config>
 8007506:	4603      	mov	r3, r0
 8007508:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800750c:	e00f      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800750e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007512:	3328      	adds	r3, #40	@ 0x28
 8007514:	2102      	movs	r1, #2
 8007516:	4618      	mov	r0, r3
 8007518:	f001 fd36 	bl	8008f88 <RCCEx_PLL3_Config>
 800751c:	4603      	mov	r3, r0
 800751e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007522:	e004      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800752a:	e000      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800752c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800752e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10a      	bne.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007536:	4ba5      	ldr	r3, [pc, #660]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800753a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800753e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007542:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007544:	4aa1      	ldr	r2, [pc, #644]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007546:	430b      	orrs	r3, r1
 8007548:	6513      	str	r3, [r2, #80]	@ 0x50
 800754a:	e003      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800754c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007550:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007560:	f04f 0900 	mov.w	r9, #0
 8007564:	ea58 0309 	orrs.w	r3, r8, r9
 8007568:	d047      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800756a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800756e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007570:	2b04      	cmp	r3, #4
 8007572:	d82a      	bhi.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007574:	a201      	add	r2, pc, #4	@ (adr r2, 800757c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757a:	bf00      	nop
 800757c:	08007591 	.word	0x08007591
 8007580:	0800759f 	.word	0x0800759f
 8007584:	080075b5 	.word	0x080075b5
 8007588:	080075d3 	.word	0x080075d3
 800758c:	080075d3 	.word	0x080075d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007590:	4b8e      	ldr	r3, [pc, #568]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007594:	4a8d      	ldr	r2, [pc, #564]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800759a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800759c:	e01a      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800759e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a2:	3308      	adds	r3, #8
 80075a4:	2100      	movs	r1, #0
 80075a6:	4618      	mov	r0, r3
 80075a8:	f001 fc3c 	bl	8008e24 <RCCEx_PLL2_Config>
 80075ac:	4603      	mov	r3, r0
 80075ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075b2:	e00f      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b8:	3328      	adds	r3, #40	@ 0x28
 80075ba:	2100      	movs	r1, #0
 80075bc:	4618      	mov	r0, r3
 80075be:	f001 fce3 	bl	8008f88 <RCCEx_PLL3_Config>
 80075c2:	4603      	mov	r3, r0
 80075c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075c8:	e004      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075d0:	e000      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80075d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10a      	bne.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075dc:	4b7b      	ldr	r3, [pc, #492]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075e0:	f023 0107 	bic.w	r1, r3, #7
 80075e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075ea:	4a78      	ldr	r2, [pc, #480]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075ec:	430b      	orrs	r3, r1
 80075ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80075f0:	e003      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80075fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007602:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007606:	f04f 0b00 	mov.w	fp, #0
 800760a:	ea5a 030b 	orrs.w	r3, sl, fp
 800760e:	d04c      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007616:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800761a:	d030      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800761c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007620:	d829      	bhi.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007622:	2bc0      	cmp	r3, #192	@ 0xc0
 8007624:	d02d      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007626:	2bc0      	cmp	r3, #192	@ 0xc0
 8007628:	d825      	bhi.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800762a:	2b80      	cmp	r3, #128	@ 0x80
 800762c:	d018      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800762e:	2b80      	cmp	r3, #128	@ 0x80
 8007630:	d821      	bhi.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007632:	2b00      	cmp	r3, #0
 8007634:	d002      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007636:	2b40      	cmp	r3, #64	@ 0x40
 8007638:	d007      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800763a:	e01c      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800763c:	4b63      	ldr	r3, [pc, #396]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800763e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007640:	4a62      	ldr	r2, [pc, #392]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007642:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007646:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007648:	e01c      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800764a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764e:	3308      	adds	r3, #8
 8007650:	2100      	movs	r1, #0
 8007652:	4618      	mov	r0, r3
 8007654:	f001 fbe6 	bl	8008e24 <RCCEx_PLL2_Config>
 8007658:	4603      	mov	r3, r0
 800765a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800765e:	e011      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007664:	3328      	adds	r3, #40	@ 0x28
 8007666:	2100      	movs	r1, #0
 8007668:	4618      	mov	r0, r3
 800766a:	f001 fc8d 	bl	8008f88 <RCCEx_PLL3_Config>
 800766e:	4603      	mov	r3, r0
 8007670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007674:	e006      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800767c:	e002      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800767e:	bf00      	nop
 8007680:	e000      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007682:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10a      	bne.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800768c:	4b4f      	ldr	r3, [pc, #316]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800768e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007690:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800769a:	4a4c      	ldr	r2, [pc, #304]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800769c:	430b      	orrs	r3, r1
 800769e:	6513      	str	r3, [r2, #80]	@ 0x50
 80076a0:	e003      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80076aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80076b6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80076ba:	2300      	movs	r3, #0
 80076bc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80076c0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80076c4:	460b      	mov	r3, r1
 80076c6:	4313      	orrs	r3, r2
 80076c8:	d053      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80076ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80076d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076d6:	d035      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80076d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076dc:	d82e      	bhi.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80076de:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80076e2:	d031      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80076e4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80076e8:	d828      	bhi.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80076ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076ee:	d01a      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80076f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076f4:	d822      	bhi.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d003      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80076fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076fe:	d007      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007700:	e01c      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007702:	4b32      	ldr	r3, [pc, #200]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007706:	4a31      	ldr	r2, [pc, #196]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800770c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800770e:	e01c      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007714:	3308      	adds	r3, #8
 8007716:	2100      	movs	r1, #0
 8007718:	4618      	mov	r0, r3
 800771a:	f001 fb83 	bl	8008e24 <RCCEx_PLL2_Config>
 800771e:	4603      	mov	r3, r0
 8007720:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007724:	e011      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772a:	3328      	adds	r3, #40	@ 0x28
 800772c:	2100      	movs	r1, #0
 800772e:	4618      	mov	r0, r3
 8007730:	f001 fc2a 	bl	8008f88 <RCCEx_PLL3_Config>
 8007734:	4603      	mov	r3, r0
 8007736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800773a:	e006      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007742:	e002      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007744:	bf00      	nop
 8007746:	e000      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800774a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10b      	bne.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007752:	4b1e      	ldr	r3, [pc, #120]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007756:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800775a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800775e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007762:	4a1a      	ldr	r2, [pc, #104]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007764:	430b      	orrs	r3, r1
 8007766:	6593      	str	r3, [r2, #88]	@ 0x58
 8007768:	e003      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800776a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800776e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800777e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007782:	2300      	movs	r3, #0
 8007784:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007788:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800778c:	460b      	mov	r3, r1
 800778e:	4313      	orrs	r3, r2
 8007790:	d056      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007796:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800779a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800779e:	d038      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80077a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077a4:	d831      	bhi.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80077a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80077aa:	d034      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80077ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80077b0:	d82b      	bhi.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80077b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077b6:	d01d      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80077b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077bc:	d825      	bhi.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d006      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80077c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077c6:	d00a      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80077c8:	e01f      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80077ca:	bf00      	nop
 80077cc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077d0:	4ba2      	ldr	r3, [pc, #648]	@ (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d4:	4aa1      	ldr	r2, [pc, #644]	@ (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077dc:	e01c      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e2:	3308      	adds	r3, #8
 80077e4:	2100      	movs	r1, #0
 80077e6:	4618      	mov	r0, r3
 80077e8:	f001 fb1c 	bl	8008e24 <RCCEx_PLL2_Config>
 80077ec:	4603      	mov	r3, r0
 80077ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80077f2:	e011      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f8:	3328      	adds	r3, #40	@ 0x28
 80077fa:	2100      	movs	r1, #0
 80077fc:	4618      	mov	r0, r3
 80077fe:	f001 fbc3 	bl	8008f88 <RCCEx_PLL3_Config>
 8007802:	4603      	mov	r3, r0
 8007804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007808:	e006      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007810:	e002      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007812:	bf00      	nop
 8007814:	e000      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10b      	bne.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007820:	4b8e      	ldr	r3, [pc, #568]	@ (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007824:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800782c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007830:	4a8a      	ldr	r2, [pc, #552]	@ (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007832:	430b      	orrs	r3, r1
 8007834:	6593      	str	r3, [r2, #88]	@ 0x58
 8007836:	e003      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007838:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800783c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007848:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800784c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007850:	2300      	movs	r3, #0
 8007852:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007856:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800785a:	460b      	mov	r3, r1
 800785c:	4313      	orrs	r3, r2
 800785e:	d03a      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007866:	2b30      	cmp	r3, #48	@ 0x30
 8007868:	d01f      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x416>
 800786a:	2b30      	cmp	r3, #48	@ 0x30
 800786c:	d819      	bhi.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800786e:	2b20      	cmp	r3, #32
 8007870:	d00c      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007872:	2b20      	cmp	r3, #32
 8007874:	d815      	bhi.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007876:	2b00      	cmp	r3, #0
 8007878:	d019      	beq.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800787a:	2b10      	cmp	r3, #16
 800787c:	d111      	bne.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800787e:	4b77      	ldr	r3, [pc, #476]	@ (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007882:	4a76      	ldr	r2, [pc, #472]	@ (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007888:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800788a:	e011      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800788c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007890:	3308      	adds	r3, #8
 8007892:	2102      	movs	r1, #2
 8007894:	4618      	mov	r0, r3
 8007896:	f001 fac5 	bl	8008e24 <RCCEx_PLL2_Config>
 800789a:	4603      	mov	r3, r0
 800789c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80078a0:	e006      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078a8:	e002      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80078aa:	bf00      	nop
 80078ac:	e000      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80078ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10a      	bne.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80078b8:	4b68      	ldr	r3, [pc, #416]	@ (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078bc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80078c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078c6:	4a65      	ldr	r2, [pc, #404]	@ (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078c8:	430b      	orrs	r3, r1
 80078ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80078cc:	e003      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80078d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80078e2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80078e6:	2300      	movs	r3, #0
 80078e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80078ec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4313      	orrs	r3, r2
 80078f4:	d051      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80078f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007900:	d035      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007902:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007906:	d82e      	bhi.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007908:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800790c:	d031      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800790e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007912:	d828      	bhi.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007914:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007918:	d01a      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800791a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800791e:	d822      	bhi.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007920:	2b00      	cmp	r3, #0
 8007922:	d003      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007924:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007928:	d007      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800792a:	e01c      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800792c:	4b4b      	ldr	r3, [pc, #300]	@ (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800792e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007930:	4a4a      	ldr	r2, [pc, #296]	@ (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007936:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007938:	e01c      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800793a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800793e:	3308      	adds	r3, #8
 8007940:	2100      	movs	r1, #0
 8007942:	4618      	mov	r0, r3
 8007944:	f001 fa6e 	bl	8008e24 <RCCEx_PLL2_Config>
 8007948:	4603      	mov	r3, r0
 800794a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800794e:	e011      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007954:	3328      	adds	r3, #40	@ 0x28
 8007956:	2100      	movs	r1, #0
 8007958:	4618      	mov	r0, r3
 800795a:	f001 fb15 	bl	8008f88 <RCCEx_PLL3_Config>
 800795e:	4603      	mov	r3, r0
 8007960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007964:	e006      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800796c:	e002      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800796e:	bf00      	nop
 8007970:	e000      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10a      	bne.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800797c:	4b37      	ldr	r3, [pc, #220]	@ (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800797e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007980:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800798a:	4a34      	ldr	r2, [pc, #208]	@ (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800798c:	430b      	orrs	r3, r1
 800798e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007990:	e003      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007996:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800799a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80079a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80079aa:	2300      	movs	r3, #0
 80079ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80079b0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80079b4:	460b      	mov	r3, r1
 80079b6:	4313      	orrs	r3, r2
 80079b8:	d056      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80079ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079c4:	d033      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80079c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079ca:	d82c      	bhi.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80079cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80079d0:	d02f      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80079d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80079d6:	d826      	bhi.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80079d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80079dc:	d02b      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80079de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80079e2:	d820      	bhi.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80079e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079e8:	d012      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80079ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079ee:	d81a      	bhi.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d022      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80079f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079f8:	d115      	bne.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079fe:	3308      	adds	r3, #8
 8007a00:	2101      	movs	r1, #1
 8007a02:	4618      	mov	r0, r3
 8007a04:	f001 fa0e 	bl	8008e24 <RCCEx_PLL2_Config>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a0e:	e015      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a14:	3328      	adds	r3, #40	@ 0x28
 8007a16:	2101      	movs	r1, #1
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f001 fab5 	bl	8008f88 <RCCEx_PLL3_Config>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a24:	e00a      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a2c:	e006      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007a2e:	bf00      	nop
 8007a30:	e004      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007a32:	bf00      	nop
 8007a34:	e002      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007a36:	bf00      	nop
 8007a38:	e000      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007a3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10d      	bne.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007a44:	4b05      	ldr	r3, [pc, #20]	@ (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a48:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a52:	4a02      	ldr	r2, [pc, #8]	@ (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a54:	430b      	orrs	r3, r1
 8007a56:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a58:	e006      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007a5a:	bf00      	nop
 8007a5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a70:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007a74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007a78:	2300      	movs	r3, #0
 8007a7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a7e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007a82:	460b      	mov	r3, r1
 8007a84:	4313      	orrs	r3, r2
 8007a86:	d055      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a94:	d033      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a9a:	d82c      	bhi.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aa0:	d02f      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aa6:	d826      	bhi.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007aa8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007aac:	d02b      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007aae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ab2:	d820      	bhi.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ab4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ab8:	d012      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007aba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007abe:	d81a      	bhi.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d022      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007ac4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ac8:	d115      	bne.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ace:	3308      	adds	r3, #8
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f001 f9a6 	bl	8008e24 <RCCEx_PLL2_Config>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007ade:	e015      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae4:	3328      	adds	r3, #40	@ 0x28
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f001 fa4d 	bl	8008f88 <RCCEx_PLL3_Config>
 8007aee:	4603      	mov	r3, r0
 8007af0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007af4:	e00a      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007afc:	e006      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007afe:	bf00      	nop
 8007b00:	e004      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b02:	bf00      	nop
 8007b04:	e002      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b06:	bf00      	nop
 8007b08:	e000      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10b      	bne.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b14:	4ba3      	ldr	r3, [pc, #652]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b18:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b24:	4a9f      	ldr	r2, [pc, #636]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b26:	430b      	orrs	r3, r1
 8007b28:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b2a:	e003      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007b40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b44:	2300      	movs	r3, #0
 8007b46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007b4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007b4e:	460b      	mov	r3, r1
 8007b50:	4313      	orrs	r3, r2
 8007b52:	d037      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b5e:	d00e      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007b60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b64:	d816      	bhi.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d018      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007b6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b6e:	d111      	bne.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b70:	4b8c      	ldr	r3, [pc, #560]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b74:	4a8b      	ldr	r2, [pc, #556]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007b7c:	e00f      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b82:	3308      	adds	r3, #8
 8007b84:	2101      	movs	r1, #1
 8007b86:	4618      	mov	r0, r3
 8007b88:	f001 f94c 	bl	8008e24 <RCCEx_PLL2_Config>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007b92:	e004      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b9a:	e000      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10a      	bne.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ba6:	4b7f      	ldr	r3, [pc, #508]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007baa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bb4:	4a7b      	ldr	r2, [pc, #492]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bb6:	430b      	orrs	r3, r1
 8007bb8:	6513      	str	r3, [r2, #80]	@ 0x50
 8007bba:	e003      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007bda:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007bde:	460b      	mov	r3, r1
 8007be0:	4313      	orrs	r3, r2
 8007be2:	d039      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d81c      	bhi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007bee:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf4:	08007c31 	.word	0x08007c31
 8007bf8:	08007c05 	.word	0x08007c05
 8007bfc:	08007c13 	.word	0x08007c13
 8007c00:	08007c31 	.word	0x08007c31
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c04:	4b67      	ldr	r3, [pc, #412]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c08:	4a66      	ldr	r2, [pc, #408]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c10:	e00f      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c16:	3308      	adds	r3, #8
 8007c18:	2102      	movs	r1, #2
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f001 f902 	bl	8008e24 <RCCEx_PLL2_Config>
 8007c20:	4603      	mov	r3, r0
 8007c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c26:	e004      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c2e:	e000      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10a      	bne.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007c3a:	4b5a      	ldr	r3, [pc, #360]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c3e:	f023 0103 	bic.w	r1, r3, #3
 8007c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c48:	4a56      	ldr	r2, [pc, #344]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c4a:	430b      	orrs	r3, r1
 8007c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007c4e:	e003      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c60:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007c64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007c6e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007c72:	460b      	mov	r3, r1
 8007c74:	4313      	orrs	r3, r2
 8007c76:	f000 809f 	beq.w	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a4a      	ldr	r2, [pc, #296]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007c80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c86:	f7fa faf1 	bl	800226c <HAL_GetTick>
 8007c8a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c8e:	e00b      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c90:	f7fa faec 	bl	800226c <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	2b64      	cmp	r3, #100	@ 0x64
 8007c9e:	d903      	bls.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ca6:	e005      	b.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ca8:	4b3f      	ldr	r3, [pc, #252]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d0ed      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d179      	bne.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007cbc:	4b39      	ldr	r3, [pc, #228]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cbe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007cc8:	4053      	eors	r3, r2
 8007cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d015      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007cd2:	4b34      	ldr	r3, [pc, #208]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cda:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007cde:	4b31      	ldr	r3, [pc, #196]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ce2:	4a30      	ldr	r2, [pc, #192]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ce8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007cea:	4b2e      	ldr	r3, [pc, #184]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cee:	4a2d      	ldr	r2, [pc, #180]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cf4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007cf6:	4a2b      	ldr	r2, [pc, #172]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007cfc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d0a:	d118      	bne.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d0c:	f7fa faae 	bl	800226c <HAL_GetTick>
 8007d10:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d14:	e00d      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d16:	f7fa faa9 	bl	800226c <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007d20:	1ad2      	subs	r2, r2, r3
 8007d22:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d903      	bls.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007d30:	e005      	b.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d32:	4b1c      	ldr	r3, [pc, #112]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d36:	f003 0302 	and.w	r3, r3, #2
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d0eb      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d129      	bne.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d56:	d10e      	bne.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007d58:	4b12      	ldr	r3, [pc, #72]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d68:	091a      	lsrs	r2, r3, #4
 8007d6a:	4b10      	ldr	r3, [pc, #64]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	4a0d      	ldr	r2, [pc, #52]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d70:	430b      	orrs	r3, r1
 8007d72:	6113      	str	r3, [r2, #16]
 8007d74:	e005      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007d76:	4b0b      	ldr	r3, [pc, #44]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d7c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007d80:	6113      	str	r3, [r2, #16]
 8007d82:	4b08      	ldr	r3, [pc, #32]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d84:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d92:	4a04      	ldr	r2, [pc, #16]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d94:	430b      	orrs	r3, r1
 8007d96:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d98:	e00e      	b.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007da2:	e009      	b.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007da4:	58024400 	.word	0x58024400
 8007da8:	58024800 	.word	0x58024800
 8007dac:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007db4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc0:	f002 0301 	and.w	r3, r2, #1
 8007dc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007dc8:	2300      	movs	r3, #0
 8007dca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007dce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	f000 8089 	beq.w	8007eec <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007de0:	2b28      	cmp	r3, #40	@ 0x28
 8007de2:	d86b      	bhi.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007de4:	a201      	add	r2, pc, #4	@ (adr r2, 8007dec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dea:	bf00      	nop
 8007dec:	08007ec5 	.word	0x08007ec5
 8007df0:	08007ebd 	.word	0x08007ebd
 8007df4:	08007ebd 	.word	0x08007ebd
 8007df8:	08007ebd 	.word	0x08007ebd
 8007dfc:	08007ebd 	.word	0x08007ebd
 8007e00:	08007ebd 	.word	0x08007ebd
 8007e04:	08007ebd 	.word	0x08007ebd
 8007e08:	08007ebd 	.word	0x08007ebd
 8007e0c:	08007e91 	.word	0x08007e91
 8007e10:	08007ebd 	.word	0x08007ebd
 8007e14:	08007ebd 	.word	0x08007ebd
 8007e18:	08007ebd 	.word	0x08007ebd
 8007e1c:	08007ebd 	.word	0x08007ebd
 8007e20:	08007ebd 	.word	0x08007ebd
 8007e24:	08007ebd 	.word	0x08007ebd
 8007e28:	08007ebd 	.word	0x08007ebd
 8007e2c:	08007ea7 	.word	0x08007ea7
 8007e30:	08007ebd 	.word	0x08007ebd
 8007e34:	08007ebd 	.word	0x08007ebd
 8007e38:	08007ebd 	.word	0x08007ebd
 8007e3c:	08007ebd 	.word	0x08007ebd
 8007e40:	08007ebd 	.word	0x08007ebd
 8007e44:	08007ebd 	.word	0x08007ebd
 8007e48:	08007ebd 	.word	0x08007ebd
 8007e4c:	08007ec5 	.word	0x08007ec5
 8007e50:	08007ebd 	.word	0x08007ebd
 8007e54:	08007ebd 	.word	0x08007ebd
 8007e58:	08007ebd 	.word	0x08007ebd
 8007e5c:	08007ebd 	.word	0x08007ebd
 8007e60:	08007ebd 	.word	0x08007ebd
 8007e64:	08007ebd 	.word	0x08007ebd
 8007e68:	08007ebd 	.word	0x08007ebd
 8007e6c:	08007ec5 	.word	0x08007ec5
 8007e70:	08007ebd 	.word	0x08007ebd
 8007e74:	08007ebd 	.word	0x08007ebd
 8007e78:	08007ebd 	.word	0x08007ebd
 8007e7c:	08007ebd 	.word	0x08007ebd
 8007e80:	08007ebd 	.word	0x08007ebd
 8007e84:	08007ebd 	.word	0x08007ebd
 8007e88:	08007ebd 	.word	0x08007ebd
 8007e8c:	08007ec5 	.word	0x08007ec5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e94:	3308      	adds	r3, #8
 8007e96:	2101      	movs	r1, #1
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f000 ffc3 	bl	8008e24 <RCCEx_PLL2_Config>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007ea4:	e00f      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eaa:	3328      	adds	r3, #40	@ 0x28
 8007eac:	2101      	movs	r1, #1
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f001 f86a 	bl	8008f88 <RCCEx_PLL3_Config>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007eba:	e004      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ec2:	e000      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10a      	bne.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007ece:	4bbf      	ldr	r3, [pc, #764]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ed2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007edc:	4abb      	ldr	r2, [pc, #748]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ede:	430b      	orrs	r3, r1
 8007ee0:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ee2:	e003      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ee8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef4:	f002 0302 	and.w	r3, r2, #2
 8007ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007efc:	2300      	movs	r3, #0
 8007efe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007f02:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007f06:	460b      	mov	r3, r1
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	d041      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f12:	2b05      	cmp	r3, #5
 8007f14:	d824      	bhi.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007f16:	a201      	add	r2, pc, #4	@ (adr r2, 8007f1c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1c:	08007f69 	.word	0x08007f69
 8007f20:	08007f35 	.word	0x08007f35
 8007f24:	08007f4b 	.word	0x08007f4b
 8007f28:	08007f69 	.word	0x08007f69
 8007f2c:	08007f69 	.word	0x08007f69
 8007f30:	08007f69 	.word	0x08007f69
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f38:	3308      	adds	r3, #8
 8007f3a:	2101      	movs	r1, #1
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f000 ff71 	bl	8008e24 <RCCEx_PLL2_Config>
 8007f42:	4603      	mov	r3, r0
 8007f44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007f48:	e00f      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4e:	3328      	adds	r3, #40	@ 0x28
 8007f50:	2101      	movs	r1, #1
 8007f52:	4618      	mov	r0, r3
 8007f54:	f001 f818 	bl	8008f88 <RCCEx_PLL3_Config>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007f5e:	e004      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f66:	e000      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10a      	bne.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007f72:	4b96      	ldr	r3, [pc, #600]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f76:	f023 0107 	bic.w	r1, r3, #7
 8007f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f80:	4a92      	ldr	r2, [pc, #584]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f82:	430b      	orrs	r3, r1
 8007f84:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f86:	e003      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f98:	f002 0304 	and.w	r3, r2, #4
 8007f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007fa6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4313      	orrs	r3, r2
 8007fae:	d044      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fb8:	2b05      	cmp	r3, #5
 8007fba:	d825      	bhi.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc2:	bf00      	nop
 8007fc4:	08008011 	.word	0x08008011
 8007fc8:	08007fdd 	.word	0x08007fdd
 8007fcc:	08007ff3 	.word	0x08007ff3
 8007fd0:	08008011 	.word	0x08008011
 8007fd4:	08008011 	.word	0x08008011
 8007fd8:	08008011 	.word	0x08008011
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe0:	3308      	adds	r3, #8
 8007fe2:	2101      	movs	r1, #1
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 ff1d 	bl	8008e24 <RCCEx_PLL2_Config>
 8007fea:	4603      	mov	r3, r0
 8007fec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007ff0:	e00f      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff6:	3328      	adds	r3, #40	@ 0x28
 8007ff8:	2101      	movs	r1, #1
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 ffc4 	bl	8008f88 <RCCEx_PLL3_Config>
 8008000:	4603      	mov	r3, r0
 8008002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008006:	e004      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800800e:	e000      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10b      	bne.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800801a:	4b6c      	ldr	r3, [pc, #432]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800801c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800801e:	f023 0107 	bic.w	r1, r3, #7
 8008022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008026:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800802a:	4a68      	ldr	r2, [pc, #416]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800802c:	430b      	orrs	r3, r1
 800802e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008030:	e003      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800803a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800803e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008042:	f002 0320 	and.w	r3, r2, #32
 8008046:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800804a:	2300      	movs	r3, #0
 800804c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008050:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008054:	460b      	mov	r3, r1
 8008056:	4313      	orrs	r3, r2
 8008058:	d055      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800805a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800805e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008062:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008066:	d033      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008068:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800806c:	d82c      	bhi.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800806e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008072:	d02f      	beq.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008078:	d826      	bhi.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800807a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800807e:	d02b      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008080:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008084:	d820      	bhi.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008086:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800808a:	d012      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800808c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008090:	d81a      	bhi.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008092:	2b00      	cmp	r3, #0
 8008094:	d022      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008096:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800809a:	d115      	bne.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800809c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a0:	3308      	adds	r3, #8
 80080a2:	2100      	movs	r1, #0
 80080a4:	4618      	mov	r0, r3
 80080a6:	f000 febd 	bl	8008e24 <RCCEx_PLL2_Config>
 80080aa:	4603      	mov	r3, r0
 80080ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80080b0:	e015      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b6:	3328      	adds	r3, #40	@ 0x28
 80080b8:	2102      	movs	r1, #2
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 ff64 	bl	8008f88 <RCCEx_PLL3_Config>
 80080c0:	4603      	mov	r3, r0
 80080c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80080c6:	e00a      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080ce:	e006      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80080d0:	bf00      	nop
 80080d2:	e004      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80080d4:	bf00      	nop
 80080d6:	e002      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80080d8:	bf00      	nop
 80080da:	e000      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80080dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10b      	bne.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080e6:	4b39      	ldr	r3, [pc, #228]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80080ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080f6:	4a35      	ldr	r2, [pc, #212]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080f8:	430b      	orrs	r3, r1
 80080fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80080fc:	e003      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008102:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800810a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008112:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008116:	2300      	movs	r3, #0
 8008118:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800811c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008120:	460b      	mov	r3, r1
 8008122:	4313      	orrs	r3, r2
 8008124:	d058      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800812a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800812e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008132:	d033      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008134:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008138:	d82c      	bhi.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800813a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800813e:	d02f      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008140:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008144:	d826      	bhi.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008146:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800814a:	d02b      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800814c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008150:	d820      	bhi.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008152:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008156:	d012      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008158:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800815c:	d81a      	bhi.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800815e:	2b00      	cmp	r3, #0
 8008160:	d022      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008166:	d115      	bne.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800816c:	3308      	adds	r3, #8
 800816e:	2100      	movs	r1, #0
 8008170:	4618      	mov	r0, r3
 8008172:	f000 fe57 	bl	8008e24 <RCCEx_PLL2_Config>
 8008176:	4603      	mov	r3, r0
 8008178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800817c:	e015      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800817e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008182:	3328      	adds	r3, #40	@ 0x28
 8008184:	2102      	movs	r1, #2
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fefe 	bl	8008f88 <RCCEx_PLL3_Config>
 800818c:	4603      	mov	r3, r0
 800818e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008192:	e00a      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800819a:	e006      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800819c:	bf00      	nop
 800819e:	e004      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80081a0:	bf00      	nop
 80081a2:	e002      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80081a4:	bf00      	nop
 80081a6:	e000      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80081a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10e      	bne.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80081b2:	4b06      	ldr	r3, [pc, #24]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80081b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081b6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80081ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081c2:	4a02      	ldr	r2, [pc, #8]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80081c4:	430b      	orrs	r3, r1
 80081c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80081c8:	e006      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80081ca:	bf00      	nop
 80081cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80081d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80081e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80081e8:	2300      	movs	r3, #0
 80081ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80081f2:	460b      	mov	r3, r1
 80081f4:	4313      	orrs	r3, r2
 80081f6:	d055      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80081f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008200:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008204:	d033      	beq.n	800826e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008206:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800820a:	d82c      	bhi.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800820c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008210:	d02f      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008212:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008216:	d826      	bhi.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008218:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800821c:	d02b      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800821e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008222:	d820      	bhi.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008224:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008228:	d012      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800822a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800822e:	d81a      	bhi.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008230:	2b00      	cmp	r3, #0
 8008232:	d022      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008234:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008238:	d115      	bne.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800823a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800823e:	3308      	adds	r3, #8
 8008240:	2100      	movs	r1, #0
 8008242:	4618      	mov	r0, r3
 8008244:	f000 fdee 	bl	8008e24 <RCCEx_PLL2_Config>
 8008248:	4603      	mov	r3, r0
 800824a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800824e:	e015      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008254:	3328      	adds	r3, #40	@ 0x28
 8008256:	2102      	movs	r1, #2
 8008258:	4618      	mov	r0, r3
 800825a:	f000 fe95 	bl	8008f88 <RCCEx_PLL3_Config>
 800825e:	4603      	mov	r3, r0
 8008260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008264:	e00a      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800826c:	e006      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800826e:	bf00      	nop
 8008270:	e004      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008272:	bf00      	nop
 8008274:	e002      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008276:	bf00      	nop
 8008278:	e000      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800827a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800827c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10b      	bne.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008284:	4ba1      	ldr	r3, [pc, #644]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008288:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800828c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008290:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008294:	4a9d      	ldr	r2, [pc, #628]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008296:	430b      	orrs	r3, r1
 8008298:	6593      	str	r3, [r2, #88]	@ 0x58
 800829a:	e003      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800829c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80082a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ac:	f002 0308 	and.w	r3, r2, #8
 80082b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80082b4:	2300      	movs	r3, #0
 80082b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80082ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80082be:	460b      	mov	r3, r1
 80082c0:	4313      	orrs	r3, r2
 80082c2:	d01e      	beq.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80082c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082d0:	d10c      	bne.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80082d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d6:	3328      	adds	r3, #40	@ 0x28
 80082d8:	2102      	movs	r1, #2
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 fe54 	bl	8008f88 <RCCEx_PLL3_Config>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d002      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80082ec:	4b87      	ldr	r3, [pc, #540]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082f0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80082f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082fc:	4a83      	ldr	r2, [pc, #524]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082fe:	430b      	orrs	r3, r1
 8008300:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830a:	f002 0310 	and.w	r3, r2, #16
 800830e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008312:	2300      	movs	r3, #0
 8008314:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008318:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800831c:	460b      	mov	r3, r1
 800831e:	4313      	orrs	r3, r2
 8008320:	d01e      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008326:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800832a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800832e:	d10c      	bne.n	800834a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008334:	3328      	adds	r3, #40	@ 0x28
 8008336:	2102      	movs	r1, #2
 8008338:	4618      	mov	r0, r3
 800833a:	f000 fe25 	bl	8008f88 <RCCEx_PLL3_Config>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d002      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800834a:	4b70      	ldr	r3, [pc, #448]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800834c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800834e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008356:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800835a:	4a6c      	ldr	r2, [pc, #432]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800835c:	430b      	orrs	r3, r1
 800835e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008368:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800836c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008370:	2300      	movs	r3, #0
 8008372:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008376:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800837a:	460b      	mov	r3, r1
 800837c:	4313      	orrs	r3, r2
 800837e:	d03e      	beq.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008384:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008388:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800838c:	d022      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800838e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008392:	d81b      	bhi.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008394:	2b00      	cmp	r3, #0
 8008396:	d003      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800839c:	d00b      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800839e:	e015      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a4:	3308      	adds	r3, #8
 80083a6:	2100      	movs	r1, #0
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 fd3b 	bl	8008e24 <RCCEx_PLL2_Config>
 80083ae:	4603      	mov	r3, r0
 80083b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80083b4:	e00f      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80083b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ba:	3328      	adds	r3, #40	@ 0x28
 80083bc:	2102      	movs	r1, #2
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 fde2 	bl	8008f88 <RCCEx_PLL3_Config>
 80083c4:	4603      	mov	r3, r0
 80083c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80083ca:	e004      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083d2:	e000      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80083d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10b      	bne.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80083de:	4b4b      	ldr	r3, [pc, #300]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083e2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80083e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80083ee:	4a47      	ldr	r2, [pc, #284]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083f0:	430b      	orrs	r3, r1
 80083f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80083f4:	e003      	b.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80083fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008406:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800840a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800840c:	2300      	movs	r3, #0
 800840e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008410:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008414:	460b      	mov	r3, r1
 8008416:	4313      	orrs	r3, r2
 8008418:	d03b      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800841a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800841e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008422:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008426:	d01f      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008428:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800842c:	d818      	bhi.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800842e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008432:	d003      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008434:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008438:	d007      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800843a:	e011      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800843c:	4b33      	ldr	r3, [pc, #204]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800843e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008440:	4a32      	ldr	r2, [pc, #200]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008446:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008448:	e00f      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800844a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800844e:	3328      	adds	r3, #40	@ 0x28
 8008450:	2101      	movs	r1, #1
 8008452:	4618      	mov	r0, r3
 8008454:	f000 fd98 	bl	8008f88 <RCCEx_PLL3_Config>
 8008458:	4603      	mov	r3, r0
 800845a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800845e:	e004      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008466:	e000      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800846a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10b      	bne.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008472:	4b26      	ldr	r3, [pc, #152]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008476:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800847a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800847e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008482:	4a22      	ldr	r2, [pc, #136]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008484:	430b      	orrs	r3, r1
 8008486:	6553      	str	r3, [r2, #84]	@ 0x54
 8008488:	e003      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800848a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800848e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800849e:	673b      	str	r3, [r7, #112]	@ 0x70
 80084a0:	2300      	movs	r3, #0
 80084a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80084a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80084a8:	460b      	mov	r3, r1
 80084aa:	4313      	orrs	r3, r2
 80084ac:	d034      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80084ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d003      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80084b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084bc:	d007      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80084be:	e011      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084c0:	4b12      	ldr	r3, [pc, #72]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c4:	4a11      	ldr	r2, [pc, #68]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80084cc:	e00e      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80084ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084d2:	3308      	adds	r3, #8
 80084d4:	2102      	movs	r1, #2
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 fca4 	bl	8008e24 <RCCEx_PLL2_Config>
 80084dc:	4603      	mov	r3, r0
 80084de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80084e2:	e003      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10d      	bne.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80084f4:	4b05      	ldr	r3, [pc, #20]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80084fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008502:	4a02      	ldr	r2, [pc, #8]	@ (800850c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008504:	430b      	orrs	r3, r1
 8008506:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008508:	e006      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800850a:	bf00      	nop
 800850c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008510:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008514:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800851c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008520:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008524:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008526:	2300      	movs	r3, #0
 8008528:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800852a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800852e:	460b      	mov	r3, r1
 8008530:	4313      	orrs	r3, r2
 8008532:	d00c      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008538:	3328      	adds	r3, #40	@ 0x28
 800853a:	2102      	movs	r1, #2
 800853c:	4618      	mov	r0, r3
 800853e:	f000 fd23 	bl	8008f88 <RCCEx_PLL3_Config>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800854e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008556:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800855a:	663b      	str	r3, [r7, #96]	@ 0x60
 800855c:	2300      	movs	r3, #0
 800855e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008560:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008564:	460b      	mov	r3, r1
 8008566:	4313      	orrs	r3, r2
 8008568:	d038      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800856a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800856e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008572:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008576:	d018      	beq.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008578:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800857c:	d811      	bhi.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800857e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008582:	d014      	beq.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008588:	d80b      	bhi.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800858a:	2b00      	cmp	r3, #0
 800858c:	d011      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800858e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008592:	d106      	bne.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008594:	4bc3      	ldr	r3, [pc, #780]	@ (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008598:	4ac2      	ldr	r2, [pc, #776]	@ (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800859a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800859e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80085a0:	e008      	b.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085a8:	e004      	b.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80085aa:	bf00      	nop
 80085ac:	e002      	b.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80085ae:	bf00      	nop
 80085b0:	e000      	b.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80085b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10b      	bne.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085bc:	4bb9      	ldr	r3, [pc, #740]	@ (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085c0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80085c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085cc:	4ab5      	ldr	r2, [pc, #724]	@ (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085ce:	430b      	orrs	r3, r1
 80085d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80085d2:	e003      	b.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80085dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80085e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80085ea:	2300      	movs	r3, #0
 80085ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085ee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80085f2:	460b      	mov	r3, r1
 80085f4:	4313      	orrs	r3, r2
 80085f6:	d009      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80085f8:	4baa      	ldr	r3, [pc, #680]	@ (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008606:	4aa7      	ldr	r2, [pc, #668]	@ (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008608:	430b      	orrs	r3, r1
 800860a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800860c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008614:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008618:	653b      	str	r3, [r7, #80]	@ 0x50
 800861a:	2300      	movs	r3, #0
 800861c:	657b      	str	r3, [r7, #84]	@ 0x54
 800861e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008622:	460b      	mov	r3, r1
 8008624:	4313      	orrs	r3, r2
 8008626:	d00a      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008628:	4b9e      	ldr	r3, [pc, #632]	@ (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008634:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008638:	4a9a      	ldr	r2, [pc, #616]	@ (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800863a:	430b      	orrs	r3, r1
 800863c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800863e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008646:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800864a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800864c:	2300      	movs	r3, #0
 800864e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008650:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008654:	460b      	mov	r3, r1
 8008656:	4313      	orrs	r3, r2
 8008658:	d009      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800865a:	4b92      	ldr	r3, [pc, #584]	@ (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800865c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800865e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008666:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008668:	4a8e      	ldr	r2, [pc, #568]	@ (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800866a:	430b      	orrs	r3, r1
 800866c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800866e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008676:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800867a:	643b      	str	r3, [r7, #64]	@ 0x40
 800867c:	2300      	movs	r3, #0
 800867e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008680:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008684:	460b      	mov	r3, r1
 8008686:	4313      	orrs	r3, r2
 8008688:	d00e      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800868a:	4b86      	ldr	r3, [pc, #536]	@ (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	4a85      	ldr	r2, [pc, #532]	@ (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008690:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008694:	6113      	str	r3, [r2, #16]
 8008696:	4b83      	ldr	r3, [pc, #524]	@ (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008698:	6919      	ldr	r1, [r3, #16]
 800869a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800869e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80086a2:	4a80      	ldr	r2, [pc, #512]	@ (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086a4:	430b      	orrs	r3, r1
 80086a6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80086a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80086b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80086b6:	2300      	movs	r3, #0
 80086b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086ba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80086be:	460b      	mov	r3, r1
 80086c0:	4313      	orrs	r3, r2
 80086c2:	d009      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80086c4:	4b77      	ldr	r3, [pc, #476]	@ (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086c8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80086cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086d2:	4a74      	ldr	r2, [pc, #464]	@ (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086d4:	430b      	orrs	r3, r1
 80086d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80086d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80086e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80086e6:	2300      	movs	r3, #0
 80086e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80086ee:	460b      	mov	r3, r1
 80086f0:	4313      	orrs	r3, r2
 80086f2:	d00a      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80086f4:	4b6b      	ldr	r3, [pc, #428]	@ (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086f8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80086fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008704:	4a67      	ldr	r2, [pc, #412]	@ (80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008706:	430b      	orrs	r3, r1
 8008708:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800870a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800870e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008712:	2100      	movs	r1, #0
 8008714:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800871c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008720:	460b      	mov	r3, r1
 8008722:	4313      	orrs	r3, r2
 8008724:	d011      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800872a:	3308      	adds	r3, #8
 800872c:	2100      	movs	r1, #0
 800872e:	4618      	mov	r0, r3
 8008730:	f000 fb78 	bl	8008e24 <RCCEx_PLL2_Config>
 8008734:	4603      	mov	r3, r0
 8008736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800873a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800873e:	2b00      	cmp	r3, #0
 8008740:	d003      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008746:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800874a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800874e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008752:	2100      	movs	r1, #0
 8008754:	6239      	str	r1, [r7, #32]
 8008756:	f003 0302 	and.w	r3, r3, #2
 800875a:	627b      	str	r3, [r7, #36]	@ 0x24
 800875c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008760:	460b      	mov	r3, r1
 8008762:	4313      	orrs	r3, r2
 8008764:	d011      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800876a:	3308      	adds	r3, #8
 800876c:	2101      	movs	r1, #1
 800876e:	4618      	mov	r0, r3
 8008770:	f000 fb58 	bl	8008e24 <RCCEx_PLL2_Config>
 8008774:	4603      	mov	r3, r0
 8008776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800877a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800877e:	2b00      	cmp	r3, #0
 8008780:	d003      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008786:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800878a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800878e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008792:	2100      	movs	r1, #0
 8008794:	61b9      	str	r1, [r7, #24]
 8008796:	f003 0304 	and.w	r3, r3, #4
 800879a:	61fb      	str	r3, [r7, #28]
 800879c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80087a0:	460b      	mov	r3, r1
 80087a2:	4313      	orrs	r3, r2
 80087a4:	d011      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80087a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087aa:	3308      	adds	r3, #8
 80087ac:	2102      	movs	r1, #2
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 fb38 	bl	8008e24 <RCCEx_PLL2_Config>
 80087b4:	4603      	mov	r3, r0
 80087b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80087ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d003      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80087ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d2:	2100      	movs	r1, #0
 80087d4:	6139      	str	r1, [r7, #16]
 80087d6:	f003 0308 	and.w	r3, r3, #8
 80087da:	617b      	str	r3, [r7, #20]
 80087dc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80087e0:	460b      	mov	r3, r1
 80087e2:	4313      	orrs	r3, r2
 80087e4:	d011      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80087e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ea:	3328      	adds	r3, #40	@ 0x28
 80087ec:	2100      	movs	r1, #0
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 fbca 	bl	8008f88 <RCCEx_PLL3_Config>
 80087f4:	4603      	mov	r3, r0
 80087f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80087fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008806:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800880a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800880e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008812:	2100      	movs	r1, #0
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	f003 0310 	and.w	r3, r3, #16
 800881a:	60fb      	str	r3, [r7, #12]
 800881c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008820:	460b      	mov	r3, r1
 8008822:	4313      	orrs	r3, r2
 8008824:	d011      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800882a:	3328      	adds	r3, #40	@ 0x28
 800882c:	2101      	movs	r1, #1
 800882e:	4618      	mov	r0, r3
 8008830:	f000 fbaa 	bl	8008f88 <RCCEx_PLL3_Config>
 8008834:	4603      	mov	r3, r0
 8008836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800883a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008846:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800884a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800884e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008852:	2100      	movs	r1, #0
 8008854:	6039      	str	r1, [r7, #0]
 8008856:	f003 0320 	and.w	r3, r3, #32
 800885a:	607b      	str	r3, [r7, #4]
 800885c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008860:	460b      	mov	r3, r1
 8008862:	4313      	orrs	r3, r2
 8008864:	d011      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800886a:	3328      	adds	r3, #40	@ 0x28
 800886c:	2102      	movs	r1, #2
 800886e:	4618      	mov	r0, r3
 8008870:	f000 fb8a 	bl	8008f88 <RCCEx_PLL3_Config>
 8008874:	4603      	mov	r3, r0
 8008876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800887a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800887e:	2b00      	cmp	r3, #0
 8008880:	d003      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008886:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800888a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	e000      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
}
 8008898:	4618      	mov	r0, r3
 800889a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800889e:	46bd      	mov	sp, r7
 80088a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088a4:	58024400 	.word	0x58024400

080088a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80088ac:	f7fe fd54 	bl	8007358 <HAL_RCC_GetHCLKFreq>
 80088b0:	4602      	mov	r2, r0
 80088b2:	4b06      	ldr	r3, [pc, #24]	@ (80088cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80088b4:	6a1b      	ldr	r3, [r3, #32]
 80088b6:	091b      	lsrs	r3, r3, #4
 80088b8:	f003 0307 	and.w	r3, r3, #7
 80088bc:	4904      	ldr	r1, [pc, #16]	@ (80088d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80088be:	5ccb      	ldrb	r3, [r1, r3]
 80088c0:	f003 031f 	and.w	r3, r3, #31
 80088c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	58024400 	.word	0x58024400
 80088d0:	0800f434 	.word	0x0800f434

080088d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b089      	sub	sp, #36	@ 0x24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088dc:	4ba1      	ldr	r3, [pc, #644]	@ (8008b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e0:	f003 0303 	and.w	r3, r3, #3
 80088e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80088e6:	4b9f      	ldr	r3, [pc, #636]	@ (8008b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ea:	0b1b      	lsrs	r3, r3, #12
 80088ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80088f2:	4b9c      	ldr	r3, [pc, #624]	@ (8008b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f6:	091b      	lsrs	r3, r3, #4
 80088f8:	f003 0301 	and.w	r3, r3, #1
 80088fc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80088fe:	4b99      	ldr	r3, [pc, #612]	@ (8008b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008902:	08db      	lsrs	r3, r3, #3
 8008904:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	fb02 f303 	mul.w	r3, r2, r3
 800890e:	ee07 3a90 	vmov	s15, r3
 8008912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008916:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	2b00      	cmp	r3, #0
 800891e:	f000 8111 	beq.w	8008b44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	2b02      	cmp	r3, #2
 8008926:	f000 8083 	beq.w	8008a30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	2b02      	cmp	r3, #2
 800892e:	f200 80a1 	bhi.w	8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d003      	beq.n	8008940 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d056      	beq.n	80089ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800893e:	e099      	b.n	8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008940:	4b88      	ldr	r3, [pc, #544]	@ (8008b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 0320 	and.w	r3, r3, #32
 8008948:	2b00      	cmp	r3, #0
 800894a:	d02d      	beq.n	80089a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800894c:	4b85      	ldr	r3, [pc, #532]	@ (8008b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	08db      	lsrs	r3, r3, #3
 8008952:	f003 0303 	and.w	r3, r3, #3
 8008956:	4a84      	ldr	r2, [pc, #528]	@ (8008b68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008958:	fa22 f303 	lsr.w	r3, r2, r3
 800895c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	ee07 3a90 	vmov	s15, r3
 8008964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	ee07 3a90 	vmov	s15, r3
 800896e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008976:	4b7b      	ldr	r3, [pc, #492]	@ (8008b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800897a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800897e:	ee07 3a90 	vmov	s15, r3
 8008982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008986:	ed97 6a03 	vldr	s12, [r7, #12]
 800898a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800898e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800899a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800899e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80089a6:	e087      	b.n	8008ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	ee07 3a90 	vmov	s15, r3
 80089ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008b70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80089b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ba:	4b6a      	ldr	r3, [pc, #424]	@ (8008b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089ea:	e065      	b.n	8008ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80089fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089fe:	4b59      	ldr	r3, [pc, #356]	@ (8008b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a12:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a2e:	e043      	b.n	8008ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	ee07 3a90 	vmov	s15, r3
 8008a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a42:	4b48      	ldr	r3, [pc, #288]	@ (8008b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a56:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a72:	e021      	b.n	8008ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	ee07 3a90 	vmov	s15, r3
 8008a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a7e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a86:	4b37      	ldr	r3, [pc, #220]	@ (8008b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a9a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ab6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8008b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008abc:	0a5b      	lsrs	r3, r3, #9
 8008abe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ac2:	ee07 3a90 	vmov	s15, r3
 8008ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ace:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ad2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ade:	ee17 2a90 	vmov	r2, s15
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8008b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aea:	0c1b      	lsrs	r3, r3, #16
 8008aec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008af0:	ee07 3a90 	vmov	s15, r3
 8008af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008af8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008afc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b00:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b0c:	ee17 2a90 	vmov	r2, s15
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008b14:	4b13      	ldr	r3, [pc, #76]	@ (8008b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b18:	0e1b      	lsrs	r3, r3, #24
 8008b1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b1e:	ee07 3a90 	vmov	s15, r3
 8008b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b3a:	ee17 2a90 	vmov	r2, s15
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008b42:	e008      	b.n	8008b56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	609a      	str	r2, [r3, #8]
}
 8008b56:	bf00      	nop
 8008b58:	3724      	adds	r7, #36	@ 0x24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	58024400 	.word	0x58024400
 8008b68:	03d09000 	.word	0x03d09000
 8008b6c:	46000000 	.word	0x46000000
 8008b70:	4c742400 	.word	0x4c742400
 8008b74:	4a742400 	.word	0x4a742400
 8008b78:	4af42400 	.word	0x4af42400

08008b7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b089      	sub	sp, #36	@ 0x24
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b84:	4ba1      	ldr	r3, [pc, #644]	@ (8008e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b88:	f003 0303 	and.w	r3, r3, #3
 8008b8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008b8e:	4b9f      	ldr	r3, [pc, #636]	@ (8008e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b92:	0d1b      	lsrs	r3, r3, #20
 8008b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008b9a:	4b9c      	ldr	r3, [pc, #624]	@ (8008e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b9e:	0a1b      	lsrs	r3, r3, #8
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008ba6:	4b99      	ldr	r3, [pc, #612]	@ (8008e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008baa:	08db      	lsrs	r3, r3, #3
 8008bac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bb0:	693a      	ldr	r2, [r7, #16]
 8008bb2:	fb02 f303 	mul.w	r3, r2, r3
 8008bb6:	ee07 3a90 	vmov	s15, r3
 8008bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f000 8111 	beq.w	8008dec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	f000 8083 	beq.w	8008cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	f200 80a1 	bhi.w	8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d003      	beq.n	8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d056      	beq.n	8008c94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008be6:	e099      	b.n	8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008be8:	4b88      	ldr	r3, [pc, #544]	@ (8008e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0320 	and.w	r3, r3, #32
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d02d      	beq.n	8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bf4:	4b85      	ldr	r3, [pc, #532]	@ (8008e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	08db      	lsrs	r3, r3, #3
 8008bfa:	f003 0303 	and.w	r3, r3, #3
 8008bfe:	4a84      	ldr	r2, [pc, #528]	@ (8008e10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008c00:	fa22 f303 	lsr.w	r3, r2, r3
 8008c04:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	ee07 3a90 	vmov	s15, r3
 8008c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	ee07 3a90 	vmov	s15, r3
 8008c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c1e:	4b7b      	ldr	r3, [pc, #492]	@ (8008e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c26:	ee07 3a90 	vmov	s15, r3
 8008c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c32:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008e14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c4e:	e087      	b.n	8008d60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	ee07 3a90 	vmov	s15, r3
 8008c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c5a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008e18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c62:	4b6a      	ldr	r3, [pc, #424]	@ (8008e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c6a:	ee07 3a90 	vmov	s15, r3
 8008c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c76:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008e14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c92:	e065      	b.n	8008d60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	ee07 3a90 	vmov	s15, r3
 8008c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008e1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ca6:	4b59      	ldr	r3, [pc, #356]	@ (8008e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cae:	ee07 3a90 	vmov	s15, r3
 8008cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008e14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cd6:	e043      	b.n	8008d60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	ee07 3a90 	vmov	s15, r3
 8008cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ce2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008e20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cea:	4b48      	ldr	r3, [pc, #288]	@ (8008e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cf2:	ee07 3a90 	vmov	s15, r3
 8008cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cfe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008e14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d1a:	e021      	b.n	8008d60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	ee07 3a90 	vmov	s15, r3
 8008d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008e1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d2e:	4b37      	ldr	r3, [pc, #220]	@ (8008e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d36:	ee07 3a90 	vmov	s15, r3
 8008d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008e14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008d60:	4b2a      	ldr	r3, [pc, #168]	@ (8008e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d64:	0a5b      	lsrs	r3, r3, #9
 8008d66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d86:	ee17 2a90 	vmov	r2, s15
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8008e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d92:	0c1b      	lsrs	r3, r3, #16
 8008d94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d98:	ee07 3a90 	vmov	s15, r3
 8008d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008da4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008da8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008db4:	ee17 2a90 	vmov	r2, s15
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008dbc:	4b13      	ldr	r3, [pc, #76]	@ (8008e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc0:	0e1b      	lsrs	r3, r3, #24
 8008dc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dc6:	ee07 3a90 	vmov	s15, r3
 8008dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008dd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008de2:	ee17 2a90 	vmov	r2, s15
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008dea:	e008      	b.n	8008dfe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	609a      	str	r2, [r3, #8]
}
 8008dfe:	bf00      	nop
 8008e00:	3724      	adds	r7, #36	@ 0x24
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	58024400 	.word	0x58024400
 8008e10:	03d09000 	.word	0x03d09000
 8008e14:	46000000 	.word	0x46000000
 8008e18:	4c742400 	.word	0x4c742400
 8008e1c:	4a742400 	.word	0x4a742400
 8008e20:	4af42400 	.word	0x4af42400

08008e24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e32:	4b53      	ldr	r3, [pc, #332]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e36:	f003 0303 	and.w	r3, r3, #3
 8008e3a:	2b03      	cmp	r3, #3
 8008e3c:	d101      	bne.n	8008e42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e099      	b.n	8008f76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008e42:	4b4f      	ldr	r3, [pc, #316]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a4e      	ldr	r2, [pc, #312]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008e48:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008e4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e4e:	f7f9 fa0d 	bl	800226c <HAL_GetTick>
 8008e52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e54:	e008      	b.n	8008e68 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008e56:	f7f9 fa09 	bl	800226c <HAL_GetTick>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	1ad3      	subs	r3, r2, r3
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d901      	bls.n	8008e68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e64:	2303      	movs	r3, #3
 8008e66:	e086      	b.n	8008f76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e68:	4b45      	ldr	r3, [pc, #276]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1f0      	bne.n	8008e56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008e74:	4b42      	ldr	r3, [pc, #264]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e78:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	031b      	lsls	r3, r3, #12
 8008e82:	493f      	ldr	r1, [pc, #252]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008e84:	4313      	orrs	r3, r2
 8008e86:	628b      	str	r3, [r1, #40]	@ 0x28
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	025b      	lsls	r3, r3, #9
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	431a      	orrs	r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	041b      	lsls	r3, r3, #16
 8008ea6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008eaa:	431a      	orrs	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	061b      	lsls	r3, r3, #24
 8008eb4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008eb8:	4931      	ldr	r1, [pc, #196]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008ebe:	4b30      	ldr	r3, [pc, #192]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	695b      	ldr	r3, [r3, #20]
 8008eca:	492d      	ldr	r1, [pc, #180]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed4:	f023 0220 	bic.w	r2, r3, #32
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	4928      	ldr	r1, [pc, #160]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008ee2:	4b27      	ldr	r3, [pc, #156]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee6:	4a26      	ldr	r2, [pc, #152]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008ee8:	f023 0310 	bic.w	r3, r3, #16
 8008eec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008eee:	4b24      	ldr	r3, [pc, #144]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008ef0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ef2:	4b24      	ldr	r3, [pc, #144]	@ (8008f84 <RCCEx_PLL2_Config+0x160>)
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	69d2      	ldr	r2, [r2, #28]
 8008efa:	00d2      	lsls	r2, r2, #3
 8008efc:	4920      	ldr	r1, [pc, #128]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008efe:	4313      	orrs	r3, r2
 8008f00:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f02:	4b1f      	ldr	r3, [pc, #124]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f06:	4a1e      	ldr	r2, [pc, #120]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008f08:	f043 0310 	orr.w	r3, r3, #16
 8008f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d106      	bne.n	8008f22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f14:	4b1a      	ldr	r3, [pc, #104]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f18:	4a19      	ldr	r2, [pc, #100]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008f1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f20:	e00f      	b.n	8008f42 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d106      	bne.n	8008f36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008f28:	4b15      	ldr	r3, [pc, #84]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f2c:	4a14      	ldr	r2, [pc, #80]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008f2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f34:	e005      	b.n	8008f42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008f36:	4b12      	ldr	r3, [pc, #72]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f3a:	4a11      	ldr	r2, [pc, #68]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008f3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f40:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008f42:	4b0f      	ldr	r3, [pc, #60]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a0e      	ldr	r2, [pc, #56]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008f48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008f4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f4e:	f7f9 f98d 	bl	800226c <HAL_GetTick>
 8008f52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f54:	e008      	b.n	8008f68 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f56:	f7f9 f989 	bl	800226c <HAL_GetTick>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d901      	bls.n	8008f68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f64:	2303      	movs	r3, #3
 8008f66:	e006      	b.n	8008f76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f68:	4b05      	ldr	r3, [pc, #20]	@ (8008f80 <RCCEx_PLL2_Config+0x15c>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d0f0      	beq.n	8008f56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	58024400 	.word	0x58024400
 8008f84:	ffff0007 	.word	0xffff0007

08008f88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f96:	4b53      	ldr	r3, [pc, #332]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 8008f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f9a:	f003 0303 	and.w	r3, r3, #3
 8008f9e:	2b03      	cmp	r3, #3
 8008fa0:	d101      	bne.n	8008fa6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e099      	b.n	80090da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008fa6:	4b4f      	ldr	r3, [pc, #316]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a4e      	ldr	r2, [pc, #312]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 8008fac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008fb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fb2:	f7f9 f95b 	bl	800226c <HAL_GetTick>
 8008fb6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008fb8:	e008      	b.n	8008fcc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008fba:	f7f9 f957 	bl	800226c <HAL_GetTick>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d901      	bls.n	8008fcc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008fc8:	2303      	movs	r3, #3
 8008fca:	e086      	b.n	80090da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008fcc:	4b45      	ldr	r3, [pc, #276]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d1f0      	bne.n	8008fba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008fd8:	4b42      	ldr	r3, [pc, #264]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 8008fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fdc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	051b      	lsls	r3, r3, #20
 8008fe6:	493f      	ldr	r1, [pc, #252]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	628b      	str	r3, [r1, #40]	@ 0x28
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	025b      	lsls	r3, r3, #9
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	431a      	orrs	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	3b01      	subs	r3, #1
 8009008:	041b      	lsls	r3, r3, #16
 800900a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800900e:	431a      	orrs	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	3b01      	subs	r3, #1
 8009016:	061b      	lsls	r3, r3, #24
 8009018:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800901c:	4931      	ldr	r1, [pc, #196]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 800901e:	4313      	orrs	r3, r2
 8009020:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009022:	4b30      	ldr	r3, [pc, #192]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 8009024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009026:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	492d      	ldr	r1, [pc, #180]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 8009030:	4313      	orrs	r3, r2
 8009032:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009034:	4b2b      	ldr	r3, [pc, #172]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 8009036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009038:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	699b      	ldr	r3, [r3, #24]
 8009040:	4928      	ldr	r1, [pc, #160]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 8009042:	4313      	orrs	r3, r2
 8009044:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009046:	4b27      	ldr	r3, [pc, #156]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 8009048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800904a:	4a26      	ldr	r2, [pc, #152]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 800904c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009050:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009052:	4b24      	ldr	r3, [pc, #144]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 8009054:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009056:	4b24      	ldr	r3, [pc, #144]	@ (80090e8 <RCCEx_PLL3_Config+0x160>)
 8009058:	4013      	ands	r3, r2
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	69d2      	ldr	r2, [r2, #28]
 800905e:	00d2      	lsls	r2, r2, #3
 8009060:	4920      	ldr	r1, [pc, #128]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 8009062:	4313      	orrs	r3, r2
 8009064:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009066:	4b1f      	ldr	r3, [pc, #124]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 8009068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800906a:	4a1e      	ldr	r2, [pc, #120]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 800906c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009070:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d106      	bne.n	8009086 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009078:	4b1a      	ldr	r3, [pc, #104]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 800907a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800907c:	4a19      	ldr	r2, [pc, #100]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 800907e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009082:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009084:	e00f      	b.n	80090a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d106      	bne.n	800909a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800908c:	4b15      	ldr	r3, [pc, #84]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 800908e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009090:	4a14      	ldr	r2, [pc, #80]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 8009092:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009096:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009098:	e005      	b.n	80090a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800909a:	4b12      	ldr	r3, [pc, #72]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 800909c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800909e:	4a11      	ldr	r2, [pc, #68]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 80090a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80090a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80090a6:	4b0f      	ldr	r3, [pc, #60]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a0e      	ldr	r2, [pc, #56]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 80090ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090b2:	f7f9 f8db 	bl	800226c <HAL_GetTick>
 80090b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80090b8:	e008      	b.n	80090cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80090ba:	f7f9 f8d7 	bl	800226c <HAL_GetTick>
 80090be:	4602      	mov	r2, r0
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	2b02      	cmp	r3, #2
 80090c6:	d901      	bls.n	80090cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80090c8:	2303      	movs	r3, #3
 80090ca:	e006      	b.n	80090da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80090cc:	4b05      	ldr	r3, [pc, #20]	@ (80090e4 <RCCEx_PLL3_Config+0x15c>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d0f0      	beq.n	80090ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	58024400 	.word	0x58024400
 80090e8:	ffff0007 	.word	0xffff0007

080090ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e049      	b.n	8009192 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009104:	b2db      	uxtb	r3, r3
 8009106:	2b00      	cmp	r3, #0
 8009108:	d106      	bne.n	8009118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f841 	bl	800919a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2202      	movs	r2, #2
 800911c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	3304      	adds	r3, #4
 8009128:	4619      	mov	r1, r3
 800912a:	4610      	mov	r0, r2
 800912c:	f000 f9e8 	bl	8009500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800919a:	b480      	push	{r7}
 800919c:	b083      	sub	sp, #12
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80091a2:	bf00      	nop
 80091a4:	370c      	adds	r7, #12
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
	...

080091b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d001      	beq.n	80091c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e054      	b.n	8009272 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2202      	movs	r2, #2
 80091cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68da      	ldr	r2, [r3, #12]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f042 0201 	orr.w	r2, r2, #1
 80091de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a26      	ldr	r2, [pc, #152]	@ (8009280 <HAL_TIM_Base_Start_IT+0xd0>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d022      	beq.n	8009230 <HAL_TIM_Base_Start_IT+0x80>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091f2:	d01d      	beq.n	8009230 <HAL_TIM_Base_Start_IT+0x80>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a22      	ldr	r2, [pc, #136]	@ (8009284 <HAL_TIM_Base_Start_IT+0xd4>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d018      	beq.n	8009230 <HAL_TIM_Base_Start_IT+0x80>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a21      	ldr	r2, [pc, #132]	@ (8009288 <HAL_TIM_Base_Start_IT+0xd8>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d013      	beq.n	8009230 <HAL_TIM_Base_Start_IT+0x80>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a1f      	ldr	r2, [pc, #124]	@ (800928c <HAL_TIM_Base_Start_IT+0xdc>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d00e      	beq.n	8009230 <HAL_TIM_Base_Start_IT+0x80>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a1e      	ldr	r2, [pc, #120]	@ (8009290 <HAL_TIM_Base_Start_IT+0xe0>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d009      	beq.n	8009230 <HAL_TIM_Base_Start_IT+0x80>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a1c      	ldr	r2, [pc, #112]	@ (8009294 <HAL_TIM_Base_Start_IT+0xe4>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d004      	beq.n	8009230 <HAL_TIM_Base_Start_IT+0x80>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a1b      	ldr	r2, [pc, #108]	@ (8009298 <HAL_TIM_Base_Start_IT+0xe8>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d115      	bne.n	800925c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	689a      	ldr	r2, [r3, #8]
 8009236:	4b19      	ldr	r3, [pc, #100]	@ (800929c <HAL_TIM_Base_Start_IT+0xec>)
 8009238:	4013      	ands	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2b06      	cmp	r3, #6
 8009240:	d015      	beq.n	800926e <HAL_TIM_Base_Start_IT+0xbe>
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009248:	d011      	beq.n	800926e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f042 0201 	orr.w	r2, r2, #1
 8009258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800925a:	e008      	b.n	800926e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f042 0201 	orr.w	r2, r2, #1
 800926a:	601a      	str	r2, [r3, #0]
 800926c:	e000      	b.n	8009270 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800926e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	40010000 	.word	0x40010000
 8009284:	40000400 	.word	0x40000400
 8009288:	40000800 	.word	0x40000800
 800928c:	40000c00 	.word	0x40000c00
 8009290:	40010400 	.word	0x40010400
 8009294:	40001800 	.word	0x40001800
 8009298:	40014000 	.word	0x40014000
 800929c:	00010007 	.word	0x00010007

080092a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	f003 0302 	and.w	r3, r3, #2
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d020      	beq.n	8009304 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f003 0302 	and.w	r3, r3, #2
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d01b      	beq.n	8009304 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f06f 0202 	mvn.w	r2, #2
 80092d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2201      	movs	r2, #1
 80092da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	699b      	ldr	r3, [r3, #24]
 80092e2:	f003 0303 	and.w	r3, r3, #3
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d003      	beq.n	80092f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f8e9 	bl	80094c2 <HAL_TIM_IC_CaptureCallback>
 80092f0:	e005      	b.n	80092fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f8db 	bl	80094ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 f8ec 	bl	80094d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	f003 0304 	and.w	r3, r3, #4
 800930a:	2b00      	cmp	r3, #0
 800930c:	d020      	beq.n	8009350 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f003 0304 	and.w	r3, r3, #4
 8009314:	2b00      	cmp	r3, #0
 8009316:	d01b      	beq.n	8009350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f06f 0204 	mvn.w	r2, #4
 8009320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2202      	movs	r2, #2
 8009326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009332:	2b00      	cmp	r3, #0
 8009334:	d003      	beq.n	800933e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f8c3 	bl	80094c2 <HAL_TIM_IC_CaptureCallback>
 800933c:	e005      	b.n	800934a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f8b5 	bl	80094ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 f8c6 	bl	80094d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	f003 0308 	and.w	r3, r3, #8
 8009356:	2b00      	cmp	r3, #0
 8009358:	d020      	beq.n	800939c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f003 0308 	and.w	r3, r3, #8
 8009360:	2b00      	cmp	r3, #0
 8009362:	d01b      	beq.n	800939c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f06f 0208 	mvn.w	r2, #8
 800936c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2204      	movs	r2, #4
 8009372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	69db      	ldr	r3, [r3, #28]
 800937a:	f003 0303 	and.w	r3, r3, #3
 800937e:	2b00      	cmp	r3, #0
 8009380:	d003      	beq.n	800938a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f89d 	bl	80094c2 <HAL_TIM_IC_CaptureCallback>
 8009388:	e005      	b.n	8009396 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f88f 	bl	80094ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 f8a0 	bl	80094d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	f003 0310 	and.w	r3, r3, #16
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d020      	beq.n	80093e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f003 0310 	and.w	r3, r3, #16
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d01b      	beq.n	80093e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f06f 0210 	mvn.w	r2, #16
 80093b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2208      	movs	r2, #8
 80093be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d003      	beq.n	80093d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f877 	bl	80094c2 <HAL_TIM_IC_CaptureCallback>
 80093d4:	e005      	b.n	80093e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 f869 	bl	80094ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f87a 	bl	80094d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00c      	beq.n	800940c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f003 0301 	and.w	r3, r3, #1
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d007      	beq.n	800940c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f06f 0201 	mvn.w	r2, #1
 8009404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f7f8 f822 	bl	8001450 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009412:	2b00      	cmp	r3, #0
 8009414:	d104      	bne.n	8009420 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00c      	beq.n	800943a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009426:	2b00      	cmp	r3, #0
 8009428:	d007      	beq.n	800943a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 f913 	bl	8009660 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00c      	beq.n	800945e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800944a:	2b00      	cmp	r3, #0
 800944c:	d007      	beq.n	800945e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 f90b 	bl	8009674 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00c      	beq.n	8009482 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800946e:	2b00      	cmp	r3, #0
 8009470:	d007      	beq.n	8009482 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800947a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f834 	bl	80094ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	f003 0320 	and.w	r3, r3, #32
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00c      	beq.n	80094a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f003 0320 	and.w	r3, r3, #32
 8009492:	2b00      	cmp	r3, #0
 8009494:	d007      	beq.n	80094a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f06f 0220 	mvn.w	r2, #32
 800949e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f8d3 	bl	800964c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094a6:	bf00      	nop
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094ae:	b480      	push	{r7}
 80094b0:	b083      	sub	sp, #12
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094b6:	bf00      	nop
 80094b8:	370c      	adds	r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094c2:	b480      	push	{r7}
 80094c4:	b083      	sub	sp, #12
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094ca:	bf00      	nop
 80094cc:	370c      	adds	r7, #12
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr

080094d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094d6:	b480      	push	{r7}
 80094d8:	b083      	sub	sp, #12
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094de:	bf00      	nop
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr

080094ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094ea:	b480      	push	{r7}
 80094ec:	b083      	sub	sp, #12
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094f2:	bf00      	nop
 80094f4:	370c      	adds	r7, #12
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr
	...

08009500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a46      	ldr	r2, [pc, #280]	@ (800962c <TIM_Base_SetConfig+0x12c>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d013      	beq.n	8009540 <TIM_Base_SetConfig+0x40>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800951e:	d00f      	beq.n	8009540 <TIM_Base_SetConfig+0x40>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a43      	ldr	r2, [pc, #268]	@ (8009630 <TIM_Base_SetConfig+0x130>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d00b      	beq.n	8009540 <TIM_Base_SetConfig+0x40>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a42      	ldr	r2, [pc, #264]	@ (8009634 <TIM_Base_SetConfig+0x134>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d007      	beq.n	8009540 <TIM_Base_SetConfig+0x40>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a41      	ldr	r2, [pc, #260]	@ (8009638 <TIM_Base_SetConfig+0x138>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d003      	beq.n	8009540 <TIM_Base_SetConfig+0x40>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a40      	ldr	r2, [pc, #256]	@ (800963c <TIM_Base_SetConfig+0x13c>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d108      	bne.n	8009552 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	4313      	orrs	r3, r2
 8009550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a35      	ldr	r2, [pc, #212]	@ (800962c <TIM_Base_SetConfig+0x12c>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d01f      	beq.n	800959a <TIM_Base_SetConfig+0x9a>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009560:	d01b      	beq.n	800959a <TIM_Base_SetConfig+0x9a>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a32      	ldr	r2, [pc, #200]	@ (8009630 <TIM_Base_SetConfig+0x130>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d017      	beq.n	800959a <TIM_Base_SetConfig+0x9a>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a31      	ldr	r2, [pc, #196]	@ (8009634 <TIM_Base_SetConfig+0x134>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d013      	beq.n	800959a <TIM_Base_SetConfig+0x9a>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a30      	ldr	r2, [pc, #192]	@ (8009638 <TIM_Base_SetConfig+0x138>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d00f      	beq.n	800959a <TIM_Base_SetConfig+0x9a>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a2f      	ldr	r2, [pc, #188]	@ (800963c <TIM_Base_SetConfig+0x13c>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d00b      	beq.n	800959a <TIM_Base_SetConfig+0x9a>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a2e      	ldr	r2, [pc, #184]	@ (8009640 <TIM_Base_SetConfig+0x140>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d007      	beq.n	800959a <TIM_Base_SetConfig+0x9a>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a2d      	ldr	r2, [pc, #180]	@ (8009644 <TIM_Base_SetConfig+0x144>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d003      	beq.n	800959a <TIM_Base_SetConfig+0x9a>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a2c      	ldr	r2, [pc, #176]	@ (8009648 <TIM_Base_SetConfig+0x148>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d108      	bne.n	80095ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	689a      	ldr	r2, [r3, #8]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a16      	ldr	r2, [pc, #88]	@ (800962c <TIM_Base_SetConfig+0x12c>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d00f      	beq.n	80095f8 <TIM_Base_SetConfig+0xf8>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a18      	ldr	r2, [pc, #96]	@ (800963c <TIM_Base_SetConfig+0x13c>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d00b      	beq.n	80095f8 <TIM_Base_SetConfig+0xf8>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a17      	ldr	r2, [pc, #92]	@ (8009640 <TIM_Base_SetConfig+0x140>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d007      	beq.n	80095f8 <TIM_Base_SetConfig+0xf8>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a16      	ldr	r2, [pc, #88]	@ (8009644 <TIM_Base_SetConfig+0x144>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d003      	beq.n	80095f8 <TIM_Base_SetConfig+0xf8>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4a15      	ldr	r2, [pc, #84]	@ (8009648 <TIM_Base_SetConfig+0x148>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d103      	bne.n	8009600 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	691a      	ldr	r2, [r3, #16]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b01      	cmp	r3, #1
 8009610:	d105      	bne.n	800961e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	f023 0201 	bic.w	r2, r3, #1
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	611a      	str	r2, [r3, #16]
  }
}
 800961e:	bf00      	nop
 8009620:	3714      	adds	r7, #20
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	40010000 	.word	0x40010000
 8009630:	40000400 	.word	0x40000400
 8009634:	40000800 	.word	0x40000800
 8009638:	40000c00 	.word	0x40000c00
 800963c:	40010400 	.word	0x40010400
 8009640:	40014000 	.word	0x40014000
 8009644:	40014400 	.word	0x40014400
 8009648:	40014800 	.word	0x40014800

0800964c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d101      	bne.n	800969a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e042      	b.n	8009720 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d106      	bne.n	80096b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7f8 f981 	bl	80019b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2224      	movs	r2, #36	@ 0x24
 80096b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f022 0201 	bic.w	r2, r2, #1
 80096c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d002      	beq.n	80096d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f001 fb62 	bl	800ad9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 fdf7 	bl	800a2cc <UART_SetConfig>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d101      	bne.n	80096e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e01b      	b.n	8009720 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	685a      	ldr	r2, [r3, #4]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80096f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	689a      	ldr	r2, [r3, #8]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009706:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f042 0201 	orr.w	r2, r2, #1
 8009716:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f001 fbe1 	bl	800aee0 <UART_CheckIdleState>
 800971e:	4603      	mov	r3, r0
}
 8009720:	4618      	mov	r0, r3
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b08a      	sub	sp, #40	@ 0x28
 800972c:	af02      	add	r7, sp, #8
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	603b      	str	r3, [r7, #0]
 8009734:	4613      	mov	r3, r2
 8009736:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800973e:	2b20      	cmp	r3, #32
 8009740:	d17b      	bne.n	800983a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d002      	beq.n	800974e <HAL_UART_Transmit+0x26>
 8009748:	88fb      	ldrh	r3, [r7, #6]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d101      	bne.n	8009752 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e074      	b.n	800983c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2221      	movs	r2, #33	@ 0x21
 800975e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009762:	f7f8 fd83 	bl	800226c <HAL_GetTick>
 8009766:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	88fa      	ldrh	r2, [r7, #6]
 800976c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	88fa      	ldrh	r2, [r7, #6]
 8009774:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009780:	d108      	bne.n	8009794 <HAL_UART_Transmit+0x6c>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d104      	bne.n	8009794 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800978a:	2300      	movs	r3, #0
 800978c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	61bb      	str	r3, [r7, #24]
 8009792:	e003      	b.n	800979c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009798:	2300      	movs	r3, #0
 800979a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800979c:	e030      	b.n	8009800 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	2200      	movs	r2, #0
 80097a6:	2180      	movs	r1, #128	@ 0x80
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f001 fc43 	bl	800b034 <UART_WaitOnFlagUntilTimeout>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d005      	beq.n	80097c0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2220      	movs	r2, #32
 80097b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80097bc:	2303      	movs	r3, #3
 80097be:	e03d      	b.n	800983c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d10b      	bne.n	80097de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097c6:	69bb      	ldr	r3, [r7, #24]
 80097c8:	881b      	ldrh	r3, [r3, #0]
 80097ca:	461a      	mov	r2, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	3302      	adds	r3, #2
 80097da:	61bb      	str	r3, [r7, #24]
 80097dc:	e007      	b.n	80097ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	781a      	ldrb	r2, [r3, #0]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	3301      	adds	r3, #1
 80097ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	3b01      	subs	r3, #1
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009806:	b29b      	uxth	r3, r3
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1c8      	bne.n	800979e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	2200      	movs	r2, #0
 8009814:	2140      	movs	r1, #64	@ 0x40
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f001 fc0c 	bl	800b034 <UART_WaitOnFlagUntilTimeout>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d005      	beq.n	800982e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2220      	movs	r2, #32
 8009826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800982a:	2303      	movs	r3, #3
 800982c:	e006      	b.n	800983c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2220      	movs	r2, #32
 8009832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	e000      	b.n	800983c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800983a:	2302      	movs	r3, #2
  }
}
 800983c:	4618      	mov	r0, r3
 800983e:	3720      	adds	r7, #32
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b08a      	sub	sp, #40	@ 0x28
 8009848:	af02      	add	r7, sp, #8
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	603b      	str	r3, [r7, #0]
 8009850:	4613      	mov	r3, r2
 8009852:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800985a:	2b20      	cmp	r3, #32
 800985c:	f040 80b5 	bne.w	80099ca <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d002      	beq.n	800986c <HAL_UART_Receive+0x28>
 8009866:	88fb      	ldrh	r3, [r7, #6]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d101      	bne.n	8009870 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e0ad      	b.n	80099cc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2200      	movs	r2, #0
 8009874:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2222      	movs	r2, #34	@ 0x22
 800987c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009886:	f7f8 fcf1 	bl	800226c <HAL_GetTick>
 800988a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	88fa      	ldrh	r2, [r7, #6]
 8009890:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	88fa      	ldrh	r2, [r7, #6]
 8009898:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098a4:	d10e      	bne.n	80098c4 <HAL_UART_Receive+0x80>
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d105      	bne.n	80098ba <HAL_UART_Receive+0x76>
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80098b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80098b8:	e02d      	b.n	8009916 <HAL_UART_Receive+0xd2>
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	22ff      	movs	r2, #255	@ 0xff
 80098be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80098c2:	e028      	b.n	8009916 <HAL_UART_Receive+0xd2>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d10d      	bne.n	80098e8 <HAL_UART_Receive+0xa4>
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d104      	bne.n	80098de <HAL_UART_Receive+0x9a>
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	22ff      	movs	r2, #255	@ 0xff
 80098d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80098dc:	e01b      	b.n	8009916 <HAL_UART_Receive+0xd2>
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	227f      	movs	r2, #127	@ 0x7f
 80098e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80098e6:	e016      	b.n	8009916 <HAL_UART_Receive+0xd2>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098f0:	d10d      	bne.n	800990e <HAL_UART_Receive+0xca>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d104      	bne.n	8009904 <HAL_UART_Receive+0xc0>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	227f      	movs	r2, #127	@ 0x7f
 80098fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009902:	e008      	b.n	8009916 <HAL_UART_Receive+0xd2>
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	223f      	movs	r2, #63	@ 0x3f
 8009908:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800990c:	e003      	b.n	8009916 <HAL_UART_Receive+0xd2>
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800991c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009926:	d108      	bne.n	800993a <HAL_UART_Receive+0xf6>
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d104      	bne.n	800993a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009930:	2300      	movs	r3, #0
 8009932:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	61bb      	str	r3, [r7, #24]
 8009938:	e003      	b.n	8009942 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800993e:	2300      	movs	r3, #0
 8009940:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009942:	e036      	b.n	80099b2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	2200      	movs	r2, #0
 800994c:	2120      	movs	r1, #32
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f001 fb70 	bl	800b034 <UART_WaitOnFlagUntilTimeout>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d005      	beq.n	8009966 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2220      	movs	r2, #32
 800995e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8009962:	2303      	movs	r3, #3
 8009964:	e032      	b.n	80099cc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d10c      	bne.n	8009986 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009972:	b29a      	uxth	r2, r3
 8009974:	8a7b      	ldrh	r3, [r7, #18]
 8009976:	4013      	ands	r3, r2
 8009978:	b29a      	uxth	r2, r3
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	3302      	adds	r3, #2
 8009982:	61bb      	str	r3, [r7, #24]
 8009984:	e00c      	b.n	80099a0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800998c:	b2da      	uxtb	r2, r3
 800998e:	8a7b      	ldrh	r3, [r7, #18]
 8009990:	b2db      	uxtb	r3, r3
 8009992:	4013      	ands	r3, r2
 8009994:	b2da      	uxtb	r2, r3
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	3301      	adds	r3, #1
 800999e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	3b01      	subs	r3, #1
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1c2      	bne.n	8009944 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2220      	movs	r2, #32
 80099c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80099c6:	2300      	movs	r3, #0
 80099c8:	e000      	b.n	80099cc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80099ca:	2302      	movs	r3, #2
  }
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3720      	adds	r7, #32
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b08a      	sub	sp, #40	@ 0x28
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	4613      	mov	r3, r2
 80099e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099e8:	2b20      	cmp	r3, #32
 80099ea:	d137      	bne.n	8009a5c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d002      	beq.n	80099f8 <HAL_UART_Receive_IT+0x24>
 80099f2:	88fb      	ldrh	r3, [r7, #6]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d101      	bne.n	80099fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	e030      	b.n	8009a5e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2200      	movs	r2, #0
 8009a00:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a18      	ldr	r2, [pc, #96]	@ (8009a68 <HAL_UART_Receive_IT+0x94>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d01f      	beq.n	8009a4c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d018      	beq.n	8009a4c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	e853 3f00 	ldrex	r3, [r3]
 8009a26:	613b      	str	r3, [r7, #16]
   return(result);
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	461a      	mov	r2, r3
 8009a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a38:	623b      	str	r3, [r7, #32]
 8009a3a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3c:	69f9      	ldr	r1, [r7, #28]
 8009a3e:	6a3a      	ldr	r2, [r7, #32]
 8009a40:	e841 2300 	strex	r3, r2, [r1]
 8009a44:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1e6      	bne.n	8009a1a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009a4c:	88fb      	ldrh	r3, [r7, #6]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	68b9      	ldr	r1, [r7, #8]
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f001 fb5c 	bl	800b110 <UART_Start_Receive_IT>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	e000      	b.n	8009a5e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009a5c:	2302      	movs	r3, #2
  }
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3728      	adds	r7, #40	@ 0x28
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	58000c00 	.word	0x58000c00

08009a6c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b08a      	sub	sp, #40	@ 0x28
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	4613      	mov	r3, r2
 8009a78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a80:	2b20      	cmp	r3, #32
 8009a82:	d137      	bne.n	8009af4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d002      	beq.n	8009a90 <HAL_UART_Receive_DMA+0x24>
 8009a8a:	88fb      	ldrh	r3, [r7, #6]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d101      	bne.n	8009a94 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	e030      	b.n	8009af6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2200      	movs	r2, #0
 8009a98:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a18      	ldr	r2, [pc, #96]	@ (8009b00 <HAL_UART_Receive_DMA+0x94>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d01f      	beq.n	8009ae4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d018      	beq.n	8009ae4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	e853 3f00 	ldrex	r3, [r3]
 8009abe:	613b      	str	r3, [r7, #16]
   return(result);
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	461a      	mov	r2, r3
 8009ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad0:	623b      	str	r3, [r7, #32]
 8009ad2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad4:	69f9      	ldr	r1, [r7, #28]
 8009ad6:	6a3a      	ldr	r2, [r7, #32]
 8009ad8:	e841 2300 	strex	r3, r2, [r1]
 8009adc:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1e6      	bne.n	8009ab2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009ae4:	88fb      	ldrh	r3, [r7, #6]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	68b9      	ldr	r1, [r7, #8]
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f001 fc32 	bl	800b354 <UART_Start_Receive_DMA>
 8009af0:	4603      	mov	r3, r0
 8009af2:	e000      	b.n	8009af6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009af4:	2302      	movs	r3, #2
  }
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3728      	adds	r7, #40	@ 0x28
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	58000c00 	.word	0x58000c00

08009b04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b0ba      	sub	sp, #232	@ 0xe8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	69db      	ldr	r3, [r3, #28]
 8009b12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009b2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009b2e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009b32:	4013      	ands	r3, r2
 8009b34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009b38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d11b      	bne.n	8009b78 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b44:	f003 0320 	and.w	r3, r3, #32
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d015      	beq.n	8009b78 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b50:	f003 0320 	and.w	r3, r3, #32
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d105      	bne.n	8009b64 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d009      	beq.n	8009b78 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f000 8377 	beq.w	800a25c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	4798      	blx	r3
      }
      return;
 8009b76:	e371      	b.n	800a25c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009b78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f000 8123 	beq.w	8009dc8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009b82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009b86:	4b8d      	ldr	r3, [pc, #564]	@ (8009dbc <HAL_UART_IRQHandler+0x2b8>)
 8009b88:	4013      	ands	r3, r2
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d106      	bne.n	8009b9c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009b8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009b92:	4b8b      	ldr	r3, [pc, #556]	@ (8009dc0 <HAL_UART_IRQHandler+0x2bc>)
 8009b94:	4013      	ands	r3, r2
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f000 8116 	beq.w	8009dc8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ba0:	f003 0301 	and.w	r3, r3, #1
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d011      	beq.n	8009bcc <HAL_UART_IRQHandler+0xc8>
 8009ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00b      	beq.n	8009bcc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bc2:	f043 0201 	orr.w	r2, r3, #1
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bd0:	f003 0302 	and.w	r3, r3, #2
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d011      	beq.n	8009bfc <HAL_UART_IRQHandler+0xf8>
 8009bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bdc:	f003 0301 	and.w	r3, r3, #1
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d00b      	beq.n	8009bfc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2202      	movs	r2, #2
 8009bea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bf2:	f043 0204 	orr.w	r2, r3, #4
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c00:	f003 0304 	and.w	r3, r3, #4
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d011      	beq.n	8009c2c <HAL_UART_IRQHandler+0x128>
 8009c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c0c:	f003 0301 	and.w	r3, r3, #1
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00b      	beq.n	8009c2c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2204      	movs	r2, #4
 8009c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c22:	f043 0202 	orr.w	r2, r3, #2
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c30:	f003 0308 	and.w	r3, r3, #8
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d017      	beq.n	8009c68 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c3c:	f003 0320 	and.w	r3, r3, #32
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d105      	bne.n	8009c50 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009c44:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009c48:	4b5c      	ldr	r3, [pc, #368]	@ (8009dbc <HAL_UART_IRQHandler+0x2b8>)
 8009c4a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00b      	beq.n	8009c68 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2208      	movs	r2, #8
 8009c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c5e:	f043 0208 	orr.w	r2, r3, #8
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d012      	beq.n	8009c9a <HAL_UART_IRQHandler+0x196>
 8009c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00c      	beq.n	8009c9a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c90:	f043 0220 	orr.w	r2, r3, #32
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 82dd 	beq.w	800a260 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009caa:	f003 0320 	and.w	r3, r3, #32
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d013      	beq.n	8009cda <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cb6:	f003 0320 	and.w	r3, r3, #32
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d105      	bne.n	8009cca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d007      	beq.n	8009cda <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d003      	beq.n	8009cda <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ce0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cee:	2b40      	cmp	r3, #64	@ 0x40
 8009cf0:	d005      	beq.n	8009cfe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009cf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009cf6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d054      	beq.n	8009da8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f001 fc10 	bl	800b524 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d0e:	2b40      	cmp	r3, #64	@ 0x40
 8009d10:	d146      	bne.n	8009da0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	3308      	adds	r3, #8
 8009d18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d20:	e853 3f00 	ldrex	r3, [r3]
 8009d24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	3308      	adds	r3, #8
 8009d3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009d3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009d42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009d4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009d4e:	e841 2300 	strex	r3, r2, [r1]
 8009d52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009d56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d1d9      	bne.n	8009d12 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d017      	beq.n	8009d98 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d6e:	4a15      	ldr	r2, [pc, #84]	@ (8009dc4 <HAL_UART_IRQHandler+0x2c0>)
 8009d70:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7f9 fc77 	bl	800366c <HAL_DMA_Abort_IT>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d019      	beq.n	8009db8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009d92:	4610      	mov	r0, r2
 8009d94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d96:	e00f      	b.n	8009db8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 fa81 	bl	800a2a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d9e:	e00b      	b.n	8009db8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fa7d 	bl	800a2a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009da6:	e007      	b.n	8009db8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 fa79 	bl	800a2a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009db6:	e253      	b.n	800a260 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009db8:	bf00      	nop
    return;
 8009dba:	e251      	b.n	800a260 <HAL_UART_IRQHandler+0x75c>
 8009dbc:	10000001 	.word	0x10000001
 8009dc0:	04000120 	.word	0x04000120
 8009dc4:	0800b7d7 	.word	0x0800b7d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	f040 81e7 	bne.w	800a1a0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dd6:	f003 0310 	and.w	r3, r3, #16
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f000 81e0 	beq.w	800a1a0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009de4:	f003 0310 	and.w	r3, r3, #16
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 81d9 	beq.w	800a1a0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2210      	movs	r2, #16
 8009df4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e00:	2b40      	cmp	r3, #64	@ 0x40
 8009e02:	f040 8151 	bne.w	800a0a8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a96      	ldr	r2, [pc, #600]	@ (800a068 <HAL_UART_IRQHandler+0x564>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d068      	beq.n	8009ee6 <HAL_UART_IRQHandler+0x3e2>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a93      	ldr	r2, [pc, #588]	@ (800a06c <HAL_UART_IRQHandler+0x568>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d061      	beq.n	8009ee6 <HAL_UART_IRQHandler+0x3e2>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a91      	ldr	r2, [pc, #580]	@ (800a070 <HAL_UART_IRQHandler+0x56c>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d05a      	beq.n	8009ee6 <HAL_UART_IRQHandler+0x3e2>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a8e      	ldr	r2, [pc, #568]	@ (800a074 <HAL_UART_IRQHandler+0x570>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d053      	beq.n	8009ee6 <HAL_UART_IRQHandler+0x3e2>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a8c      	ldr	r2, [pc, #560]	@ (800a078 <HAL_UART_IRQHandler+0x574>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d04c      	beq.n	8009ee6 <HAL_UART_IRQHandler+0x3e2>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a89      	ldr	r2, [pc, #548]	@ (800a07c <HAL_UART_IRQHandler+0x578>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d045      	beq.n	8009ee6 <HAL_UART_IRQHandler+0x3e2>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a87      	ldr	r2, [pc, #540]	@ (800a080 <HAL_UART_IRQHandler+0x57c>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d03e      	beq.n	8009ee6 <HAL_UART_IRQHandler+0x3e2>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a84      	ldr	r2, [pc, #528]	@ (800a084 <HAL_UART_IRQHandler+0x580>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d037      	beq.n	8009ee6 <HAL_UART_IRQHandler+0x3e2>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a82      	ldr	r2, [pc, #520]	@ (800a088 <HAL_UART_IRQHandler+0x584>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d030      	beq.n	8009ee6 <HAL_UART_IRQHandler+0x3e2>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a7f      	ldr	r2, [pc, #508]	@ (800a08c <HAL_UART_IRQHandler+0x588>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d029      	beq.n	8009ee6 <HAL_UART_IRQHandler+0x3e2>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a7d      	ldr	r2, [pc, #500]	@ (800a090 <HAL_UART_IRQHandler+0x58c>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d022      	beq.n	8009ee6 <HAL_UART_IRQHandler+0x3e2>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a7a      	ldr	r2, [pc, #488]	@ (800a094 <HAL_UART_IRQHandler+0x590>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d01b      	beq.n	8009ee6 <HAL_UART_IRQHandler+0x3e2>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a78      	ldr	r2, [pc, #480]	@ (800a098 <HAL_UART_IRQHandler+0x594>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d014      	beq.n	8009ee6 <HAL_UART_IRQHandler+0x3e2>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a75      	ldr	r2, [pc, #468]	@ (800a09c <HAL_UART_IRQHandler+0x598>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d00d      	beq.n	8009ee6 <HAL_UART_IRQHandler+0x3e2>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a73      	ldr	r2, [pc, #460]	@ (800a0a0 <HAL_UART_IRQHandler+0x59c>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d006      	beq.n	8009ee6 <HAL_UART_IRQHandler+0x3e2>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a70      	ldr	r2, [pc, #448]	@ (800a0a4 <HAL_UART_IRQHandler+0x5a0>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d106      	bne.n	8009ef4 <HAL_UART_IRQHandler+0x3f0>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	e005      	b.n	8009f00 <HAL_UART_IRQHandler+0x3fc>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009f04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f000 81ab 	beq.w	800a264 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	f080 81a3 	bcs.w	800a264 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f2e:	69db      	ldr	r3, [r3, #28]
 8009f30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f34:	f000 8087 	beq.w	800a046 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009f44:	e853 3f00 	ldrex	r3, [r3]
 8009f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009f4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009f62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f66:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009f6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009f72:	e841 2300 	strex	r3, r2, [r1]
 8009f76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1da      	bne.n	8009f38 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	3308      	adds	r3, #8
 8009f88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f8c:	e853 3f00 	ldrex	r3, [r3]
 8009f90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009f92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f94:	f023 0301 	bic.w	r3, r3, #1
 8009f98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	3308      	adds	r3, #8
 8009fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009fa6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009faa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009fae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009fb2:	e841 2300 	strex	r3, r2, [r1]
 8009fb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009fb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1e1      	bne.n	8009f82 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	3308      	adds	r3, #8
 8009fc4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009fc8:	e853 3f00 	ldrex	r3, [r3]
 8009fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009fce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009fd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	3308      	adds	r3, #8
 8009fde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009fe2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009fe8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009fea:	e841 2300 	strex	r3, r2, [r1]
 8009fee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009ff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d1e3      	bne.n	8009fbe <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2220      	movs	r2, #32
 8009ffa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a00c:	e853 3f00 	ldrex	r3, [r3]
 800a010:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a014:	f023 0310 	bic.w	r3, r3, #16
 800a018:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	461a      	mov	r2, r3
 800a022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a026:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a028:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a02c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a02e:	e841 2300 	strex	r3, r2, [r1]
 800a032:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a036:	2b00      	cmp	r3, #0
 800a038:	d1e4      	bne.n	800a004 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a040:	4618      	mov	r0, r3
 800a042:	f7f8 fff5 	bl	8003030 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2202      	movs	r2, #2
 800a04a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a058:	b29b      	uxth	r3, r3
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	4619      	mov	r1, r3
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 f927 	bl	800a2b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a066:	e0fd      	b.n	800a264 <HAL_UART_IRQHandler+0x760>
 800a068:	40020010 	.word	0x40020010
 800a06c:	40020028 	.word	0x40020028
 800a070:	40020040 	.word	0x40020040
 800a074:	40020058 	.word	0x40020058
 800a078:	40020070 	.word	0x40020070
 800a07c:	40020088 	.word	0x40020088
 800a080:	400200a0 	.word	0x400200a0
 800a084:	400200b8 	.word	0x400200b8
 800a088:	40020410 	.word	0x40020410
 800a08c:	40020428 	.word	0x40020428
 800a090:	40020440 	.word	0x40020440
 800a094:	40020458 	.word	0x40020458
 800a098:	40020470 	.word	0x40020470
 800a09c:	40020488 	.word	0x40020488
 800a0a0:	400204a0 	.word	0x400204a0
 800a0a4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	1ad3      	subs	r3, r2, r3
 800a0b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f000 80cf 	beq.w	800a268 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a0ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f000 80ca 	beq.w	800a268 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0dc:	e853 3f00 	ldrex	r3, [r3]
 800a0e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a0f6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0f8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0fe:	e841 2300 	strex	r3, r2, [r1]
 800a102:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a106:	2b00      	cmp	r3, #0
 800a108:	d1e4      	bne.n	800a0d4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	3308      	adds	r3, #8
 800a110:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a114:	e853 3f00 	ldrex	r3, [r3]
 800a118:	623b      	str	r3, [r7, #32]
   return(result);
 800a11a:	6a3a      	ldr	r2, [r7, #32]
 800a11c:	4b55      	ldr	r3, [pc, #340]	@ (800a274 <HAL_UART_IRQHandler+0x770>)
 800a11e:	4013      	ands	r3, r2
 800a120:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	3308      	adds	r3, #8
 800a12a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a12e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a130:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a132:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a136:	e841 2300 	strex	r3, r2, [r1]
 800a13a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1e3      	bne.n	800a10a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2220      	movs	r2, #32
 800a146:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	e853 3f00 	ldrex	r3, [r3]
 800a162:	60fb      	str	r3, [r7, #12]
   return(result);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f023 0310 	bic.w	r3, r3, #16
 800a16a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	461a      	mov	r2, r3
 800a174:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a178:	61fb      	str	r3, [r7, #28]
 800a17a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17c:	69b9      	ldr	r1, [r7, #24]
 800a17e:	69fa      	ldr	r2, [r7, #28]
 800a180:	e841 2300 	strex	r3, r2, [r1]
 800a184:	617b      	str	r3, [r7, #20]
   return(result);
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1e4      	bne.n	800a156 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2202      	movs	r2, #2
 800a190:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a192:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a196:	4619      	mov	r1, r3
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 f88b 	bl	800a2b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a19e:	e063      	b.n	800a268 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a1a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00e      	beq.n	800a1ca <HAL_UART_IRQHandler+0x6c6>
 800a1ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d008      	beq.n	800a1ca <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a1c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f002 f8ce 	bl	800c364 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1c8:	e051      	b.n	800a26e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a1ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d014      	beq.n	800a200 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a1d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d105      	bne.n	800a1ee <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a1e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d008      	beq.n	800a200 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d03a      	beq.n	800a26c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	4798      	blx	r3
    }
    return;
 800a1fe:	e035      	b.n	800a26c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d009      	beq.n	800a220 <HAL_UART_IRQHandler+0x71c>
 800a20c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a214:	2b00      	cmp	r3, #0
 800a216:	d003      	beq.n	800a220 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f001 faf2 	bl	800b802 <UART_EndTransmit_IT>
    return;
 800a21e:	e026      	b.n	800a26e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a224:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d009      	beq.n	800a240 <HAL_UART_IRQHandler+0x73c>
 800a22c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a230:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a234:	2b00      	cmp	r3, #0
 800a236:	d003      	beq.n	800a240 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f002 f8a7 	bl	800c38c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a23e:	e016      	b.n	800a26e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a244:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d010      	beq.n	800a26e <HAL_UART_IRQHandler+0x76a>
 800a24c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a250:	2b00      	cmp	r3, #0
 800a252:	da0c      	bge.n	800a26e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f002 f88f 	bl	800c378 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a25a:	e008      	b.n	800a26e <HAL_UART_IRQHandler+0x76a>
      return;
 800a25c:	bf00      	nop
 800a25e:	e006      	b.n	800a26e <HAL_UART_IRQHandler+0x76a>
    return;
 800a260:	bf00      	nop
 800a262:	e004      	b.n	800a26e <HAL_UART_IRQHandler+0x76a>
      return;
 800a264:	bf00      	nop
 800a266:	e002      	b.n	800a26e <HAL_UART_IRQHandler+0x76a>
      return;
 800a268:	bf00      	nop
 800a26a:	e000      	b.n	800a26e <HAL_UART_IRQHandler+0x76a>
    return;
 800a26c:	bf00      	nop
  }
}
 800a26e:	37e8      	adds	r7, #232	@ 0xe8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	effffffe 	.word	0xeffffffe

0800a278 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a280:	bf00      	nop
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a294:	bf00      	nop
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a2a8:	bf00      	nop
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	460b      	mov	r3, r1
 800a2be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a2c0:	bf00      	nop
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2d0:	b092      	sub	sp, #72	@ 0x48
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	689a      	ldr	r2, [r3, #8]
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	691b      	ldr	r3, [r3, #16]
 800a2e4:	431a      	orrs	r2, r3
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	695b      	ldr	r3, [r3, #20]
 800a2ea:	431a      	orrs	r2, r3
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	69db      	ldr	r3, [r3, #28]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	4bbe      	ldr	r3, [pc, #760]	@ (800a5f4 <UART_SetConfig+0x328>)
 800a2fc:	4013      	ands	r3, r2
 800a2fe:	697a      	ldr	r2, [r7, #20]
 800a300:	6812      	ldr	r2, [r2, #0]
 800a302:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a304:	430b      	orrs	r3, r1
 800a306:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	68da      	ldr	r2, [r3, #12]
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	430a      	orrs	r2, r1
 800a31c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	699b      	ldr	r3, [r3, #24]
 800a322:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4ab3      	ldr	r2, [pc, #716]	@ (800a5f8 <UART_SetConfig+0x32c>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d004      	beq.n	800a338 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	6a1b      	ldr	r3, [r3, #32]
 800a332:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a334:	4313      	orrs	r3, r2
 800a336:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	689a      	ldr	r2, [r3, #8]
 800a33e:	4baf      	ldr	r3, [pc, #700]	@ (800a5fc <UART_SetConfig+0x330>)
 800a340:	4013      	ands	r3, r2
 800a342:	697a      	ldr	r2, [r7, #20]
 800a344:	6812      	ldr	r2, [r2, #0]
 800a346:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a348:	430b      	orrs	r3, r1
 800a34a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a352:	f023 010f 	bic.w	r1, r3, #15
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	430a      	orrs	r2, r1
 800a360:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4aa6      	ldr	r2, [pc, #664]	@ (800a600 <UART_SetConfig+0x334>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d177      	bne.n	800a45c <UART_SetConfig+0x190>
 800a36c:	4ba5      	ldr	r3, [pc, #660]	@ (800a604 <UART_SetConfig+0x338>)
 800a36e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a370:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a374:	2b28      	cmp	r3, #40	@ 0x28
 800a376:	d86d      	bhi.n	800a454 <UART_SetConfig+0x188>
 800a378:	a201      	add	r2, pc, #4	@ (adr r2, 800a380 <UART_SetConfig+0xb4>)
 800a37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37e:	bf00      	nop
 800a380:	0800a425 	.word	0x0800a425
 800a384:	0800a455 	.word	0x0800a455
 800a388:	0800a455 	.word	0x0800a455
 800a38c:	0800a455 	.word	0x0800a455
 800a390:	0800a455 	.word	0x0800a455
 800a394:	0800a455 	.word	0x0800a455
 800a398:	0800a455 	.word	0x0800a455
 800a39c:	0800a455 	.word	0x0800a455
 800a3a0:	0800a42d 	.word	0x0800a42d
 800a3a4:	0800a455 	.word	0x0800a455
 800a3a8:	0800a455 	.word	0x0800a455
 800a3ac:	0800a455 	.word	0x0800a455
 800a3b0:	0800a455 	.word	0x0800a455
 800a3b4:	0800a455 	.word	0x0800a455
 800a3b8:	0800a455 	.word	0x0800a455
 800a3bc:	0800a455 	.word	0x0800a455
 800a3c0:	0800a435 	.word	0x0800a435
 800a3c4:	0800a455 	.word	0x0800a455
 800a3c8:	0800a455 	.word	0x0800a455
 800a3cc:	0800a455 	.word	0x0800a455
 800a3d0:	0800a455 	.word	0x0800a455
 800a3d4:	0800a455 	.word	0x0800a455
 800a3d8:	0800a455 	.word	0x0800a455
 800a3dc:	0800a455 	.word	0x0800a455
 800a3e0:	0800a43d 	.word	0x0800a43d
 800a3e4:	0800a455 	.word	0x0800a455
 800a3e8:	0800a455 	.word	0x0800a455
 800a3ec:	0800a455 	.word	0x0800a455
 800a3f0:	0800a455 	.word	0x0800a455
 800a3f4:	0800a455 	.word	0x0800a455
 800a3f8:	0800a455 	.word	0x0800a455
 800a3fc:	0800a455 	.word	0x0800a455
 800a400:	0800a445 	.word	0x0800a445
 800a404:	0800a455 	.word	0x0800a455
 800a408:	0800a455 	.word	0x0800a455
 800a40c:	0800a455 	.word	0x0800a455
 800a410:	0800a455 	.word	0x0800a455
 800a414:	0800a455 	.word	0x0800a455
 800a418:	0800a455 	.word	0x0800a455
 800a41c:	0800a455 	.word	0x0800a455
 800a420:	0800a44d 	.word	0x0800a44d
 800a424:	2301      	movs	r3, #1
 800a426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a42a:	e222      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a42c:	2304      	movs	r3, #4
 800a42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a432:	e21e      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a434:	2308      	movs	r3, #8
 800a436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a43a:	e21a      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a43c:	2310      	movs	r3, #16
 800a43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a442:	e216      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a444:	2320      	movs	r3, #32
 800a446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a44a:	e212      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a44c:	2340      	movs	r3, #64	@ 0x40
 800a44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a452:	e20e      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a454:	2380      	movs	r3, #128	@ 0x80
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a45a:	e20a      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a69      	ldr	r2, [pc, #420]	@ (800a608 <UART_SetConfig+0x33c>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d130      	bne.n	800a4c8 <UART_SetConfig+0x1fc>
 800a466:	4b67      	ldr	r3, [pc, #412]	@ (800a604 <UART_SetConfig+0x338>)
 800a468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a46a:	f003 0307 	and.w	r3, r3, #7
 800a46e:	2b05      	cmp	r3, #5
 800a470:	d826      	bhi.n	800a4c0 <UART_SetConfig+0x1f4>
 800a472:	a201      	add	r2, pc, #4	@ (adr r2, 800a478 <UART_SetConfig+0x1ac>)
 800a474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a478:	0800a491 	.word	0x0800a491
 800a47c:	0800a499 	.word	0x0800a499
 800a480:	0800a4a1 	.word	0x0800a4a1
 800a484:	0800a4a9 	.word	0x0800a4a9
 800a488:	0800a4b1 	.word	0x0800a4b1
 800a48c:	0800a4b9 	.word	0x0800a4b9
 800a490:	2300      	movs	r3, #0
 800a492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a496:	e1ec      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a498:	2304      	movs	r3, #4
 800a49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a49e:	e1e8      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a4a0:	2308      	movs	r3, #8
 800a4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4a6:	e1e4      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a4a8:	2310      	movs	r3, #16
 800a4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ae:	e1e0      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a4b0:	2320      	movs	r3, #32
 800a4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4b6:	e1dc      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a4b8:	2340      	movs	r3, #64	@ 0x40
 800a4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4be:	e1d8      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a4c0:	2380      	movs	r3, #128	@ 0x80
 800a4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4c6:	e1d4      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a4f      	ldr	r2, [pc, #316]	@ (800a60c <UART_SetConfig+0x340>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d130      	bne.n	800a534 <UART_SetConfig+0x268>
 800a4d2:	4b4c      	ldr	r3, [pc, #304]	@ (800a604 <UART_SetConfig+0x338>)
 800a4d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4d6:	f003 0307 	and.w	r3, r3, #7
 800a4da:	2b05      	cmp	r3, #5
 800a4dc:	d826      	bhi.n	800a52c <UART_SetConfig+0x260>
 800a4de:	a201      	add	r2, pc, #4	@ (adr r2, 800a4e4 <UART_SetConfig+0x218>)
 800a4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e4:	0800a4fd 	.word	0x0800a4fd
 800a4e8:	0800a505 	.word	0x0800a505
 800a4ec:	0800a50d 	.word	0x0800a50d
 800a4f0:	0800a515 	.word	0x0800a515
 800a4f4:	0800a51d 	.word	0x0800a51d
 800a4f8:	0800a525 	.word	0x0800a525
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a502:	e1b6      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a504:	2304      	movs	r3, #4
 800a506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a50a:	e1b2      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a50c:	2308      	movs	r3, #8
 800a50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a512:	e1ae      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a514:	2310      	movs	r3, #16
 800a516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a51a:	e1aa      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a51c:	2320      	movs	r3, #32
 800a51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a522:	e1a6      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a524:	2340      	movs	r3, #64	@ 0x40
 800a526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a52a:	e1a2      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a52c:	2380      	movs	r3, #128	@ 0x80
 800a52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a532:	e19e      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a35      	ldr	r2, [pc, #212]	@ (800a610 <UART_SetConfig+0x344>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d130      	bne.n	800a5a0 <UART_SetConfig+0x2d4>
 800a53e:	4b31      	ldr	r3, [pc, #196]	@ (800a604 <UART_SetConfig+0x338>)
 800a540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a542:	f003 0307 	and.w	r3, r3, #7
 800a546:	2b05      	cmp	r3, #5
 800a548:	d826      	bhi.n	800a598 <UART_SetConfig+0x2cc>
 800a54a:	a201      	add	r2, pc, #4	@ (adr r2, 800a550 <UART_SetConfig+0x284>)
 800a54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a550:	0800a569 	.word	0x0800a569
 800a554:	0800a571 	.word	0x0800a571
 800a558:	0800a579 	.word	0x0800a579
 800a55c:	0800a581 	.word	0x0800a581
 800a560:	0800a589 	.word	0x0800a589
 800a564:	0800a591 	.word	0x0800a591
 800a568:	2300      	movs	r3, #0
 800a56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a56e:	e180      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a570:	2304      	movs	r3, #4
 800a572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a576:	e17c      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a578:	2308      	movs	r3, #8
 800a57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a57e:	e178      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a580:	2310      	movs	r3, #16
 800a582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a586:	e174      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a588:	2320      	movs	r3, #32
 800a58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a58e:	e170      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a590:	2340      	movs	r3, #64	@ 0x40
 800a592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a596:	e16c      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a598:	2380      	movs	r3, #128	@ 0x80
 800a59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a59e:	e168      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a1b      	ldr	r2, [pc, #108]	@ (800a614 <UART_SetConfig+0x348>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d142      	bne.n	800a630 <UART_SetConfig+0x364>
 800a5aa:	4b16      	ldr	r3, [pc, #88]	@ (800a604 <UART_SetConfig+0x338>)
 800a5ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ae:	f003 0307 	and.w	r3, r3, #7
 800a5b2:	2b05      	cmp	r3, #5
 800a5b4:	d838      	bhi.n	800a628 <UART_SetConfig+0x35c>
 800a5b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5bc <UART_SetConfig+0x2f0>)
 800a5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5bc:	0800a5d5 	.word	0x0800a5d5
 800a5c0:	0800a5dd 	.word	0x0800a5dd
 800a5c4:	0800a5e5 	.word	0x0800a5e5
 800a5c8:	0800a5ed 	.word	0x0800a5ed
 800a5cc:	0800a619 	.word	0x0800a619
 800a5d0:	0800a621 	.word	0x0800a621
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5da:	e14a      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a5dc:	2304      	movs	r3, #4
 800a5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5e2:	e146      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a5e4:	2308      	movs	r3, #8
 800a5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ea:	e142      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a5ec:	2310      	movs	r3, #16
 800a5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5f2:	e13e      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a5f4:	cfff69f3 	.word	0xcfff69f3
 800a5f8:	58000c00 	.word	0x58000c00
 800a5fc:	11fff4ff 	.word	0x11fff4ff
 800a600:	40011000 	.word	0x40011000
 800a604:	58024400 	.word	0x58024400
 800a608:	40004400 	.word	0x40004400
 800a60c:	40004800 	.word	0x40004800
 800a610:	40004c00 	.word	0x40004c00
 800a614:	40005000 	.word	0x40005000
 800a618:	2320      	movs	r3, #32
 800a61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a61e:	e128      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a620:	2340      	movs	r3, #64	@ 0x40
 800a622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a626:	e124      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a628:	2380      	movs	r3, #128	@ 0x80
 800a62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a62e:	e120      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4acb      	ldr	r2, [pc, #812]	@ (800a964 <UART_SetConfig+0x698>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d176      	bne.n	800a728 <UART_SetConfig+0x45c>
 800a63a:	4bcb      	ldr	r3, [pc, #812]	@ (800a968 <UART_SetConfig+0x69c>)
 800a63c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a63e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a642:	2b28      	cmp	r3, #40	@ 0x28
 800a644:	d86c      	bhi.n	800a720 <UART_SetConfig+0x454>
 800a646:	a201      	add	r2, pc, #4	@ (adr r2, 800a64c <UART_SetConfig+0x380>)
 800a648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64c:	0800a6f1 	.word	0x0800a6f1
 800a650:	0800a721 	.word	0x0800a721
 800a654:	0800a721 	.word	0x0800a721
 800a658:	0800a721 	.word	0x0800a721
 800a65c:	0800a721 	.word	0x0800a721
 800a660:	0800a721 	.word	0x0800a721
 800a664:	0800a721 	.word	0x0800a721
 800a668:	0800a721 	.word	0x0800a721
 800a66c:	0800a6f9 	.word	0x0800a6f9
 800a670:	0800a721 	.word	0x0800a721
 800a674:	0800a721 	.word	0x0800a721
 800a678:	0800a721 	.word	0x0800a721
 800a67c:	0800a721 	.word	0x0800a721
 800a680:	0800a721 	.word	0x0800a721
 800a684:	0800a721 	.word	0x0800a721
 800a688:	0800a721 	.word	0x0800a721
 800a68c:	0800a701 	.word	0x0800a701
 800a690:	0800a721 	.word	0x0800a721
 800a694:	0800a721 	.word	0x0800a721
 800a698:	0800a721 	.word	0x0800a721
 800a69c:	0800a721 	.word	0x0800a721
 800a6a0:	0800a721 	.word	0x0800a721
 800a6a4:	0800a721 	.word	0x0800a721
 800a6a8:	0800a721 	.word	0x0800a721
 800a6ac:	0800a709 	.word	0x0800a709
 800a6b0:	0800a721 	.word	0x0800a721
 800a6b4:	0800a721 	.word	0x0800a721
 800a6b8:	0800a721 	.word	0x0800a721
 800a6bc:	0800a721 	.word	0x0800a721
 800a6c0:	0800a721 	.word	0x0800a721
 800a6c4:	0800a721 	.word	0x0800a721
 800a6c8:	0800a721 	.word	0x0800a721
 800a6cc:	0800a711 	.word	0x0800a711
 800a6d0:	0800a721 	.word	0x0800a721
 800a6d4:	0800a721 	.word	0x0800a721
 800a6d8:	0800a721 	.word	0x0800a721
 800a6dc:	0800a721 	.word	0x0800a721
 800a6e0:	0800a721 	.word	0x0800a721
 800a6e4:	0800a721 	.word	0x0800a721
 800a6e8:	0800a721 	.word	0x0800a721
 800a6ec:	0800a719 	.word	0x0800a719
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6f6:	e0bc      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a6f8:	2304      	movs	r3, #4
 800a6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6fe:	e0b8      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a700:	2308      	movs	r3, #8
 800a702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a706:	e0b4      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a708:	2310      	movs	r3, #16
 800a70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a70e:	e0b0      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a710:	2320      	movs	r3, #32
 800a712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a716:	e0ac      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a718:	2340      	movs	r3, #64	@ 0x40
 800a71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a71e:	e0a8      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a720:	2380      	movs	r3, #128	@ 0x80
 800a722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a726:	e0a4      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a8f      	ldr	r2, [pc, #572]	@ (800a96c <UART_SetConfig+0x6a0>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d130      	bne.n	800a794 <UART_SetConfig+0x4c8>
 800a732:	4b8d      	ldr	r3, [pc, #564]	@ (800a968 <UART_SetConfig+0x69c>)
 800a734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a736:	f003 0307 	and.w	r3, r3, #7
 800a73a:	2b05      	cmp	r3, #5
 800a73c:	d826      	bhi.n	800a78c <UART_SetConfig+0x4c0>
 800a73e:	a201      	add	r2, pc, #4	@ (adr r2, 800a744 <UART_SetConfig+0x478>)
 800a740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a744:	0800a75d 	.word	0x0800a75d
 800a748:	0800a765 	.word	0x0800a765
 800a74c:	0800a76d 	.word	0x0800a76d
 800a750:	0800a775 	.word	0x0800a775
 800a754:	0800a77d 	.word	0x0800a77d
 800a758:	0800a785 	.word	0x0800a785
 800a75c:	2300      	movs	r3, #0
 800a75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a762:	e086      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a764:	2304      	movs	r3, #4
 800a766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a76a:	e082      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a76c:	2308      	movs	r3, #8
 800a76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a772:	e07e      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a774:	2310      	movs	r3, #16
 800a776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a77a:	e07a      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a77c:	2320      	movs	r3, #32
 800a77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a782:	e076      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a784:	2340      	movs	r3, #64	@ 0x40
 800a786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a78a:	e072      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a78c:	2380      	movs	r3, #128	@ 0x80
 800a78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a792:	e06e      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a75      	ldr	r2, [pc, #468]	@ (800a970 <UART_SetConfig+0x6a4>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d130      	bne.n	800a800 <UART_SetConfig+0x534>
 800a79e:	4b72      	ldr	r3, [pc, #456]	@ (800a968 <UART_SetConfig+0x69c>)
 800a7a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7a2:	f003 0307 	and.w	r3, r3, #7
 800a7a6:	2b05      	cmp	r3, #5
 800a7a8:	d826      	bhi.n	800a7f8 <UART_SetConfig+0x52c>
 800a7aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a7b0 <UART_SetConfig+0x4e4>)
 800a7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b0:	0800a7c9 	.word	0x0800a7c9
 800a7b4:	0800a7d1 	.word	0x0800a7d1
 800a7b8:	0800a7d9 	.word	0x0800a7d9
 800a7bc:	0800a7e1 	.word	0x0800a7e1
 800a7c0:	0800a7e9 	.word	0x0800a7e9
 800a7c4:	0800a7f1 	.word	0x0800a7f1
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ce:	e050      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a7d0:	2304      	movs	r3, #4
 800a7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7d6:	e04c      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a7d8:	2308      	movs	r3, #8
 800a7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7de:	e048      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a7e0:	2310      	movs	r3, #16
 800a7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7e6:	e044      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a7e8:	2320      	movs	r3, #32
 800a7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ee:	e040      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a7f0:	2340      	movs	r3, #64	@ 0x40
 800a7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7f6:	e03c      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a7f8:	2380      	movs	r3, #128	@ 0x80
 800a7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7fe:	e038      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a5b      	ldr	r2, [pc, #364]	@ (800a974 <UART_SetConfig+0x6a8>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d130      	bne.n	800a86c <UART_SetConfig+0x5a0>
 800a80a:	4b57      	ldr	r3, [pc, #348]	@ (800a968 <UART_SetConfig+0x69c>)
 800a80c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a80e:	f003 0307 	and.w	r3, r3, #7
 800a812:	2b05      	cmp	r3, #5
 800a814:	d826      	bhi.n	800a864 <UART_SetConfig+0x598>
 800a816:	a201      	add	r2, pc, #4	@ (adr r2, 800a81c <UART_SetConfig+0x550>)
 800a818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81c:	0800a835 	.word	0x0800a835
 800a820:	0800a83d 	.word	0x0800a83d
 800a824:	0800a845 	.word	0x0800a845
 800a828:	0800a84d 	.word	0x0800a84d
 800a82c:	0800a855 	.word	0x0800a855
 800a830:	0800a85d 	.word	0x0800a85d
 800a834:	2302      	movs	r3, #2
 800a836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a83a:	e01a      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a83c:	2304      	movs	r3, #4
 800a83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a842:	e016      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a844:	2308      	movs	r3, #8
 800a846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a84a:	e012      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a84c:	2310      	movs	r3, #16
 800a84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a852:	e00e      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a854:	2320      	movs	r3, #32
 800a856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a85a:	e00a      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a85c:	2340      	movs	r3, #64	@ 0x40
 800a85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a862:	e006      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a864:	2380      	movs	r3, #128	@ 0x80
 800a866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a86a:	e002      	b.n	800a872 <UART_SetConfig+0x5a6>
 800a86c:	2380      	movs	r3, #128	@ 0x80
 800a86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a3f      	ldr	r2, [pc, #252]	@ (800a974 <UART_SetConfig+0x6a8>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	f040 80f8 	bne.w	800aa6e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a87e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a882:	2b20      	cmp	r3, #32
 800a884:	dc46      	bgt.n	800a914 <UART_SetConfig+0x648>
 800a886:	2b02      	cmp	r3, #2
 800a888:	f2c0 8082 	blt.w	800a990 <UART_SetConfig+0x6c4>
 800a88c:	3b02      	subs	r3, #2
 800a88e:	2b1e      	cmp	r3, #30
 800a890:	d87e      	bhi.n	800a990 <UART_SetConfig+0x6c4>
 800a892:	a201      	add	r2, pc, #4	@ (adr r2, 800a898 <UART_SetConfig+0x5cc>)
 800a894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a898:	0800a91b 	.word	0x0800a91b
 800a89c:	0800a991 	.word	0x0800a991
 800a8a0:	0800a923 	.word	0x0800a923
 800a8a4:	0800a991 	.word	0x0800a991
 800a8a8:	0800a991 	.word	0x0800a991
 800a8ac:	0800a991 	.word	0x0800a991
 800a8b0:	0800a933 	.word	0x0800a933
 800a8b4:	0800a991 	.word	0x0800a991
 800a8b8:	0800a991 	.word	0x0800a991
 800a8bc:	0800a991 	.word	0x0800a991
 800a8c0:	0800a991 	.word	0x0800a991
 800a8c4:	0800a991 	.word	0x0800a991
 800a8c8:	0800a991 	.word	0x0800a991
 800a8cc:	0800a991 	.word	0x0800a991
 800a8d0:	0800a943 	.word	0x0800a943
 800a8d4:	0800a991 	.word	0x0800a991
 800a8d8:	0800a991 	.word	0x0800a991
 800a8dc:	0800a991 	.word	0x0800a991
 800a8e0:	0800a991 	.word	0x0800a991
 800a8e4:	0800a991 	.word	0x0800a991
 800a8e8:	0800a991 	.word	0x0800a991
 800a8ec:	0800a991 	.word	0x0800a991
 800a8f0:	0800a991 	.word	0x0800a991
 800a8f4:	0800a991 	.word	0x0800a991
 800a8f8:	0800a991 	.word	0x0800a991
 800a8fc:	0800a991 	.word	0x0800a991
 800a900:	0800a991 	.word	0x0800a991
 800a904:	0800a991 	.word	0x0800a991
 800a908:	0800a991 	.word	0x0800a991
 800a90c:	0800a991 	.word	0x0800a991
 800a910:	0800a983 	.word	0x0800a983
 800a914:	2b40      	cmp	r3, #64	@ 0x40
 800a916:	d037      	beq.n	800a988 <UART_SetConfig+0x6bc>
 800a918:	e03a      	b.n	800a990 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a91a:	f7fd ffc5 	bl	80088a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a91e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a920:	e03c      	b.n	800a99c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a926:	4618      	mov	r0, r3
 800a928:	f7fd ffd4 	bl	80088d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a930:	e034      	b.n	800a99c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a932:	f107 0318 	add.w	r3, r7, #24
 800a936:	4618      	mov	r0, r3
 800a938:	f7fe f920 	bl	8008b7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a940:	e02c      	b.n	800a99c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a942:	4b09      	ldr	r3, [pc, #36]	@ (800a968 <UART_SetConfig+0x69c>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 0320 	and.w	r3, r3, #32
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d016      	beq.n	800a97c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a94e:	4b06      	ldr	r3, [pc, #24]	@ (800a968 <UART_SetConfig+0x69c>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	08db      	lsrs	r3, r3, #3
 800a954:	f003 0303 	and.w	r3, r3, #3
 800a958:	4a07      	ldr	r2, [pc, #28]	@ (800a978 <UART_SetConfig+0x6ac>)
 800a95a:	fa22 f303 	lsr.w	r3, r2, r3
 800a95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a960:	e01c      	b.n	800a99c <UART_SetConfig+0x6d0>
 800a962:	bf00      	nop
 800a964:	40011400 	.word	0x40011400
 800a968:	58024400 	.word	0x58024400
 800a96c:	40007800 	.word	0x40007800
 800a970:	40007c00 	.word	0x40007c00
 800a974:	58000c00 	.word	0x58000c00
 800a978:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a97c:	4b9d      	ldr	r3, [pc, #628]	@ (800abf4 <UART_SetConfig+0x928>)
 800a97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a980:	e00c      	b.n	800a99c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a982:	4b9d      	ldr	r3, [pc, #628]	@ (800abf8 <UART_SetConfig+0x92c>)
 800a984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a986:	e009      	b.n	800a99c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a988:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a98c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a98e:	e005      	b.n	800a99c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a990:	2300      	movs	r3, #0
 800a992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a99a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a99c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f000 81de 	beq.w	800ad60 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9a8:	4a94      	ldr	r2, [pc, #592]	@ (800abfc <UART_SetConfig+0x930>)
 800a9aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9b6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	685a      	ldr	r2, [r3, #4]
 800a9bc:	4613      	mov	r3, r2
 800a9be:	005b      	lsls	r3, r3, #1
 800a9c0:	4413      	add	r3, r2
 800a9c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d305      	bcc.n	800a9d4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d903      	bls.n	800a9dc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a9da:	e1c1      	b.n	800ad60 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9de:	2200      	movs	r2, #0
 800a9e0:	60bb      	str	r3, [r7, #8]
 800a9e2:	60fa      	str	r2, [r7, #12]
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9e8:	4a84      	ldr	r2, [pc, #528]	@ (800abfc <UART_SetConfig+0x930>)
 800a9ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	603b      	str	r3, [r7, #0]
 800a9f4:	607a      	str	r2, [r7, #4]
 800a9f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a9fe:	f7f5 fc6f 	bl	80002e0 <__aeabi_uldivmod>
 800aa02:	4602      	mov	r2, r0
 800aa04:	460b      	mov	r3, r1
 800aa06:	4610      	mov	r0, r2
 800aa08:	4619      	mov	r1, r3
 800aa0a:	f04f 0200 	mov.w	r2, #0
 800aa0e:	f04f 0300 	mov.w	r3, #0
 800aa12:	020b      	lsls	r3, r1, #8
 800aa14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aa18:	0202      	lsls	r2, r0, #8
 800aa1a:	6979      	ldr	r1, [r7, #20]
 800aa1c:	6849      	ldr	r1, [r1, #4]
 800aa1e:	0849      	lsrs	r1, r1, #1
 800aa20:	2000      	movs	r0, #0
 800aa22:	460c      	mov	r4, r1
 800aa24:	4605      	mov	r5, r0
 800aa26:	eb12 0804 	adds.w	r8, r2, r4
 800aa2a:	eb43 0905 	adc.w	r9, r3, r5
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	469a      	mov	sl, r3
 800aa36:	4693      	mov	fp, r2
 800aa38:	4652      	mov	r2, sl
 800aa3a:	465b      	mov	r3, fp
 800aa3c:	4640      	mov	r0, r8
 800aa3e:	4649      	mov	r1, r9
 800aa40:	f7f5 fc4e 	bl	80002e0 <__aeabi_uldivmod>
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	4613      	mov	r3, r2
 800aa4a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa52:	d308      	bcc.n	800aa66 <UART_SetConfig+0x79a>
 800aa54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa5a:	d204      	bcs.n	800aa66 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa62:	60da      	str	r2, [r3, #12]
 800aa64:	e17c      	b.n	800ad60 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aa6c:	e178      	b.n	800ad60 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	69db      	ldr	r3, [r3, #28]
 800aa72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa76:	f040 80c5 	bne.w	800ac04 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800aa7a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aa7e:	2b20      	cmp	r3, #32
 800aa80:	dc48      	bgt.n	800ab14 <UART_SetConfig+0x848>
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	db7b      	blt.n	800ab7e <UART_SetConfig+0x8b2>
 800aa86:	2b20      	cmp	r3, #32
 800aa88:	d879      	bhi.n	800ab7e <UART_SetConfig+0x8b2>
 800aa8a:	a201      	add	r2, pc, #4	@ (adr r2, 800aa90 <UART_SetConfig+0x7c4>)
 800aa8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa90:	0800ab1b 	.word	0x0800ab1b
 800aa94:	0800ab23 	.word	0x0800ab23
 800aa98:	0800ab7f 	.word	0x0800ab7f
 800aa9c:	0800ab7f 	.word	0x0800ab7f
 800aaa0:	0800ab2b 	.word	0x0800ab2b
 800aaa4:	0800ab7f 	.word	0x0800ab7f
 800aaa8:	0800ab7f 	.word	0x0800ab7f
 800aaac:	0800ab7f 	.word	0x0800ab7f
 800aab0:	0800ab3b 	.word	0x0800ab3b
 800aab4:	0800ab7f 	.word	0x0800ab7f
 800aab8:	0800ab7f 	.word	0x0800ab7f
 800aabc:	0800ab7f 	.word	0x0800ab7f
 800aac0:	0800ab7f 	.word	0x0800ab7f
 800aac4:	0800ab7f 	.word	0x0800ab7f
 800aac8:	0800ab7f 	.word	0x0800ab7f
 800aacc:	0800ab7f 	.word	0x0800ab7f
 800aad0:	0800ab4b 	.word	0x0800ab4b
 800aad4:	0800ab7f 	.word	0x0800ab7f
 800aad8:	0800ab7f 	.word	0x0800ab7f
 800aadc:	0800ab7f 	.word	0x0800ab7f
 800aae0:	0800ab7f 	.word	0x0800ab7f
 800aae4:	0800ab7f 	.word	0x0800ab7f
 800aae8:	0800ab7f 	.word	0x0800ab7f
 800aaec:	0800ab7f 	.word	0x0800ab7f
 800aaf0:	0800ab7f 	.word	0x0800ab7f
 800aaf4:	0800ab7f 	.word	0x0800ab7f
 800aaf8:	0800ab7f 	.word	0x0800ab7f
 800aafc:	0800ab7f 	.word	0x0800ab7f
 800ab00:	0800ab7f 	.word	0x0800ab7f
 800ab04:	0800ab7f 	.word	0x0800ab7f
 800ab08:	0800ab7f 	.word	0x0800ab7f
 800ab0c:	0800ab7f 	.word	0x0800ab7f
 800ab10:	0800ab71 	.word	0x0800ab71
 800ab14:	2b40      	cmp	r3, #64	@ 0x40
 800ab16:	d02e      	beq.n	800ab76 <UART_SetConfig+0x8aa>
 800ab18:	e031      	b.n	800ab7e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab1a:	f7fc fc4d 	bl	80073b8 <HAL_RCC_GetPCLK1Freq>
 800ab1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab20:	e033      	b.n	800ab8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab22:	f7fc fc5f 	bl	80073e4 <HAL_RCC_GetPCLK2Freq>
 800ab26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab28:	e02f      	b.n	800ab8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7fd fed0 	bl	80088d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab38:	e027      	b.n	800ab8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab3a:	f107 0318 	add.w	r3, r7, #24
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7fe f81c 	bl	8008b7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab48:	e01f      	b.n	800ab8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab4a:	4b2d      	ldr	r3, [pc, #180]	@ (800ac00 <UART_SetConfig+0x934>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 0320 	and.w	r3, r3, #32
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d009      	beq.n	800ab6a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab56:	4b2a      	ldr	r3, [pc, #168]	@ (800ac00 <UART_SetConfig+0x934>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	08db      	lsrs	r3, r3, #3
 800ab5c:	f003 0303 	and.w	r3, r3, #3
 800ab60:	4a24      	ldr	r2, [pc, #144]	@ (800abf4 <UART_SetConfig+0x928>)
 800ab62:	fa22 f303 	lsr.w	r3, r2, r3
 800ab66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab68:	e00f      	b.n	800ab8a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ab6a:	4b22      	ldr	r3, [pc, #136]	@ (800abf4 <UART_SetConfig+0x928>)
 800ab6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab6e:	e00c      	b.n	800ab8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab70:	4b21      	ldr	r3, [pc, #132]	@ (800abf8 <UART_SetConfig+0x92c>)
 800ab72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab74:	e009      	b.n	800ab8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab7c:	e005      	b.n	800ab8a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ab88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	f000 80e7 	beq.w	800ad60 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab96:	4a19      	ldr	r2, [pc, #100]	@ (800abfc <UART_SetConfig+0x930>)
 800ab98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aba0:	fbb3 f3f2 	udiv	r3, r3, r2
 800aba4:	005a      	lsls	r2, r3, #1
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	085b      	lsrs	r3, r3, #1
 800abac:	441a      	add	r2, r3
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800abb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abba:	2b0f      	cmp	r3, #15
 800abbc:	d916      	bls.n	800abec <UART_SetConfig+0x920>
 800abbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abc4:	d212      	bcs.n	800abec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800abc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc8:	b29b      	uxth	r3, r3
 800abca:	f023 030f 	bic.w	r3, r3, #15
 800abce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800abd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd2:	085b      	lsrs	r3, r3, #1
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	f003 0307 	and.w	r3, r3, #7
 800abda:	b29a      	uxth	r2, r3
 800abdc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800abde:	4313      	orrs	r3, r2
 800abe0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800abe8:	60da      	str	r2, [r3, #12]
 800abea:	e0b9      	b.n	800ad60 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800abf2:	e0b5      	b.n	800ad60 <UART_SetConfig+0xa94>
 800abf4:	03d09000 	.word	0x03d09000
 800abf8:	003d0900 	.word	0x003d0900
 800abfc:	0800f44c 	.word	0x0800f44c
 800ac00:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac04:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ac08:	2b20      	cmp	r3, #32
 800ac0a:	dc49      	bgt.n	800aca0 <UART_SetConfig+0x9d4>
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	db7c      	blt.n	800ad0a <UART_SetConfig+0xa3e>
 800ac10:	2b20      	cmp	r3, #32
 800ac12:	d87a      	bhi.n	800ad0a <UART_SetConfig+0xa3e>
 800ac14:	a201      	add	r2, pc, #4	@ (adr r2, 800ac1c <UART_SetConfig+0x950>)
 800ac16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac1a:	bf00      	nop
 800ac1c:	0800aca7 	.word	0x0800aca7
 800ac20:	0800acaf 	.word	0x0800acaf
 800ac24:	0800ad0b 	.word	0x0800ad0b
 800ac28:	0800ad0b 	.word	0x0800ad0b
 800ac2c:	0800acb7 	.word	0x0800acb7
 800ac30:	0800ad0b 	.word	0x0800ad0b
 800ac34:	0800ad0b 	.word	0x0800ad0b
 800ac38:	0800ad0b 	.word	0x0800ad0b
 800ac3c:	0800acc7 	.word	0x0800acc7
 800ac40:	0800ad0b 	.word	0x0800ad0b
 800ac44:	0800ad0b 	.word	0x0800ad0b
 800ac48:	0800ad0b 	.word	0x0800ad0b
 800ac4c:	0800ad0b 	.word	0x0800ad0b
 800ac50:	0800ad0b 	.word	0x0800ad0b
 800ac54:	0800ad0b 	.word	0x0800ad0b
 800ac58:	0800ad0b 	.word	0x0800ad0b
 800ac5c:	0800acd7 	.word	0x0800acd7
 800ac60:	0800ad0b 	.word	0x0800ad0b
 800ac64:	0800ad0b 	.word	0x0800ad0b
 800ac68:	0800ad0b 	.word	0x0800ad0b
 800ac6c:	0800ad0b 	.word	0x0800ad0b
 800ac70:	0800ad0b 	.word	0x0800ad0b
 800ac74:	0800ad0b 	.word	0x0800ad0b
 800ac78:	0800ad0b 	.word	0x0800ad0b
 800ac7c:	0800ad0b 	.word	0x0800ad0b
 800ac80:	0800ad0b 	.word	0x0800ad0b
 800ac84:	0800ad0b 	.word	0x0800ad0b
 800ac88:	0800ad0b 	.word	0x0800ad0b
 800ac8c:	0800ad0b 	.word	0x0800ad0b
 800ac90:	0800ad0b 	.word	0x0800ad0b
 800ac94:	0800ad0b 	.word	0x0800ad0b
 800ac98:	0800ad0b 	.word	0x0800ad0b
 800ac9c:	0800acfd 	.word	0x0800acfd
 800aca0:	2b40      	cmp	r3, #64	@ 0x40
 800aca2:	d02e      	beq.n	800ad02 <UART_SetConfig+0xa36>
 800aca4:	e031      	b.n	800ad0a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aca6:	f7fc fb87 	bl	80073b8 <HAL_RCC_GetPCLK1Freq>
 800acaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800acac:	e033      	b.n	800ad16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acae:	f7fc fb99 	bl	80073e4 <HAL_RCC_GetPCLK2Freq>
 800acb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800acb4:	e02f      	b.n	800ad16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800acba:	4618      	mov	r0, r3
 800acbc:	f7fd fe0a 	bl	80088d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800acc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acc4:	e027      	b.n	800ad16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acc6:	f107 0318 	add.w	r3, r7, #24
 800acca:	4618      	mov	r0, r3
 800accc:	f7fd ff56 	bl	8008b7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acd4:	e01f      	b.n	800ad16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acd6:	4b2d      	ldr	r3, [pc, #180]	@ (800ad8c <UART_SetConfig+0xac0>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f003 0320 	and.w	r3, r3, #32
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d009      	beq.n	800acf6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ace2:	4b2a      	ldr	r3, [pc, #168]	@ (800ad8c <UART_SetConfig+0xac0>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	08db      	lsrs	r3, r3, #3
 800ace8:	f003 0303 	and.w	r3, r3, #3
 800acec:	4a28      	ldr	r2, [pc, #160]	@ (800ad90 <UART_SetConfig+0xac4>)
 800acee:	fa22 f303 	lsr.w	r3, r2, r3
 800acf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800acf4:	e00f      	b.n	800ad16 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800acf6:	4b26      	ldr	r3, [pc, #152]	@ (800ad90 <UART_SetConfig+0xac4>)
 800acf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acfa:	e00c      	b.n	800ad16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800acfc:	4b25      	ldr	r3, [pc, #148]	@ (800ad94 <UART_SetConfig+0xac8>)
 800acfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad00:	e009      	b.n	800ad16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad08:	e005      	b.n	800ad16 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ad14:	bf00      	nop
    }

    if (pclk != 0U)
 800ad16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d021      	beq.n	800ad60 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad20:	4a1d      	ldr	r2, [pc, #116]	@ (800ad98 <UART_SetConfig+0xacc>)
 800ad22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad26:	461a      	mov	r2, r3
 800ad28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad2a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	085b      	lsrs	r3, r3, #1
 800ad34:	441a      	add	r2, r3
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad42:	2b0f      	cmp	r3, #15
 800ad44:	d909      	bls.n	800ad5a <UART_SetConfig+0xa8e>
 800ad46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad4c:	d205      	bcs.n	800ad5a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad50:	b29a      	uxth	r2, r3
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	60da      	str	r2, [r3, #12]
 800ad58:	e002      	b.n	800ad60 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	2200      	movs	r2, #0
 800ad74:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ad7c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3748      	adds	r7, #72	@ 0x48
 800ad84:	46bd      	mov	sp, r7
 800ad86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad8a:	bf00      	nop
 800ad8c:	58024400 	.word	0x58024400
 800ad90:	03d09000 	.word	0x03d09000
 800ad94:	003d0900 	.word	0x003d0900
 800ad98:	0800f44c 	.word	0x0800f44c

0800ad9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ada8:	f003 0308 	and.w	r3, r3, #8
 800adac:	2b00      	cmp	r3, #0
 800adae:	d00a      	beq.n	800adc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	430a      	orrs	r2, r1
 800adc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adca:	f003 0301 	and.w	r3, r3, #1
 800adce:	2b00      	cmp	r3, #0
 800add0:	d00a      	beq.n	800ade8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	430a      	orrs	r2, r1
 800ade6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adec:	f003 0302 	and.w	r3, r3, #2
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d00a      	beq.n	800ae0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	430a      	orrs	r2, r1
 800ae08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae0e:	f003 0304 	and.w	r3, r3, #4
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d00a      	beq.n	800ae2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	430a      	orrs	r2, r1
 800ae2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae30:	f003 0310 	and.w	r3, r3, #16
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00a      	beq.n	800ae4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	430a      	orrs	r2, r1
 800ae4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae52:	f003 0320 	and.w	r3, r3, #32
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00a      	beq.n	800ae70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	430a      	orrs	r2, r1
 800ae6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d01a      	beq.n	800aeb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	430a      	orrs	r2, r1
 800ae90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae9a:	d10a      	bne.n	800aeb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	430a      	orrs	r2, r1
 800aeb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00a      	beq.n	800aed4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	430a      	orrs	r2, r1
 800aed2:	605a      	str	r2, [r3, #4]
  }
}
 800aed4:	bf00      	nop
 800aed6:	370c      	adds	r7, #12
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b098      	sub	sp, #96	@ 0x60
 800aee4:	af02      	add	r7, sp, #8
 800aee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aef0:	f7f7 f9bc 	bl	800226c <HAL_GetTick>
 800aef4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 0308 	and.w	r3, r3, #8
 800af00:	2b08      	cmp	r3, #8
 800af02:	d12f      	bne.n	800af64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800af08:	9300      	str	r3, [sp, #0]
 800af0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af0c:	2200      	movs	r2, #0
 800af0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f88e 	bl	800b034 <UART_WaitOnFlagUntilTimeout>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d022      	beq.n	800af64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af26:	e853 3f00 	ldrex	r3, [r3]
 800af2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af32:	653b      	str	r3, [r7, #80]	@ 0x50
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	461a      	mov	r2, r3
 800af3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af3c:	647b      	str	r3, [r7, #68]	@ 0x44
 800af3e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af44:	e841 2300 	strex	r3, r2, [r1]
 800af48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d1e6      	bne.n	800af1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2220      	movs	r2, #32
 800af54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af60:	2303      	movs	r3, #3
 800af62:	e063      	b.n	800b02c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f003 0304 	and.w	r3, r3, #4
 800af6e:	2b04      	cmp	r3, #4
 800af70:	d149      	bne.n	800b006 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af72:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800af76:	9300      	str	r3, [sp, #0]
 800af78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af7a:	2200      	movs	r2, #0
 800af7c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 f857 	bl	800b034 <UART_WaitOnFlagUntilTimeout>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d03c      	beq.n	800b006 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af94:	e853 3f00 	ldrex	r3, [r3]
 800af98:	623b      	str	r3, [r7, #32]
   return(result);
 800af9a:	6a3b      	ldr	r3, [r7, #32]
 800af9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800afa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	461a      	mov	r2, r3
 800afa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afaa:	633b      	str	r3, [r7, #48]	@ 0x30
 800afac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800afb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afb2:	e841 2300 	strex	r3, r2, [r1]
 800afb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800afb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1e6      	bne.n	800af8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	3308      	adds	r3, #8
 800afc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	e853 3f00 	ldrex	r3, [r3]
 800afcc:	60fb      	str	r3, [r7, #12]
   return(result);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f023 0301 	bic.w	r3, r3, #1
 800afd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	3308      	adds	r3, #8
 800afdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800afde:	61fa      	str	r2, [r7, #28]
 800afe0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe2:	69b9      	ldr	r1, [r7, #24]
 800afe4:	69fa      	ldr	r2, [r7, #28]
 800afe6:	e841 2300 	strex	r3, r2, [r1]
 800afea:	617b      	str	r3, [r7, #20]
   return(result);
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1e5      	bne.n	800afbe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2220      	movs	r2, #32
 800aff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b002:	2303      	movs	r3, #3
 800b004:	e012      	b.n	800b02c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2220      	movs	r2, #32
 800b00a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2220      	movs	r2, #32
 800b012:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2200      	movs	r2, #0
 800b020:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b02a:	2300      	movs	r3, #0
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3758      	adds	r7, #88	@ 0x58
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	603b      	str	r3, [r7, #0]
 800b040:	4613      	mov	r3, r2
 800b042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b044:	e04f      	b.n	800b0e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b04c:	d04b      	beq.n	800b0e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b04e:	f7f7 f90d 	bl	800226c <HAL_GetTick>
 800b052:	4602      	mov	r2, r0
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	1ad3      	subs	r3, r2, r3
 800b058:	69ba      	ldr	r2, [r7, #24]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d302      	bcc.n	800b064 <UART_WaitOnFlagUntilTimeout+0x30>
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b064:	2303      	movs	r3, #3
 800b066:	e04e      	b.n	800b106 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f003 0304 	and.w	r3, r3, #4
 800b072:	2b00      	cmp	r3, #0
 800b074:	d037      	beq.n	800b0e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	2b80      	cmp	r3, #128	@ 0x80
 800b07a:	d034      	beq.n	800b0e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	2b40      	cmp	r3, #64	@ 0x40
 800b080:	d031      	beq.n	800b0e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	69db      	ldr	r3, [r3, #28]
 800b088:	f003 0308 	and.w	r3, r3, #8
 800b08c:	2b08      	cmp	r3, #8
 800b08e:	d110      	bne.n	800b0b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2208      	movs	r2, #8
 800b096:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f000 fa43 	bl	800b524 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2208      	movs	r2, #8
 800b0a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e029      	b.n	800b106 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	69db      	ldr	r3, [r3, #28]
 800b0b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b0bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0c0:	d111      	bne.n	800b0e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b0ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b0cc:	68f8      	ldr	r0, [r7, #12]
 800b0ce:	f000 fa29 	bl	800b524 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2220      	movs	r2, #32
 800b0d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b0e2:	2303      	movs	r3, #3
 800b0e4:	e00f      	b.n	800b106 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	69da      	ldr	r2, [r3, #28]
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	4013      	ands	r3, r2
 800b0f0:	68ba      	ldr	r2, [r7, #8]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	bf0c      	ite	eq
 800b0f6:	2301      	moveq	r3, #1
 800b0f8:	2300      	movne	r3, #0
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	79fb      	ldrb	r3, [r7, #7]
 800b100:	429a      	cmp	r2, r3
 800b102:	d0a0      	beq.n	800b046 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
	...

0800b110 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b110:	b480      	push	{r7}
 800b112:	b0a3      	sub	sp, #140	@ 0x8c
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	4613      	mov	r3, r2
 800b11c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	68ba      	ldr	r2, [r7, #8]
 800b122:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	88fa      	ldrh	r2, [r7, #6]
 800b128:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	88fa      	ldrh	r2, [r7, #6]
 800b130:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2200      	movs	r2, #0
 800b138:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b142:	d10e      	bne.n	800b162 <UART_Start_Receive_IT+0x52>
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d105      	bne.n	800b158 <UART_Start_Receive_IT+0x48>
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b152:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b156:	e02d      	b.n	800b1b4 <UART_Start_Receive_IT+0xa4>
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	22ff      	movs	r2, #255	@ 0xff
 800b15c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b160:	e028      	b.n	800b1b4 <UART_Start_Receive_IT+0xa4>
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d10d      	bne.n	800b186 <UART_Start_Receive_IT+0x76>
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d104      	bne.n	800b17c <UART_Start_Receive_IT+0x6c>
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	22ff      	movs	r2, #255	@ 0xff
 800b176:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b17a:	e01b      	b.n	800b1b4 <UART_Start_Receive_IT+0xa4>
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	227f      	movs	r2, #127	@ 0x7f
 800b180:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b184:	e016      	b.n	800b1b4 <UART_Start_Receive_IT+0xa4>
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b18e:	d10d      	bne.n	800b1ac <UART_Start_Receive_IT+0x9c>
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	691b      	ldr	r3, [r3, #16]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d104      	bne.n	800b1a2 <UART_Start_Receive_IT+0x92>
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	227f      	movs	r2, #127	@ 0x7f
 800b19c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b1a0:	e008      	b.n	800b1b4 <UART_Start_Receive_IT+0xa4>
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	223f      	movs	r2, #63	@ 0x3f
 800b1a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b1aa:	e003      	b.n	800b1b4 <UART_Start_Receive_IT+0xa4>
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2222      	movs	r2, #34	@ 0x22
 800b1c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	3308      	adds	r3, #8
 800b1ca:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1ce:	e853 3f00 	ldrex	r3, [r3]
 800b1d2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b1d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b1d6:	f043 0301 	orr.w	r3, r3, #1
 800b1da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	3308      	adds	r3, #8
 800b1e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b1e8:	673a      	str	r2, [r7, #112]	@ 0x70
 800b1ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ec:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b1ee:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b1f0:	e841 2300 	strex	r3, r2, [r1]
 800b1f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800b1f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1e3      	bne.n	800b1c4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b200:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b204:	d14f      	bne.n	800b2a6 <UART_Start_Receive_IT+0x196>
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b20c:	88fa      	ldrh	r2, [r7, #6]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d349      	bcc.n	800b2a6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b21a:	d107      	bne.n	800b22c <UART_Start_Receive_IT+0x11c>
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	691b      	ldr	r3, [r3, #16]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d103      	bne.n	800b22c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	4a47      	ldr	r2, [pc, #284]	@ (800b344 <UART_Start_Receive_IT+0x234>)
 800b228:	675a      	str	r2, [r3, #116]	@ 0x74
 800b22a:	e002      	b.n	800b232 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	4a46      	ldr	r2, [pc, #280]	@ (800b348 <UART_Start_Receive_IT+0x238>)
 800b230:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	691b      	ldr	r3, [r3, #16]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d01a      	beq.n	800b270 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b240:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b242:	e853 3f00 	ldrex	r3, [r3]
 800b246:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b24a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b24e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	461a      	mov	r2, r3
 800b258:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b25c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b25e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b260:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b262:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b264:	e841 2300 	strex	r3, r2, [r1]
 800b268:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b26a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d1e4      	bne.n	800b23a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	3308      	adds	r3, #8
 800b276:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b27a:	e853 3f00 	ldrex	r3, [r3]
 800b27e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b282:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b286:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	3308      	adds	r3, #8
 800b28e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b290:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b292:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b294:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b296:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b298:	e841 2300 	strex	r3, r2, [r1]
 800b29c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b29e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d1e5      	bne.n	800b270 <UART_Start_Receive_IT+0x160>
 800b2a4:	e046      	b.n	800b334 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	689b      	ldr	r3, [r3, #8]
 800b2aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2ae:	d107      	bne.n	800b2c0 <UART_Start_Receive_IT+0x1b0>
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	691b      	ldr	r3, [r3, #16]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d103      	bne.n	800b2c0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	4a24      	ldr	r2, [pc, #144]	@ (800b34c <UART_Start_Receive_IT+0x23c>)
 800b2bc:	675a      	str	r2, [r3, #116]	@ 0x74
 800b2be:	e002      	b.n	800b2c6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	4a23      	ldr	r2, [pc, #140]	@ (800b350 <UART_Start_Receive_IT+0x240>)
 800b2c4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d019      	beq.n	800b302 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d6:	e853 3f00 	ldrex	r3, [r3]
 800b2da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2de:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800b2e2:	677b      	str	r3, [r7, #116]	@ 0x74
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b2ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2ee:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b2f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b2f4:	e841 2300 	strex	r3, r2, [r1]
 800b2f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d1e6      	bne.n	800b2ce <UART_Start_Receive_IT+0x1be>
 800b300:	e018      	b.n	800b334 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	e853 3f00 	ldrex	r3, [r3]
 800b30e:	613b      	str	r3, [r7, #16]
   return(result);
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	f043 0320 	orr.w	r3, r3, #32
 800b316:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	461a      	mov	r2, r3
 800b31e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b320:	623b      	str	r3, [r7, #32]
 800b322:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b324:	69f9      	ldr	r1, [r7, #28]
 800b326:	6a3a      	ldr	r2, [r7, #32]
 800b328:	e841 2300 	strex	r3, r2, [r1]
 800b32c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d1e6      	bne.n	800b302 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b334:	2300      	movs	r3, #0
}
 800b336:	4618      	mov	r0, r3
 800b338:	378c      	adds	r7, #140	@ 0x8c
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr
 800b342:	bf00      	nop
 800b344:	0800bf29 	.word	0x0800bf29
 800b348:	0800bbc9 	.word	0x0800bbc9
 800b34c:	0800ba11 	.word	0x0800ba11
 800b350:	0800b859 	.word	0x0800b859

0800b354 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b096      	sub	sp, #88	@ 0x58
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	4613      	mov	r3, r2
 800b360:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	88fa      	ldrh	r2, [r7, #6]
 800b36c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2200      	movs	r2, #0
 800b374:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2222      	movs	r2, #34	@ 0x22
 800b37c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b386:	2b00      	cmp	r3, #0
 800b388:	d02d      	beq.n	800b3e6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b390:	4a40      	ldr	r2, [pc, #256]	@ (800b494 <UART_Start_Receive_DMA+0x140>)
 800b392:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b39a:	4a3f      	ldr	r2, [pc, #252]	@ (800b498 <UART_Start_Receive_DMA+0x144>)
 800b39c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3a4:	4a3d      	ldr	r2, [pc, #244]	@ (800b49c <UART_Start_Receive_DMA+0x148>)
 800b3a6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	3324      	adds	r3, #36	@ 0x24
 800b3be:	4619      	mov	r1, r3
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	88fb      	ldrh	r3, [r7, #6]
 800b3c8:	f7f7 fbc8 	bl	8002b5c <HAL_DMA_Start_IT>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d009      	beq.n	800b3e6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2210      	movs	r2, #16
 800b3d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2220      	movs	r2, #32
 800b3de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e051      	b.n	800b48a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	691b      	ldr	r3, [r3, #16]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d018      	beq.n	800b420 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3f6:	e853 3f00 	ldrex	r3, [r3]
 800b3fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b402:	657b      	str	r3, [r7, #84]	@ 0x54
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	461a      	mov	r2, r3
 800b40a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b40c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b40e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b410:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b412:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b414:	e841 2300 	strex	r3, r2, [r1]
 800b418:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b41a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1e6      	bne.n	800b3ee <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	3308      	adds	r3, #8
 800b426:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b42a:	e853 3f00 	ldrex	r3, [r3]
 800b42e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b432:	f043 0301 	orr.w	r3, r3, #1
 800b436:	653b      	str	r3, [r7, #80]	@ 0x50
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	3308      	adds	r3, #8
 800b43e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b440:	637a      	str	r2, [r7, #52]	@ 0x34
 800b442:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b444:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b446:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b448:	e841 2300 	strex	r3, r2, [r1]
 800b44c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b450:	2b00      	cmp	r3, #0
 800b452:	d1e5      	bne.n	800b420 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	3308      	adds	r3, #8
 800b45a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	e853 3f00 	ldrex	r3, [r3]
 800b462:	613b      	str	r3, [r7, #16]
   return(result);
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b46a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	3308      	adds	r3, #8
 800b472:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b474:	623a      	str	r2, [r7, #32]
 800b476:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b478:	69f9      	ldr	r1, [r7, #28]
 800b47a:	6a3a      	ldr	r2, [r7, #32]
 800b47c:	e841 2300 	strex	r3, r2, [r1]
 800b480:	61bb      	str	r3, [r7, #24]
   return(result);
 800b482:	69bb      	ldr	r3, [r7, #24]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d1e5      	bne.n	800b454 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3758      	adds	r7, #88	@ 0x58
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	0800b5f1 	.word	0x0800b5f1
 800b498:	0800b719 	.word	0x0800b719
 800b49c:	0800b757 	.word	0x0800b757

0800b4a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b08f      	sub	sp, #60	@ 0x3c
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ae:	6a3b      	ldr	r3, [r7, #32]
 800b4b0:	e853 3f00 	ldrex	r3, [r3]
 800b4b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4b6:	69fb      	ldr	r3, [r7, #28]
 800b4b8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b4bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b4c8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4ce:	e841 2300 	strex	r3, r2, [r1]
 800b4d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1e6      	bne.n	800b4a8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	3308      	adds	r3, #8
 800b4e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	e853 3f00 	ldrex	r3, [r3]
 800b4e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b4f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	3308      	adds	r3, #8
 800b4f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4fa:	61ba      	str	r2, [r7, #24]
 800b4fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fe:	6979      	ldr	r1, [r7, #20]
 800b500:	69ba      	ldr	r2, [r7, #24]
 800b502:	e841 2300 	strex	r3, r2, [r1]
 800b506:	613b      	str	r3, [r7, #16]
   return(result);
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d1e5      	bne.n	800b4da <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2220      	movs	r2, #32
 800b512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b516:	bf00      	nop
 800b518:	373c      	adds	r7, #60	@ 0x3c
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr
	...

0800b524 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b524:	b480      	push	{r7}
 800b526:	b095      	sub	sp, #84	@ 0x54
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b534:	e853 3f00 	ldrex	r3, [r3]
 800b538:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b53c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b540:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	461a      	mov	r2, r3
 800b548:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b54a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b54c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b550:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b552:	e841 2300 	strex	r3, r2, [r1]
 800b556:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d1e6      	bne.n	800b52c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	3308      	adds	r3, #8
 800b564:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b566:	6a3b      	ldr	r3, [r7, #32]
 800b568:	e853 3f00 	ldrex	r3, [r3]
 800b56c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b56e:	69fa      	ldr	r2, [r7, #28]
 800b570:	4b1e      	ldr	r3, [pc, #120]	@ (800b5ec <UART_EndRxTransfer+0xc8>)
 800b572:	4013      	ands	r3, r2
 800b574:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	3308      	adds	r3, #8
 800b57c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b57e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b580:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b582:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b584:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b586:	e841 2300 	strex	r3, r2, [r1]
 800b58a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1e5      	bne.n	800b55e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b596:	2b01      	cmp	r3, #1
 800b598:	d118      	bne.n	800b5cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	e853 3f00 	ldrex	r3, [r3]
 800b5a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	f023 0310 	bic.w	r3, r3, #16
 800b5ae:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5b8:	61bb      	str	r3, [r7, #24]
 800b5ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5bc:	6979      	ldr	r1, [r7, #20]
 800b5be:	69ba      	ldr	r2, [r7, #24]
 800b5c0:	e841 2300 	strex	r3, r2, [r1]
 800b5c4:	613b      	str	r3, [r7, #16]
   return(result);
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d1e6      	bne.n	800b59a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2220      	movs	r2, #32
 800b5d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b5e0:	bf00      	nop
 800b5e2:	3754      	adds	r7, #84	@ 0x54
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr
 800b5ec:	effffffe 	.word	0xeffffffe

0800b5f0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b09c      	sub	sp, #112	@ 0x70
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5fc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	69db      	ldr	r3, [r3, #28]
 800b602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b606:	d071      	beq.n	800b6ec <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b608:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b60a:	2200      	movs	r2, #0
 800b60c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b610:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b616:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b618:	e853 3f00 	ldrex	r3, [r3]
 800b61c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b61e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b620:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b624:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	461a      	mov	r2, r3
 800b62c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b62e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b630:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b632:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b634:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b636:	e841 2300 	strex	r3, r2, [r1]
 800b63a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b63c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d1e6      	bne.n	800b610 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	3308      	adds	r3, #8
 800b648:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b64a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b64c:	e853 3f00 	ldrex	r3, [r3]
 800b650:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b654:	f023 0301 	bic.w	r3, r3, #1
 800b658:	667b      	str	r3, [r7, #100]	@ 0x64
 800b65a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	3308      	adds	r3, #8
 800b660:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b662:	647a      	str	r2, [r7, #68]	@ 0x44
 800b664:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b666:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b668:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b66a:	e841 2300 	strex	r3, r2, [r1]
 800b66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1e5      	bne.n	800b642 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b676:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	3308      	adds	r3, #8
 800b67c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b680:	e853 3f00 	ldrex	r3, [r3]
 800b684:	623b      	str	r3, [r7, #32]
   return(result);
 800b686:	6a3b      	ldr	r3, [r7, #32]
 800b688:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b68c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b68e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	3308      	adds	r3, #8
 800b694:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b696:	633a      	str	r2, [r7, #48]	@ 0x30
 800b698:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b69a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b69c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b69e:	e841 2300 	strex	r3, r2, [r1]
 800b6a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d1e5      	bne.n	800b676 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b6aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6ac:	2220      	movs	r2, #32
 800b6ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d118      	bne.n	800b6ec <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	e853 3f00 	ldrex	r3, [r3]
 800b6c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f023 0310 	bic.w	r3, r3, #16
 800b6ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b6d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6d8:	61fb      	str	r3, [r7, #28]
 800b6da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6dc:	69b9      	ldr	r1, [r7, #24]
 800b6de:	69fa      	ldr	r2, [r7, #28]
 800b6e0:	e841 2300 	strex	r3, r2, [r1]
 800b6e4:	617b      	str	r3, [r7, #20]
   return(result);
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d1e6      	bne.n	800b6ba <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d107      	bne.n	800b70a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b6fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b700:	4619      	mov	r1, r3
 800b702:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b704:	f7fe fdd6 	bl	800a2b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b708:	e002      	b.n	800b710 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b70a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b70c:	f7f5 fc02 	bl	8000f14 <HAL_UART_RxCpltCallback>
}
 800b710:	bf00      	nop
 800b712:	3770      	adds	r7, #112	@ 0x70
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b724:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2201      	movs	r2, #1
 800b72a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b730:	2b01      	cmp	r3, #1
 800b732:	d109      	bne.n	800b748 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b73a:	085b      	lsrs	r3, r3, #1
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	4619      	mov	r1, r3
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	f7fe fdb7 	bl	800a2b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b746:	e002      	b.n	800b74e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b748:	68f8      	ldr	r0, [r7, #12]
 800b74a:	f7fe fd9f 	bl	800a28c <HAL_UART_RxHalfCpltCallback>
}
 800b74e:	bf00      	nop
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b756:	b580      	push	{r7, lr}
 800b758:	b086      	sub	sp, #24
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b762:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b76a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b772:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b77e:	2b80      	cmp	r3, #128	@ 0x80
 800b780:	d109      	bne.n	800b796 <UART_DMAError+0x40>
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	2b21      	cmp	r3, #33	@ 0x21
 800b786:	d106      	bne.n	800b796 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	2200      	movs	r2, #0
 800b78c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b790:	6978      	ldr	r0, [r7, #20]
 800b792:	f7ff fe85 	bl	800b4a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7a0:	2b40      	cmp	r3, #64	@ 0x40
 800b7a2:	d109      	bne.n	800b7b8 <UART_DMAError+0x62>
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2b22      	cmp	r3, #34	@ 0x22
 800b7a8:	d106      	bne.n	800b7b8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b7b2:	6978      	ldr	r0, [r7, #20]
 800b7b4:	f7ff feb6 	bl	800b524 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7be:	f043 0210 	orr.w	r2, r3, #16
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7c8:	6978      	ldr	r0, [r7, #20]
 800b7ca:	f7fe fd69 	bl	800a2a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7ce:	bf00      	nop
 800b7d0:	3718      	adds	r7, #24
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}

0800b7d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b084      	sub	sp, #16
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f7fe fd53 	bl	800a2a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7fa:	bf00      	nop
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b088      	sub	sp, #32
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	e853 3f00 	ldrex	r3, [r3]
 800b816:	60bb      	str	r3, [r7, #8]
   return(result);
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b81e:	61fb      	str	r3, [r7, #28]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	461a      	mov	r2, r3
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	61bb      	str	r3, [r7, #24]
 800b82a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b82c:	6979      	ldr	r1, [r7, #20]
 800b82e:	69ba      	ldr	r2, [r7, #24]
 800b830:	e841 2300 	strex	r3, r2, [r1]
 800b834:	613b      	str	r3, [r7, #16]
   return(result);
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d1e6      	bne.n	800b80a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2220      	movs	r2, #32
 800b840:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f7fe fd14 	bl	800a278 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b850:	bf00      	nop
 800b852:	3720      	adds	r7, #32
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b09c      	sub	sp, #112	@ 0x70
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b866:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b870:	2b22      	cmp	r3, #34	@ 0x22
 800b872:	f040 80be 	bne.w	800b9f2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b87c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b880:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b884:	b2d9      	uxtb	r1, r3
 800b886:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b88a:	b2da      	uxtb	r2, r3
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b890:	400a      	ands	r2, r1
 800b892:	b2d2      	uxtb	r2, r2
 800b894:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b89a:	1c5a      	adds	r2, r3, #1
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	f040 80a1 	bne.w	800ba02 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8c8:	e853 3f00 	ldrex	r3, [r3]
 800b8cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b8ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b8d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	461a      	mov	r2, r3
 800b8dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b8de:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b8e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b8e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b8e6:	e841 2300 	strex	r3, r2, [r1]
 800b8ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b8ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d1e6      	bne.n	800b8c0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	3308      	adds	r3, #8
 800b8f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8fc:	e853 3f00 	ldrex	r3, [r3]
 800b900:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b904:	f023 0301 	bic.w	r3, r3, #1
 800b908:	667b      	str	r3, [r7, #100]	@ 0x64
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	3308      	adds	r3, #8
 800b910:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b912:	647a      	str	r2, [r7, #68]	@ 0x44
 800b914:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b916:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b918:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b91a:	e841 2300 	strex	r3, r2, [r1]
 800b91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b922:	2b00      	cmp	r3, #0
 800b924:	d1e5      	bne.n	800b8f2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2220      	movs	r2, #32
 800b92a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2200      	movs	r2, #0
 800b932:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a33      	ldr	r2, [pc, #204]	@ (800ba0c <UART_RxISR_8BIT+0x1b4>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d01f      	beq.n	800b984 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d018      	beq.n	800b984 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95a:	e853 3f00 	ldrex	r3, [r3]
 800b95e:	623b      	str	r3, [r7, #32]
   return(result);
 800b960:	6a3b      	ldr	r3, [r7, #32]
 800b962:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b966:	663b      	str	r3, [r7, #96]	@ 0x60
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	461a      	mov	r2, r3
 800b96e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b970:	633b      	str	r3, [r7, #48]	@ 0x30
 800b972:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b974:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b976:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b978:	e841 2300 	strex	r3, r2, [r1]
 800b97c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b980:	2b00      	cmp	r3, #0
 800b982:	d1e6      	bne.n	800b952 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d12e      	bne.n	800b9ea <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	e853 3f00 	ldrex	r3, [r3]
 800b99e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f023 0310 	bic.w	r3, r3, #16
 800b9a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9b0:	61fb      	str	r3, [r7, #28]
 800b9b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b4:	69b9      	ldr	r1, [r7, #24]
 800b9b6:	69fa      	ldr	r2, [r7, #28]
 800b9b8:	e841 2300 	strex	r3, r2, [r1]
 800b9bc:	617b      	str	r3, [r7, #20]
   return(result);
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d1e6      	bne.n	800b992 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	69db      	ldr	r3, [r3, #28]
 800b9ca:	f003 0310 	and.w	r3, r3, #16
 800b9ce:	2b10      	cmp	r3, #16
 800b9d0:	d103      	bne.n	800b9da <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	2210      	movs	r2, #16
 800b9d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f7fe fc66 	bl	800a2b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b9e8:	e00b      	b.n	800ba02 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f7f5 fa92 	bl	8000f14 <HAL_UART_RxCpltCallback>
}
 800b9f0:	e007      	b.n	800ba02 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	699a      	ldr	r2, [r3, #24]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f042 0208 	orr.w	r2, r2, #8
 800ba00:	619a      	str	r2, [r3, #24]
}
 800ba02:	bf00      	nop
 800ba04:	3770      	adds	r7, #112	@ 0x70
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	58000c00 	.word	0x58000c00

0800ba10 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b09c      	sub	sp, #112	@ 0x70
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ba1e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba28:	2b22      	cmp	r3, #34	@ 0x22
 800ba2a:	f040 80be 	bne.w	800bbaa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba34:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba3c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ba3e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ba42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ba46:	4013      	ands	r3, r2
 800ba48:	b29a      	uxth	r2, r3
 800ba4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba4c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba52:	1c9a      	adds	r2, r3, #2
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	3b01      	subs	r3, #1
 800ba62:	b29a      	uxth	r2, r3
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	f040 80a1 	bne.w	800bbba <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba80:	e853 3f00 	ldrex	r3, [r3]
 800ba84:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ba86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba8c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	461a      	mov	r2, r3
 800ba94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba96:	657b      	str	r3, [r7, #84]	@ 0x54
 800ba98:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba9a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ba9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ba9e:	e841 2300 	strex	r3, r2, [r1]
 800baa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800baa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d1e6      	bne.n	800ba78 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	3308      	adds	r3, #8
 800bab0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bab4:	e853 3f00 	ldrex	r3, [r3]
 800bab8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800baba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800babc:	f023 0301 	bic.w	r3, r3, #1
 800bac0:	663b      	str	r3, [r7, #96]	@ 0x60
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	3308      	adds	r3, #8
 800bac8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800baca:	643a      	str	r2, [r7, #64]	@ 0x40
 800bacc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bace:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bad0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bad2:	e841 2300 	strex	r3, r2, [r1]
 800bad6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bada:	2b00      	cmp	r3, #0
 800badc:	d1e5      	bne.n	800baaa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2220      	movs	r2, #32
 800bae2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a33      	ldr	r2, [pc, #204]	@ (800bbc4 <UART_RxISR_16BIT+0x1b4>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d01f      	beq.n	800bb3c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d018      	beq.n	800bb3c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb10:	6a3b      	ldr	r3, [r7, #32]
 800bb12:	e853 3f00 	ldrex	r3, [r3]
 800bb16:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bb1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	461a      	mov	r2, r3
 800bb26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb2a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb30:	e841 2300 	strex	r3, r2, [r1]
 800bb34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1e6      	bne.n	800bb0a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d12e      	bne.n	800bba2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	e853 3f00 	ldrex	r3, [r3]
 800bb56:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	f023 0310 	bic.w	r3, r3, #16
 800bb5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	461a      	mov	r2, r3
 800bb66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb68:	61bb      	str	r3, [r7, #24]
 800bb6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb6c:	6979      	ldr	r1, [r7, #20]
 800bb6e:	69ba      	ldr	r2, [r7, #24]
 800bb70:	e841 2300 	strex	r3, r2, [r1]
 800bb74:	613b      	str	r3, [r7, #16]
   return(result);
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d1e6      	bne.n	800bb4a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	69db      	ldr	r3, [r3, #28]
 800bb82:	f003 0310 	and.w	r3, r3, #16
 800bb86:	2b10      	cmp	r3, #16
 800bb88:	d103      	bne.n	800bb92 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2210      	movs	r2, #16
 800bb90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bb98:	4619      	mov	r1, r3
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f7fe fb8a 	bl	800a2b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bba0:	e00b      	b.n	800bbba <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f7f5 f9b6 	bl	8000f14 <HAL_UART_RxCpltCallback>
}
 800bba8:	e007      	b.n	800bbba <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	699a      	ldr	r2, [r3, #24]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f042 0208 	orr.w	r2, r2, #8
 800bbb8:	619a      	str	r2, [r3, #24]
}
 800bbba:	bf00      	nop
 800bbbc:	3770      	adds	r7, #112	@ 0x70
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	58000c00 	.word	0x58000c00

0800bbc8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b0ac      	sub	sp, #176	@ 0xb0
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bbd6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	69db      	ldr	r3, [r3, #28]
 800bbe0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bbfe:	2b22      	cmp	r3, #34	@ 0x22
 800bc00:	f040 8180 	bne.w	800bf04 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bc0a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bc0e:	e123      	b.n	800be58 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc16:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bc1a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800bc1e:	b2d9      	uxtb	r1, r3
 800bc20:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800bc24:	b2da      	uxtb	r2, r3
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc2a:	400a      	ands	r2, r1
 800bc2c:	b2d2      	uxtb	r2, r2
 800bc2e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc34:	1c5a      	adds	r2, r3, #1
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	3b01      	subs	r3, #1
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	69db      	ldr	r3, [r3, #28]
 800bc52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bc56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc5a:	f003 0307 	and.w	r3, r3, #7
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d053      	beq.n	800bd0a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bc62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc66:	f003 0301 	and.w	r3, r3, #1
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d011      	beq.n	800bc92 <UART_RxISR_8BIT_FIFOEN+0xca>
 800bc6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d00b      	beq.n	800bc92 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc88:	f043 0201 	orr.w	r2, r3, #1
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc96:	f003 0302 	and.w	r3, r3, #2
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d011      	beq.n	800bcc2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800bc9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bca2:	f003 0301 	and.w	r3, r3, #1
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00b      	beq.n	800bcc2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2202      	movs	r2, #2
 800bcb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcb8:	f043 0204 	orr.w	r2, r3, #4
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bcc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bcc6:	f003 0304 	and.w	r3, r3, #4
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d011      	beq.n	800bcf2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800bcce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bcd2:	f003 0301 	and.w	r3, r3, #1
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d00b      	beq.n	800bcf2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2204      	movs	r2, #4
 800bce0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bce8:	f043 0202 	orr.w	r2, r3, #2
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d006      	beq.n	800bd0a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f7fe facf 	bl	800a2a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2200      	movs	r2, #0
 800bd06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	f040 80a0 	bne.w	800be58 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bd20:	e853 3f00 	ldrex	r3, [r3]
 800bd24:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800bd26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	461a      	mov	r2, r3
 800bd36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bd3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bd3c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd3e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800bd40:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800bd42:	e841 2300 	strex	r3, r2, [r1]
 800bd46:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800bd48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d1e4      	bne.n	800bd18 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	3308      	adds	r3, #8
 800bd54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd58:	e853 3f00 	ldrex	r3, [r3]
 800bd5c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800bd5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd60:	4b6e      	ldr	r3, [pc, #440]	@ (800bf1c <UART_RxISR_8BIT_FIFOEN+0x354>)
 800bd62:	4013      	ands	r3, r2
 800bd64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	3308      	adds	r3, #8
 800bd6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bd72:	66ba      	str	r2, [r7, #104]	@ 0x68
 800bd74:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd76:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800bd78:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bd7a:	e841 2300 	strex	r3, r2, [r1]
 800bd7e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800bd80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d1e3      	bne.n	800bd4e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2220      	movs	r2, #32
 800bd8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2200      	movs	r2, #0
 800bd92:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	4a60      	ldr	r2, [pc, #384]	@ (800bf20 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d021      	beq.n	800bde8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d01a      	beq.n	800bde8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bdba:	e853 3f00 	ldrex	r3, [r3]
 800bdbe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800bdc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bdc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	461a      	mov	r2, r3
 800bdd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bdd4:	657b      	str	r3, [r7, #84]	@ 0x54
 800bdd6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bdda:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bddc:	e841 2300 	strex	r3, r2, [r1]
 800bde0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800bde2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d1e4      	bne.n	800bdb2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d130      	bne.n	800be52 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdfe:	e853 3f00 	ldrex	r3, [r3]
 800be02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800be04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be06:	f023 0310 	bic.w	r3, r3, #16
 800be0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	461a      	mov	r2, r3
 800be14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be18:	643b      	str	r3, [r7, #64]	@ 0x40
 800be1a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800be1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be20:	e841 2300 	strex	r3, r2, [r1]
 800be24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d1e4      	bne.n	800bdf6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	69db      	ldr	r3, [r3, #28]
 800be32:	f003 0310 	and.w	r3, r3, #16
 800be36:	2b10      	cmp	r3, #16
 800be38:	d103      	bne.n	800be42 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2210      	movs	r2, #16
 800be40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800be48:	4619      	mov	r1, r3
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f7fe fa32 	bl	800a2b4 <HAL_UARTEx_RxEventCallback>
 800be50:	e002      	b.n	800be58 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f7f5 f85e 	bl	8000f14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800be58:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d006      	beq.n	800be6e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800be60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be64:	f003 0320 	and.w	r3, r3, #32
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f47f aed1 	bne.w	800bc10 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800be74:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800be78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d049      	beq.n	800bf14 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800be86:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d242      	bcs.n	800bf14 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	3308      	adds	r3, #8
 800be94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be96:	6a3b      	ldr	r3, [r7, #32]
 800be98:	e853 3f00 	ldrex	r3, [r3]
 800be9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bea4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	3308      	adds	r3, #8
 800beae:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800beb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800beb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800beb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800beba:	e841 2300 	strex	r3, r2, [r1]
 800bebe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d1e3      	bne.n	800be8e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4a16      	ldr	r2, [pc, #88]	@ (800bf24 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800beca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	e853 3f00 	ldrex	r3, [r3]
 800bed8:	60bb      	str	r3, [r7, #8]
   return(result);
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	f043 0320 	orr.w	r3, r3, #32
 800bee0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	461a      	mov	r2, r3
 800beea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800beee:	61bb      	str	r3, [r7, #24]
 800bef0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef2:	6979      	ldr	r1, [r7, #20]
 800bef4:	69ba      	ldr	r2, [r7, #24]
 800bef6:	e841 2300 	strex	r3, r2, [r1]
 800befa:	613b      	str	r3, [r7, #16]
   return(result);
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d1e4      	bne.n	800becc <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bf02:	e007      	b.n	800bf14 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	699a      	ldr	r2, [r3, #24]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f042 0208 	orr.w	r2, r2, #8
 800bf12:	619a      	str	r2, [r3, #24]
}
 800bf14:	bf00      	nop
 800bf16:	37b0      	adds	r7, #176	@ 0xb0
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	effffffe 	.word	0xeffffffe
 800bf20:	58000c00 	.word	0x58000c00
 800bf24:	0800b859 	.word	0x0800b859

0800bf28 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b0ae      	sub	sp, #184	@ 0xb8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bf36:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	69db      	ldr	r3, [r3, #28]
 800bf40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf5e:	2b22      	cmp	r3, #34	@ 0x22
 800bf60:	f040 8184 	bne.w	800c26c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bf6a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bf6e:	e127      	b.n	800c1c0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf76:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800bf82:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800bf86:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800bf8a:	4013      	ands	r3, r2
 800bf8c:	b29a      	uxth	r2, r3
 800bf8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bf92:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf98:	1c9a      	adds	r2, r3, #2
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bfa4:	b29b      	uxth	r3, r3
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	b29a      	uxth	r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	69db      	ldr	r3, [r3, #28]
 800bfb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bfba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bfbe:	f003 0307 	and.w	r3, r3, #7
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d053      	beq.n	800c06e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bfc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bfca:	f003 0301 	and.w	r3, r3, #1
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d011      	beq.n	800bff6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800bfd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bfd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d00b      	beq.n	800bff6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfec:	f043 0201 	orr.w	r2, r3, #1
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bff6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bffa:	f003 0302 	and.w	r3, r3, #2
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d011      	beq.n	800c026 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c002:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c006:	f003 0301 	and.w	r3, r3, #1
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00b      	beq.n	800c026 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	2202      	movs	r2, #2
 800c014:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c01c:	f043 0204 	orr.w	r2, r3, #4
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c026:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c02a:	f003 0304 	and.w	r3, r3, #4
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d011      	beq.n	800c056 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c032:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c036:	f003 0301 	and.w	r3, r3, #1
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d00b      	beq.n	800c056 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	2204      	movs	r2, #4
 800c044:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c04c:	f043 0202 	orr.w	r2, r3, #2
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d006      	beq.n	800c06e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f7fe f91d 	bl	800a2a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2200      	movs	r2, #0
 800c06a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c074:	b29b      	uxth	r3, r3
 800c076:	2b00      	cmp	r3, #0
 800c078:	f040 80a2 	bne.w	800c1c0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c082:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c084:	e853 3f00 	ldrex	r3, [r3]
 800c088:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c08a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c08c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c090:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	461a      	mov	r2, r3
 800c09a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c09e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c0a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c0a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c0aa:	e841 2300 	strex	r3, r2, [r1]
 800c0ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c0b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d1e2      	bne.n	800c07c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	3308      	adds	r3, #8
 800c0bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c0c0:	e853 3f00 	ldrex	r3, [r3]
 800c0c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c0c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c0c8:	4b6e      	ldr	r3, [pc, #440]	@ (800c284 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800c0ca:	4013      	ands	r3, r2
 800c0cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	3308      	adds	r3, #8
 800c0d6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c0da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c0dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c0e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c0e2:	e841 2300 	strex	r3, r2, [r1]
 800c0e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c0e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1e3      	bne.n	800c0b6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2220      	movs	r2, #32
 800c0f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4a60      	ldr	r2, [pc, #384]	@ (800c288 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d021      	beq.n	800c150 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c116:	2b00      	cmp	r3, #0
 800c118:	d01a      	beq.n	800c150 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c120:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c122:	e853 3f00 	ldrex	r3, [r3]
 800c126:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c128:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c12a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c12e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	461a      	mov	r2, r3
 800c138:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c13c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c13e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c140:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c142:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c144:	e841 2300 	strex	r3, r2, [r1]
 800c148:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c14a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d1e4      	bne.n	800c11a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c154:	2b01      	cmp	r3, #1
 800c156:	d130      	bne.n	800c1ba <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2200      	movs	r2, #0
 800c15c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c166:	e853 3f00 	ldrex	r3, [r3]
 800c16a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c16c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c16e:	f023 0310 	bic.w	r3, r3, #16
 800c172:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	461a      	mov	r2, r3
 800c17c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c180:	647b      	str	r3, [r7, #68]	@ 0x44
 800c182:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c184:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c186:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c188:	e841 2300 	strex	r3, r2, [r1]
 800c18c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c18e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c190:	2b00      	cmp	r3, #0
 800c192:	d1e4      	bne.n	800c15e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	69db      	ldr	r3, [r3, #28]
 800c19a:	f003 0310 	and.w	r3, r3, #16
 800c19e:	2b10      	cmp	r3, #16
 800c1a0:	d103      	bne.n	800c1aa <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	2210      	movs	r2, #16
 800c1a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f7fe f87e 	bl	800a2b4 <HAL_UARTEx_RxEventCallback>
 800c1b8:	e002      	b.n	800c1c0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f7f4 feaa 	bl	8000f14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c1c0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d006      	beq.n	800c1d6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800c1c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c1cc:	f003 0320 	and.w	r3, r3, #32
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f47f aecd 	bne.w	800bf70 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c1dc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c1e0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d049      	beq.n	800c27c <UART_RxISR_16BIT_FIFOEN+0x354>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c1ee:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d242      	bcs.n	800c27c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	3308      	adds	r3, #8
 800c1fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c200:	e853 3f00 	ldrex	r3, [r3]
 800c204:	623b      	str	r3, [r7, #32]
   return(result);
 800c206:	6a3b      	ldr	r3, [r7, #32]
 800c208:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c20c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	3308      	adds	r3, #8
 800c216:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c21a:	633a      	str	r2, [r7, #48]	@ 0x30
 800c21c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c21e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c222:	e841 2300 	strex	r3, r2, [r1]
 800c226:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d1e3      	bne.n	800c1f6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	4a16      	ldr	r2, [pc, #88]	@ (800c28c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c232:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	e853 3f00 	ldrex	r3, [r3]
 800c240:	60fb      	str	r3, [r7, #12]
   return(result);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f043 0320 	orr.w	r3, r3, #32
 800c248:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	461a      	mov	r2, r3
 800c252:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c256:	61fb      	str	r3, [r7, #28]
 800c258:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c25a:	69b9      	ldr	r1, [r7, #24]
 800c25c:	69fa      	ldr	r2, [r7, #28]
 800c25e:	e841 2300 	strex	r3, r2, [r1]
 800c262:	617b      	str	r3, [r7, #20]
   return(result);
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d1e4      	bne.n	800c234 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c26a:	e007      	b.n	800c27c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	699a      	ldr	r2, [r3, #24]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f042 0208 	orr.w	r2, r2, #8
 800c27a:	619a      	str	r2, [r3, #24]
}
 800c27c:	bf00      	nop
 800c27e:	37b8      	adds	r7, #184	@ 0xb8
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	effffffe 	.word	0xeffffffe
 800c288:	58000c00 	.word	0x58000c00
 800c28c:	0800ba11 	.word	0x0800ba11

0800c290 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
 800c29c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d101      	bne.n	800c2a8 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	e056      	b.n	800c356 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d106      	bne.n	800c2c0 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800c2ba:	68f8      	ldr	r0, [r7, #12]
 800c2bc:	f7f5 fb7a 	bl	80019b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2224      	movs	r2, #36	@ 0x24
 800c2c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f022 0201 	bic.w	r2, r2, #1
 800c2d6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d002      	beq.n	800c2e6 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 800c2e0:	68f8      	ldr	r0, [r7, #12]
 800c2e2:	f7fe fd5b 	bl	800ad9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f7fd fff0 	bl	800a2cc <UART_SetConfig>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d101      	bne.n	800c2f6 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	e02f      	b.n	800c356 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	689a      	ldr	r2, [r3, #8]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c304:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	689b      	ldr	r3, [r3, #8]
 800c30c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	68ba      	ldr	r2, [r7, #8]
 800c316:	430a      	orrs	r2, r1
 800c318:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	055b      	lsls	r3, r3, #21
 800c31e:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	041b      	lsls	r3, r3, #16
 800c324:	697a      	ldr	r2, [r7, #20]
 800c326:	4313      	orrs	r3, r2
 800c328:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	4b0b      	ldr	r3, [pc, #44]	@ (800c360 <HAL_RS485Ex_Init+0xd0>)
 800c332:	4013      	ands	r3, r2
 800c334:	68fa      	ldr	r2, [r7, #12]
 800c336:	6812      	ldr	r2, [r2, #0]
 800c338:	6979      	ldr	r1, [r7, #20]
 800c33a:	430b      	orrs	r3, r1
 800c33c:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f042 0201 	orr.w	r2, r2, #1
 800c34c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f7fe fdc6 	bl	800aee0 <UART_CheckIdleState>
 800c354:	4603      	mov	r3, r0
}
 800c356:	4618      	mov	r0, r3
 800c358:	3718      	adds	r7, #24
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	fc00ffff 	.word	0xfc00ffff

0800c364 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c36c:	bf00      	nop
 800c36e:	370c      	adds	r7, #12
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c380:	bf00      	nop
 800c382:	370c      	adds	r7, #12
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c394:	bf00      	nop
 800c396:	370c      	adds	r7, #12
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	d101      	bne.n	800c3b6 <HAL_UARTEx_DisableFifoMode+0x16>
 800c3b2:	2302      	movs	r3, #2
 800c3b4:	e027      	b.n	800c406 <HAL_UARTEx_DisableFifoMode+0x66>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2224      	movs	r2, #36	@ 0x24
 800c3c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	681a      	ldr	r2, [r3, #0]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f022 0201 	bic.w	r2, r2, #1
 800c3dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c3e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2220      	movs	r2, #32
 800c3f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c404:	2300      	movs	r3, #0
}
 800c406:	4618      	mov	r0, r3
 800c408:	3714      	adds	r7, #20
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr

0800c412 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b084      	sub	sp, #16
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
 800c41a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c422:	2b01      	cmp	r3, #1
 800c424:	d101      	bne.n	800c42a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c426:	2302      	movs	r3, #2
 800c428:	e02d      	b.n	800c486 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2201      	movs	r2, #1
 800c42e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2224      	movs	r2, #36	@ 0x24
 800c436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f022 0201 	bic.w	r2, r2, #1
 800c450:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	683a      	ldr	r2, [r7, #0]
 800c462:	430a      	orrs	r2, r1
 800c464:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 f850 	bl	800c50c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68fa      	ldr	r2, [r7, #12]
 800c472:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2220      	movs	r2, #32
 800c478:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2200      	movs	r2, #0
 800c480:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	b084      	sub	sp, #16
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
 800c496:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	d101      	bne.n	800c4a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c4a2:	2302      	movs	r3, #2
 800c4a4:	e02d      	b.n	800c502 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2224      	movs	r2, #36	@ 0x24
 800c4b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	681a      	ldr	r2, [r3, #0]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f022 0201 	bic.w	r2, r2, #1
 800c4cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	683a      	ldr	r2, [r7, #0]
 800c4de:	430a      	orrs	r2, r1
 800c4e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f000 f812 	bl	800c50c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2220      	movs	r2, #32
 800c4f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c500:	2300      	movs	r3, #0
}
 800c502:	4618      	mov	r0, r3
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
	...

0800c50c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b085      	sub	sp, #20
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d108      	bne.n	800c52e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2201      	movs	r2, #1
 800c520:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2201      	movs	r2, #1
 800c528:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c52c:	e031      	b.n	800c592 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c52e:	2310      	movs	r3, #16
 800c530:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c532:	2310      	movs	r3, #16
 800c534:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	0e5b      	lsrs	r3, r3, #25
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	f003 0307 	and.w	r3, r3, #7
 800c544:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	0f5b      	lsrs	r3, r3, #29
 800c54e:	b2db      	uxtb	r3, r3
 800c550:	f003 0307 	and.w	r3, r3, #7
 800c554:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c556:	7bbb      	ldrb	r3, [r7, #14]
 800c558:	7b3a      	ldrb	r2, [r7, #12]
 800c55a:	4911      	ldr	r1, [pc, #68]	@ (800c5a0 <UARTEx_SetNbDataToProcess+0x94>)
 800c55c:	5c8a      	ldrb	r2, [r1, r2]
 800c55e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c562:	7b3a      	ldrb	r2, [r7, #12]
 800c564:	490f      	ldr	r1, [pc, #60]	@ (800c5a4 <UARTEx_SetNbDataToProcess+0x98>)
 800c566:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c568:	fb93 f3f2 	sdiv	r3, r3, r2
 800c56c:	b29a      	uxth	r2, r3
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c574:	7bfb      	ldrb	r3, [r7, #15]
 800c576:	7b7a      	ldrb	r2, [r7, #13]
 800c578:	4909      	ldr	r1, [pc, #36]	@ (800c5a0 <UARTEx_SetNbDataToProcess+0x94>)
 800c57a:	5c8a      	ldrb	r2, [r1, r2]
 800c57c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c580:	7b7a      	ldrb	r2, [r7, #13]
 800c582:	4908      	ldr	r1, [pc, #32]	@ (800c5a4 <UARTEx_SetNbDataToProcess+0x98>)
 800c584:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c586:	fb93 f3f2 	sdiv	r3, r3, r2
 800c58a:	b29a      	uxth	r2, r3
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c592:	bf00      	nop
 800c594:	3714      	adds	r7, #20
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr
 800c59e:	bf00      	nop
 800c5a0:	0800f464 	.word	0x0800f464
 800c5a4:	0800f46c 	.word	0x0800f46c

0800c5a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c5a8:	b084      	sub	sp, #16
 800c5aa:	b580      	push	{r7, lr}
 800c5ac:	b084      	sub	sp, #16
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
 800c5b2:	f107 001c 	add.w	r0, r7, #28
 800c5b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c5ba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d121      	bne.n	800c606 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	68da      	ldr	r2, [r3, #12]
 800c5d2:	4b2c      	ldr	r3, [pc, #176]	@ (800c684 <USB_CoreInit+0xdc>)
 800c5d4:	4013      	ands	r3, r2
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	68db      	ldr	r3, [r3, #12]
 800c5de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c5e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d105      	bne.n	800c5fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	68db      	ldr	r3, [r3, #12]
 800c5f2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 faaa 	bl	800cb54 <USB_CoreReset>
 800c600:	4603      	mov	r3, r0
 800c602:	73fb      	strb	r3, [r7, #15]
 800c604:	e01b      	b.n	800c63e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 fa9e 	bl	800cb54 <USB_CoreReset>
 800c618:	4603      	mov	r3, r0
 800c61a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c61c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c620:	2b00      	cmp	r3, #0
 800c622:	d106      	bne.n	800c632 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c628:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	639a      	str	r2, [r3, #56]	@ 0x38
 800c630:	e005      	b.n	800c63e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c636:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c63e:	7fbb      	ldrb	r3, [r7, #30]
 800c640:	2b01      	cmp	r3, #1
 800c642:	d116      	bne.n	800c672 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c648:	b29a      	uxth	r2, r3
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c652:	4b0d      	ldr	r3, [pc, #52]	@ (800c688 <USB_CoreInit+0xe0>)
 800c654:	4313      	orrs	r3, r2
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	f043 0206 	orr.w	r2, r3, #6
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	689b      	ldr	r3, [r3, #8]
 800c66a:	f043 0220 	orr.w	r2, r3, #32
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c672:	7bfb      	ldrb	r3, [r7, #15]
}
 800c674:	4618      	mov	r0, r3
 800c676:	3710      	adds	r7, #16
 800c678:	46bd      	mov	sp, r7
 800c67a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c67e:	b004      	add	sp, #16
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop
 800c684:	ffbdffbf 	.word	0xffbdffbf
 800c688:	03ee0000 	.word	0x03ee0000

0800c68c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b083      	sub	sp, #12
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	f023 0201 	bic.w	r2, r3, #1
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c6a0:	2300      	movs	r3, #0
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	370c      	adds	r7, #12
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr

0800c6ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c6ae:	b580      	push	{r7, lr}
 800c6b0:	b084      	sub	sp, #16
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c6ca:	78fb      	ldrb	r3, [r7, #3]
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	d115      	bne.n	800c6fc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	68db      	ldr	r3, [r3, #12]
 800c6d4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c6dc:	200a      	movs	r0, #10
 800c6de:	f7f5 fdd1 	bl	8002284 <HAL_Delay>
      ms += 10U;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	330a      	adds	r3, #10
 800c6e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f000 fa25 	bl	800cb38 <USB_GetMode>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d01e      	beq.n	800c732 <USB_SetCurrentMode+0x84>
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2bc7      	cmp	r3, #199	@ 0xc7
 800c6f8:	d9f0      	bls.n	800c6dc <USB_SetCurrentMode+0x2e>
 800c6fa:	e01a      	b.n	800c732 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c6fc:	78fb      	ldrb	r3, [r7, #3]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d115      	bne.n	800c72e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c70e:	200a      	movs	r0, #10
 800c710:	f7f5 fdb8 	bl	8002284 <HAL_Delay>
      ms += 10U;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	330a      	adds	r3, #10
 800c718:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 fa0c 	bl	800cb38 <USB_GetMode>
 800c720:	4603      	mov	r3, r0
 800c722:	2b00      	cmp	r3, #0
 800c724:	d005      	beq.n	800c732 <USB_SetCurrentMode+0x84>
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2bc7      	cmp	r3, #199	@ 0xc7
 800c72a:	d9f0      	bls.n	800c70e <USB_SetCurrentMode+0x60>
 800c72c:	e001      	b.n	800c732 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c72e:	2301      	movs	r3, #1
 800c730:	e005      	b.n	800c73e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2bc8      	cmp	r3, #200	@ 0xc8
 800c736:	d101      	bne.n	800c73c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	e000      	b.n	800c73e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c73c:	2300      	movs	r3, #0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
	...

0800c748 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c748:	b084      	sub	sp, #16
 800c74a:	b580      	push	{r7, lr}
 800c74c:	b086      	sub	sp, #24
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
 800c752:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c756:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c75a:	2300      	movs	r3, #0
 800c75c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c762:	2300      	movs	r3, #0
 800c764:	613b      	str	r3, [r7, #16]
 800c766:	e009      	b.n	800c77c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	3340      	adds	r3, #64	@ 0x40
 800c76e:	009b      	lsls	r3, r3, #2
 800c770:	4413      	add	r3, r2
 800c772:	2200      	movs	r2, #0
 800c774:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	3301      	adds	r3, #1
 800c77a:	613b      	str	r3, [r7, #16]
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	2b0e      	cmp	r3, #14
 800c780:	d9f2      	bls.n	800c768 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c782:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c786:	2b00      	cmp	r3, #0
 800c788:	d11c      	bne.n	800c7c4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c798:	f043 0302 	orr.w	r3, r3, #2
 800c79c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7a2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	601a      	str	r2, [r3, #0]
 800c7c2:	e005      	b.n	800c7d0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7c8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	2300      	movs	r3, #0
 800c7da:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c7dc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d10d      	bne.n	800c800 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c7e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d104      	bne.n	800c7f6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c7ec:	2100      	movs	r1, #0
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 f968 	bl	800cac4 <USB_SetDevSpeed>
 800c7f4:	e008      	b.n	800c808 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c7f6:	2101      	movs	r1, #1
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 f963 	bl	800cac4 <USB_SetDevSpeed>
 800c7fe:	e003      	b.n	800c808 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c800:	2103      	movs	r1, #3
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 f95e 	bl	800cac4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c808:	2110      	movs	r1, #16
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 f8fa 	bl	800ca04 <USB_FlushTxFifo>
 800c810:	4603      	mov	r3, r0
 800c812:	2b00      	cmp	r3, #0
 800c814:	d001      	beq.n	800c81a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800c816:	2301      	movs	r3, #1
 800c818:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 f924 	bl	800ca68 <USB_FlushRxFifo>
 800c820:	4603      	mov	r3, r0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d001      	beq.n	800c82a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800c826:	2301      	movs	r3, #1
 800c828:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c830:	461a      	mov	r2, r3
 800c832:	2300      	movs	r3, #0
 800c834:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c83c:	461a      	mov	r2, r3
 800c83e:	2300      	movs	r3, #0
 800c840:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c848:	461a      	mov	r2, r3
 800c84a:	2300      	movs	r3, #0
 800c84c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c84e:	2300      	movs	r3, #0
 800c850:	613b      	str	r3, [r7, #16]
 800c852:	e043      	b.n	800c8dc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	015a      	lsls	r2, r3, #5
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	4413      	add	r3, r2
 800c85c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c866:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c86a:	d118      	bne.n	800c89e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d10a      	bne.n	800c888 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	015a      	lsls	r2, r3, #5
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	4413      	add	r3, r2
 800c87a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c87e:	461a      	mov	r2, r3
 800c880:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c884:	6013      	str	r3, [r2, #0]
 800c886:	e013      	b.n	800c8b0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	015a      	lsls	r2, r3, #5
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	4413      	add	r3, r2
 800c890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c894:	461a      	mov	r2, r3
 800c896:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c89a:	6013      	str	r3, [r2, #0]
 800c89c:	e008      	b.n	800c8b0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	015a      	lsls	r2, r3, #5
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	015a      	lsls	r2, r3, #5
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	4413      	add	r3, r2
 800c8b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8bc:	461a      	mov	r2, r3
 800c8be:	2300      	movs	r3, #0
 800c8c0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	015a      	lsls	r2, r3, #5
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	4413      	add	r3, r2
 800c8ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8ce:	461a      	mov	r2, r3
 800c8d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c8d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	613b      	str	r3, [r7, #16]
 800c8dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d3b5      	bcc.n	800c854 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	613b      	str	r3, [r7, #16]
 800c8ec:	e043      	b.n	800c976 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	015a      	lsls	r2, r3, #5
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	4413      	add	r3, r2
 800c8f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c900:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c904:	d118      	bne.n	800c938 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d10a      	bne.n	800c922 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	015a      	lsls	r2, r3, #5
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	4413      	add	r3, r2
 800c914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c918:	461a      	mov	r2, r3
 800c91a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c91e:	6013      	str	r3, [r2, #0]
 800c920:	e013      	b.n	800c94a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	015a      	lsls	r2, r3, #5
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	4413      	add	r3, r2
 800c92a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c92e:	461a      	mov	r2, r3
 800c930:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c934:	6013      	str	r3, [r2, #0]
 800c936:	e008      	b.n	800c94a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	015a      	lsls	r2, r3, #5
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	4413      	add	r3, r2
 800c940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c944:	461a      	mov	r2, r3
 800c946:	2300      	movs	r3, #0
 800c948:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	015a      	lsls	r2, r3, #5
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	4413      	add	r3, r2
 800c952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c956:	461a      	mov	r2, r3
 800c958:	2300      	movs	r3, #0
 800c95a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	015a      	lsls	r2, r3, #5
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	4413      	add	r3, r2
 800c964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c968:	461a      	mov	r2, r3
 800c96a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c96e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	3301      	adds	r3, #1
 800c974:	613b      	str	r3, [r7, #16]
 800c976:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c97a:	461a      	mov	r2, r3
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	4293      	cmp	r3, r2
 800c980:	d3b5      	bcc.n	800c8ee <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c988:	691b      	ldr	r3, [r3, #16]
 800c98a:	68fa      	ldr	r2, [r7, #12]
 800c98c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c990:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c994:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2200      	movs	r2, #0
 800c99a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800c9a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c9a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d105      	bne.n	800c9b8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	699b      	ldr	r3, [r3, #24]
 800c9b0:	f043 0210 	orr.w	r2, r3, #16
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	699a      	ldr	r2, [r3, #24]
 800c9bc:	4b0f      	ldr	r3, [pc, #60]	@ (800c9fc <USB_DevInit+0x2b4>)
 800c9be:	4313      	orrs	r3, r2
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c9c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d005      	beq.n	800c9d8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	699b      	ldr	r3, [r3, #24]
 800c9d0:	f043 0208 	orr.w	r2, r3, #8
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c9d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d105      	bne.n	800c9ec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	699a      	ldr	r2, [r3, #24]
 800c9e4:	4b06      	ldr	r3, [pc, #24]	@ (800ca00 <USB_DevInit+0x2b8>)
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	687a      	ldr	r2, [r7, #4]
 800c9ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c9ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3718      	adds	r7, #24
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c9f8:	b004      	add	sp, #16
 800c9fa:	4770      	bx	lr
 800c9fc:	803c3800 	.word	0x803c3800
 800ca00:	40000004 	.word	0x40000004

0800ca04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b085      	sub	sp, #20
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	3301      	adds	r3, #1
 800ca16:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ca1e:	d901      	bls.n	800ca24 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ca20:	2303      	movs	r3, #3
 800ca22:	e01b      	b.n	800ca5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	691b      	ldr	r3, [r3, #16]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	daf2      	bge.n	800ca12 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	019b      	lsls	r3, r3, #6
 800ca34:	f043 0220 	orr.w	r2, r3, #32
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	3301      	adds	r3, #1
 800ca40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ca48:	d901      	bls.n	800ca4e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ca4a:	2303      	movs	r3, #3
 800ca4c:	e006      	b.n	800ca5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	691b      	ldr	r3, [r3, #16]
 800ca52:	f003 0320 	and.w	r3, r3, #32
 800ca56:	2b20      	cmp	r3, #32
 800ca58:	d0f0      	beq.n	800ca3c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ca5a:	2300      	movs	r3, #0
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3714      	adds	r7, #20
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr

0800ca68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b085      	sub	sp, #20
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ca70:	2300      	movs	r3, #0
 800ca72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	3301      	adds	r3, #1
 800ca78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ca80:	d901      	bls.n	800ca86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ca82:	2303      	movs	r3, #3
 800ca84:	e018      	b.n	800cab8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	691b      	ldr	r3, [r3, #16]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	daf2      	bge.n	800ca74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2210      	movs	r2, #16
 800ca96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800caa4:	d901      	bls.n	800caaa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800caa6:	2303      	movs	r3, #3
 800caa8:	e006      	b.n	800cab8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	691b      	ldr	r3, [r3, #16]
 800caae:	f003 0310 	and.w	r3, r3, #16
 800cab2:	2b10      	cmp	r3, #16
 800cab4:	d0f0      	beq.n	800ca98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cab6:	2300      	movs	r3, #0
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3714      	adds	r7, #20
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr

0800cac4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b085      	sub	sp, #20
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	460b      	mov	r3, r1
 800cace:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	78fb      	ldrb	r3, [r7, #3]
 800cade:	68f9      	ldr	r1, [r7, #12]
 800cae0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cae4:	4313      	orrs	r3, r2
 800cae6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cae8:	2300      	movs	r3, #0
}
 800caea:	4618      	mov	r0, r3
 800caec:	3714      	adds	r7, #20
 800caee:	46bd      	mov	sp, r7
 800caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf4:	4770      	bx	lr

0800caf6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800caf6:	b480      	push	{r7}
 800caf8:	b085      	sub	sp, #20
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	68fa      	ldr	r2, [r7, #12]
 800cb0c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cb10:	f023 0303 	bic.w	r3, r3, #3
 800cb14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	68fa      	ldr	r2, [r7, #12]
 800cb20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cb24:	f043 0302 	orr.w	r3, r3, #2
 800cb28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cb2a:	2300      	movs	r3, #0
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3714      	adds	r7, #20
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr

0800cb38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	695b      	ldr	r3, [r3, #20]
 800cb44:	f003 0301 	and.w	r3, r3, #1
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr

0800cb54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b085      	sub	sp, #20
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	3301      	adds	r3, #1
 800cb64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cb6c:	d901      	bls.n	800cb72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cb6e:	2303      	movs	r3, #3
 800cb70:	e01b      	b.n	800cbaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	691b      	ldr	r3, [r3, #16]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	daf2      	bge.n	800cb60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	691b      	ldr	r3, [r3, #16]
 800cb82:	f043 0201 	orr.w	r2, r3, #1
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	3301      	adds	r3, #1
 800cb8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cb96:	d901      	bls.n	800cb9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cb98:	2303      	movs	r3, #3
 800cb9a:	e006      	b.n	800cbaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	691b      	ldr	r3, [r3, #16]
 800cba0:	f003 0301 	and.w	r3, r3, #1
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d0f0      	beq.n	800cb8a <USB_CoreReset+0x36>

  return HAL_OK;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3714      	adds	r7, #20
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr
	...

0800cbb8 <GET_Distance>:

/******************************************************************************
 * Prototypes
 *****************************************************************************/
int32_t GET_Distance(UART_HandleTypeDef *huart)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
    int32_t Distance = 0U;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	60fb      	str	r3, [r7, #12]
    uint8_t index    = 0U;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	72fb      	strb	r3, [r7, #11]

    if (huart != NULL)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d016      	beq.n	800cbfc <GET_Distance+0x44>
    {
        for (index = 0U; index < 5U; ++index)
 800cbce:	2300      	movs	r3, #0
 800cbd0:	72fb      	strb	r3, [r7, #11]
 800cbd2:	e009      	b.n	800cbe8 <GET_Distance+0x30>
        {
            /* Take the average of 5 measurements */
            Distance += TOF_Trigger_Data(huart);
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f000 f81b 	bl	800cc10 <TOF_Trigger_Data>
 800cbda:	4602      	mov	r2, r0
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	4413      	add	r3, r2
 800cbe0:	60fb      	str	r3, [r7, #12]
        for (index = 0U; index < 5U; ++index)
 800cbe2:	7afb      	ldrb	r3, [r7, #11]
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	72fb      	strb	r3, [r7, #11]
 800cbe8:	7afb      	ldrb	r3, [r7, #11]
 800cbea:	2b04      	cmp	r3, #4
 800cbec:	d9f2      	bls.n	800cbd4 <GET_Distance+0x1c>
        }

        Distance = (int32_t)(Distance / 5U);
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	4a06      	ldr	r2, [pc, #24]	@ (800cc0c <GET_Distance+0x54>)
 800cbf2:	fba2 2303 	umull	r2, r3, r2, r3
 800cbf6:	089b      	lsrs	r3, r3, #2
 800cbf8:	60fb      	str	r3, [r7, #12]
 800cbfa:	e002      	b.n	800cc02 <GET_Distance+0x4a>
    }
    else
    {
        Distance = ERROR; /* Input parameter invalid */
 800cbfc:	f04f 33ff 	mov.w	r3, #4294967295
 800cc00:	60fb      	str	r3, [r7, #12]
    }

    return Distance;
 800cc02:	68fb      	ldr	r3, [r7, #12]
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3710      	adds	r7, #16
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	cccccccd 	.word	0xcccccccd

0800cc10 <TOF_Trigger_Data>:
    return status;
}


int32_t TOF_Trigger_Data(UART_HandleTypeDef *huart)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b088      	sub	sp, #32
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
	uint8_t  Downward[] = { 0x5A, 0x04, 0x04, 0x00 };
 800cc18:	4b1e      	ldr	r3, [pc, #120]	@ (800cc94 <TOF_Trigger_Data+0x84>)
 800cc1a:	617b      	str	r3, [r7, #20]
	uint8_t  Data[9]    = {0};
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	60bb      	str	r3, [r7, #8]
 800cc20:	f107 030c 	add.w	r3, r7, #12
 800cc24:	2200      	movs	r2, #0
 800cc26:	601a      	str	r2, [r3, #0]
 800cc28:	711a      	strb	r2, [r3, #4]
	int32_t  Distance   = ERROR;
 800cc2a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc2e:	61bb      	str	r3, [r7, #24]
	int32_t  retVal     = 0U;
 800cc30:	2300      	movs	r3, #0
 800cc32:	61fb      	str	r3, [r7, #28]

	if (huart != NULL) /* Check input parameter */
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d023      	beq.n	800cc82 <TOF_Trigger_Data+0x72>
	{
		/* Send request */
		HAL_UART_Transmit(huart, Downward, 4U, 5);
 800cc3a:	f107 0114 	add.w	r1, r7, #20
 800cc3e:	2305      	movs	r3, #5
 800cc40:	2204      	movs	r2, #4
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f7fc fd70 	bl	8009728 <HAL_UART_Transmit>

		/* Get Data */
        if ((HAL_UART_Receive(huart, &Data[0U], 9U, 5) == HAL_OK)
 800cc48:	f107 0108 	add.w	r1, r7, #8
 800cc4c:	2305      	movs	r3, #5
 800cc4e:	2209      	movs	r2, #9
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f7fc fdf7 	bl	8009844 <HAL_UART_Receive>
 800cc56:	4603      	mov	r3, r0
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d115      	bne.n	800cc88 <TOF_Trigger_Data+0x78>
                       && (Data[0U] == 0x59U) && (Data[1U] == 0x59U))
 800cc5c:	7a3b      	ldrb	r3, [r7, #8]
 800cc5e:	2b59      	cmp	r3, #89	@ 0x59
 800cc60:	d112      	bne.n	800cc88 <TOF_Trigger_Data+0x78>
 800cc62:	7a7b      	ldrb	r3, [r7, #9]
 800cc64:	2b59      	cmp	r3, #89	@ 0x59
 800cc66:	d10f      	bne.n	800cc88 <TOF_Trigger_Data+0x78>
		{
            Distance = (int32_t)(Data[DIST_L] | (Data[DIST_H] << 8U));
 800cc68:	7abb      	ldrb	r3, [r7, #10]
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	7afb      	ldrb	r3, [r7, #11]
 800cc6e:	021b      	lsls	r3, r3, #8
 800cc70:	4313      	orrs	r3, r2
 800cc72:	61bb      	str	r3, [r7, #24]

            if ((Distance >= TOF_MIN_DISTANCE) && (Distance <= TOF_MAX_DISTANCE)) /* Check if distance is in valid distance range */
 800cc74:	69bb      	ldr	r3, [r7, #24]
 800cc76:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800cc7a:	d805      	bhi.n	800cc88 <TOF_Trigger_Data+0x78>
            {
                retVal = Distance;
 800cc7c:	69bb      	ldr	r3, [r7, #24]
 800cc7e:	61fb      	str	r3, [r7, #28]
 800cc80:	e002      	b.n	800cc88 <TOF_Trigger_Data+0x78>
            }
		}
	}
	else
	{
		retVal = ERROR;
 800cc82:	f04f 33ff 	mov.w	r3, #4294967295
 800cc86:	61fb      	str	r3, [r7, #28]
	}

	return retVal;
 800cc88:	69fb      	ldr	r3, [r7, #28]
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3720      	adds	r7, #32
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	0004045a 	.word	0x0004045a

0800cc98 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b085      	sub	sp, #20
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	4603      	mov	r3, r0
 800cca0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cca2:	2300      	movs	r3, #0
 800cca4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ccaa:	2b84      	cmp	r3, #132	@ 0x84
 800ccac:	d005      	beq.n	800ccba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ccae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	4413      	add	r3, r2
 800ccb6:	3303      	adds	r3, #3
 800ccb8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ccba:	68fb      	ldr	r3, [r7, #12]
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3714      	adds	r7, #20
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr

0800ccc8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ccc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccca:	b089      	sub	sp, #36	@ 0x24
 800cccc:	af04      	add	r7, sp, #16
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	695b      	ldr	r3, [r3, #20]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d020      	beq.n	800cd1c <osThreadCreate+0x54>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	699b      	ldr	r3, [r3, #24]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d01c      	beq.n	800cd1c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	685c      	ldr	r4, [r3, #4]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	691e      	ldr	r6, [r3, #16]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7ff ffcf 	bl	800cc98 <makeFreeRtosPriority>
 800ccfa:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	695b      	ldr	r3, [r3, #20]
 800cd00:	687a      	ldr	r2, [r7, #4]
 800cd02:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd04:	9202      	str	r2, [sp, #8]
 800cd06:	9301      	str	r3, [sp, #4]
 800cd08:	9100      	str	r1, [sp, #0]
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	4632      	mov	r2, r6
 800cd0e:	4629      	mov	r1, r5
 800cd10:	4620      	mov	r0, r4
 800cd12:	f001 fa37 	bl	800e184 <xTaskCreateStatic>
 800cd16:	4603      	mov	r3, r0
 800cd18:	60fb      	str	r3, [r7, #12]
 800cd1a:	e01c      	b.n	800cd56 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	685c      	ldr	r4, [r3, #4]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd28:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7ff ffb1 	bl	800cc98 <makeFreeRtosPriority>
 800cd36:	4602      	mov	r2, r0
 800cd38:	f107 030c 	add.w	r3, r7, #12
 800cd3c:	9301      	str	r3, [sp, #4]
 800cd3e:	9200      	str	r2, [sp, #0]
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	4632      	mov	r2, r6
 800cd44:	4629      	mov	r1, r5
 800cd46:	4620      	mov	r0, r4
 800cd48:	f001 fa7c 	bl	800e244 <xTaskCreate>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	d001      	beq.n	800cd56 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800cd52:	2300      	movs	r3, #0
 800cd54:	e000      	b.n	800cd58 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800cd56:	68fb      	ldr	r3, [r7, #12]
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3714      	adds	r7, #20
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cd60 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d001      	beq.n	800cd76 <osDelay+0x16>
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	e000      	b.n	800cd78 <osDelay+0x18>
 800cd76:	2301      	movs	r3, #1
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f001 fc43 	bl	800e604 <vTaskDelay>
  
  return osOK;
 800cd7e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3710      	adds	r7, #16
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b086      	sub	sp, #24
 800cd8c:	af02      	add	r7, sp, #8
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d00f      	beq.n	800cdba <osSemaphoreCreate+0x32>
    if (count == 1) {
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d10a      	bne.n	800cdb6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	2203      	movs	r2, #3
 800cda6:	9200      	str	r2, [sp, #0]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	2100      	movs	r1, #0
 800cdac:	2001      	movs	r0, #1
 800cdae:	f000 fd7f 	bl	800d8b0 <xQueueGenericCreateStatic>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	e016      	b.n	800cde4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	e014      	b.n	800cde4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d110      	bne.n	800cde2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800cdc0:	2203      	movs	r2, #3
 800cdc2:	2100      	movs	r1, #0
 800cdc4:	2001      	movs	r0, #1
 800cdc6:	f000 fdf0 	bl	800d9aa <xQueueGenericCreate>
 800cdca:	60f8      	str	r0, [r7, #12]
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d005      	beq.n	800cdde <osSemaphoreCreate+0x56>
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	2100      	movs	r1, #0
 800cdd8:	68f8      	ldr	r0, [r7, #12]
 800cdda:	f000 fe41 	bl	800da60 <xQueueGenericSend>
      return sema;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	e000      	b.n	800cde4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800cde2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3710      	adds	r7, #16
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b08a      	sub	sp, #40	@ 0x28
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cdf8:	f001 fca4 	bl	800e744 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cdfc:	4b5c      	ldr	r3, [pc, #368]	@ (800cf70 <pvPortMalloc+0x184>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d101      	bne.n	800ce08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ce04:	f000 f924 	bl	800d050 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ce08:	4b5a      	ldr	r3, [pc, #360]	@ (800cf74 <pvPortMalloc+0x188>)
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	4013      	ands	r3, r2
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	f040 8095 	bne.w	800cf40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d01e      	beq.n	800ce5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ce1c:	2208      	movs	r2, #8
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	4413      	add	r3, r2
 800ce22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f003 0307 	and.w	r3, r3, #7
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d015      	beq.n	800ce5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f023 0307 	bic.w	r3, r3, #7
 800ce34:	3308      	adds	r3, #8
 800ce36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f003 0307 	and.w	r3, r3, #7
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d00b      	beq.n	800ce5a <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ce42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce46:	f383 8811 	msr	BASEPRI, r3
 800ce4a:	f3bf 8f6f 	isb	sy
 800ce4e:	f3bf 8f4f 	dsb	sy
 800ce52:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ce54:	bf00      	nop
 800ce56:	bf00      	nop
 800ce58:	e7fd      	b.n	800ce56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d06f      	beq.n	800cf40 <pvPortMalloc+0x154>
 800ce60:	4b45      	ldr	r3, [pc, #276]	@ (800cf78 <pvPortMalloc+0x18c>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d86a      	bhi.n	800cf40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ce6a:	4b44      	ldr	r3, [pc, #272]	@ (800cf7c <pvPortMalloc+0x190>)
 800ce6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ce6e:	4b43      	ldr	r3, [pc, #268]	@ (800cf7c <pvPortMalloc+0x190>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce74:	e004      	b.n	800ce80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ce76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ce7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	429a      	cmp	r2, r3
 800ce88:	d903      	bls.n	800ce92 <pvPortMalloc+0xa6>
 800ce8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d1f1      	bne.n	800ce76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ce92:	4b37      	ldr	r3, [pc, #220]	@ (800cf70 <pvPortMalloc+0x184>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d051      	beq.n	800cf40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ce9c:	6a3b      	ldr	r3, [r7, #32]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	2208      	movs	r2, #8
 800cea2:	4413      	add	r3, r2
 800cea4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea8:	681a      	ldr	r2, [r3, #0]
 800ceaa:	6a3b      	ldr	r3, [r7, #32]
 800ceac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ceae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb0:	685a      	ldr	r2, [r3, #4]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	1ad2      	subs	r2, r2, r3
 800ceb6:	2308      	movs	r3, #8
 800ceb8:	005b      	lsls	r3, r3, #1
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d920      	bls.n	800cf00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	4413      	add	r3, r2
 800cec4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	f003 0307 	and.w	r3, r3, #7
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d00b      	beq.n	800cee8 <pvPortMalloc+0xfc>
	__asm volatile
 800ced0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ced4:	f383 8811 	msr	BASEPRI, r3
 800ced8:	f3bf 8f6f 	isb	sy
 800cedc:	f3bf 8f4f 	dsb	sy
 800cee0:	613b      	str	r3, [r7, #16]
}
 800cee2:	bf00      	nop
 800cee4:	bf00      	nop
 800cee6:	e7fd      	b.n	800cee4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceea:	685a      	ldr	r2, [r3, #4]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	1ad2      	subs	r2, r2, r3
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cefa:	69b8      	ldr	r0, [r7, #24]
 800cefc:	f000 f90a 	bl	800d114 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cf00:	4b1d      	ldr	r3, [pc, #116]	@ (800cf78 <pvPortMalloc+0x18c>)
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf06:	685b      	ldr	r3, [r3, #4]
 800cf08:	1ad3      	subs	r3, r2, r3
 800cf0a:	4a1b      	ldr	r2, [pc, #108]	@ (800cf78 <pvPortMalloc+0x18c>)
 800cf0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cf0e:	4b1a      	ldr	r3, [pc, #104]	@ (800cf78 <pvPortMalloc+0x18c>)
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	4b1b      	ldr	r3, [pc, #108]	@ (800cf80 <pvPortMalloc+0x194>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d203      	bcs.n	800cf22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cf1a:	4b17      	ldr	r3, [pc, #92]	@ (800cf78 <pvPortMalloc+0x18c>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4a18      	ldr	r2, [pc, #96]	@ (800cf80 <pvPortMalloc+0x194>)
 800cf20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cf22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf24:	685a      	ldr	r2, [r3, #4]
 800cf26:	4b13      	ldr	r3, [pc, #76]	@ (800cf74 <pvPortMalloc+0x188>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	431a      	orrs	r2, r3
 800cf2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cf30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf32:	2200      	movs	r2, #0
 800cf34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cf36:	4b13      	ldr	r3, [pc, #76]	@ (800cf84 <pvPortMalloc+0x198>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	4a11      	ldr	r2, [pc, #68]	@ (800cf84 <pvPortMalloc+0x198>)
 800cf3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cf40:	f001 fc0e 	bl	800e760 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf44:	69fb      	ldr	r3, [r7, #28]
 800cf46:	f003 0307 	and.w	r3, r3, #7
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d00b      	beq.n	800cf66 <pvPortMalloc+0x17a>
	__asm volatile
 800cf4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf52:	f383 8811 	msr	BASEPRI, r3
 800cf56:	f3bf 8f6f 	isb	sy
 800cf5a:	f3bf 8f4f 	dsb	sy
 800cf5e:	60fb      	str	r3, [r7, #12]
}
 800cf60:	bf00      	nop
 800cf62:	bf00      	nop
 800cf64:	e7fd      	b.n	800cf62 <pvPortMalloc+0x176>
	return pvReturn;
 800cf66:	69fb      	ldr	r3, [r7, #28]
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3728      	adds	r7, #40	@ 0x28
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	24004a40 	.word	0x24004a40
 800cf74:	24004a54 	.word	0x24004a54
 800cf78:	24004a44 	.word	0x24004a44
 800cf7c:	24004a38 	.word	0x24004a38
 800cf80:	24004a48 	.word	0x24004a48
 800cf84:	24004a4c 	.word	0x24004a4c

0800cf88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b086      	sub	sp, #24
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d04f      	beq.n	800d03a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cf9a:	2308      	movs	r3, #8
 800cf9c:	425b      	negs	r3, r3
 800cf9e:	697a      	ldr	r2, [r7, #20]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	685a      	ldr	r2, [r3, #4]
 800cfac:	4b25      	ldr	r3, [pc, #148]	@ (800d044 <vPortFree+0xbc>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4013      	ands	r3, r2
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d10b      	bne.n	800cfce <vPortFree+0x46>
	__asm volatile
 800cfb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfba:	f383 8811 	msr	BASEPRI, r3
 800cfbe:	f3bf 8f6f 	isb	sy
 800cfc2:	f3bf 8f4f 	dsb	sy
 800cfc6:	60fb      	str	r3, [r7, #12]
}
 800cfc8:	bf00      	nop
 800cfca:	bf00      	nop
 800cfcc:	e7fd      	b.n	800cfca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d00b      	beq.n	800cfee <vPortFree+0x66>
	__asm volatile
 800cfd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfda:	f383 8811 	msr	BASEPRI, r3
 800cfde:	f3bf 8f6f 	isb	sy
 800cfe2:	f3bf 8f4f 	dsb	sy
 800cfe6:	60bb      	str	r3, [r7, #8]
}
 800cfe8:	bf00      	nop
 800cfea:	bf00      	nop
 800cfec:	e7fd      	b.n	800cfea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	685a      	ldr	r2, [r3, #4]
 800cff2:	4b14      	ldr	r3, [pc, #80]	@ (800d044 <vPortFree+0xbc>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4013      	ands	r3, r2
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d01e      	beq.n	800d03a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d11a      	bne.n	800d03a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	685a      	ldr	r2, [r3, #4]
 800d008:	4b0e      	ldr	r3, [pc, #56]	@ (800d044 <vPortFree+0xbc>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	43db      	mvns	r3, r3
 800d00e:	401a      	ands	r2, r3
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d014:	f001 fb96 	bl	800e744 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	685a      	ldr	r2, [r3, #4]
 800d01c:	4b0a      	ldr	r3, [pc, #40]	@ (800d048 <vPortFree+0xc0>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4413      	add	r3, r2
 800d022:	4a09      	ldr	r2, [pc, #36]	@ (800d048 <vPortFree+0xc0>)
 800d024:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d026:	6938      	ldr	r0, [r7, #16]
 800d028:	f000 f874 	bl	800d114 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d02c:	4b07      	ldr	r3, [pc, #28]	@ (800d04c <vPortFree+0xc4>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	3301      	adds	r3, #1
 800d032:	4a06      	ldr	r2, [pc, #24]	@ (800d04c <vPortFree+0xc4>)
 800d034:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d036:	f001 fb93 	bl	800e760 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d03a:	bf00      	nop
 800d03c:	3718      	adds	r7, #24
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	24004a54 	.word	0x24004a54
 800d048:	24004a44 	.word	0x24004a44
 800d04c:	24004a50 	.word	0x24004a50

0800d050 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d050:	b480      	push	{r7}
 800d052:	b085      	sub	sp, #20
 800d054:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d056:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d05a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d05c:	4b27      	ldr	r3, [pc, #156]	@ (800d0fc <prvHeapInit+0xac>)
 800d05e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	f003 0307 	and.w	r3, r3, #7
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00c      	beq.n	800d084 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	3307      	adds	r3, #7
 800d06e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f023 0307 	bic.w	r3, r3, #7
 800d076:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d078:	68ba      	ldr	r2, [r7, #8]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	1ad3      	subs	r3, r2, r3
 800d07e:	4a1f      	ldr	r2, [pc, #124]	@ (800d0fc <prvHeapInit+0xac>)
 800d080:	4413      	add	r3, r2
 800d082:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d088:	4a1d      	ldr	r2, [pc, #116]	@ (800d100 <prvHeapInit+0xb0>)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d08e:	4b1c      	ldr	r3, [pc, #112]	@ (800d100 <prvHeapInit+0xb0>)
 800d090:	2200      	movs	r2, #0
 800d092:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	68ba      	ldr	r2, [r7, #8]
 800d098:	4413      	add	r3, r2
 800d09a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d09c:	2208      	movs	r2, #8
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	1a9b      	subs	r3, r3, r2
 800d0a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f023 0307 	bic.w	r3, r3, #7
 800d0aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	4a15      	ldr	r2, [pc, #84]	@ (800d104 <prvHeapInit+0xb4>)
 800d0b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d0b2:	4b14      	ldr	r3, [pc, #80]	@ (800d104 <prvHeapInit+0xb4>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d0ba:	4b12      	ldr	r3, [pc, #72]	@ (800d104 <prvHeapInit+0xb4>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	68fa      	ldr	r2, [r7, #12]
 800d0ca:	1ad2      	subs	r2, r2, r3
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d0d0:	4b0c      	ldr	r3, [pc, #48]	@ (800d104 <prvHeapInit+0xb4>)
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	4a0a      	ldr	r2, [pc, #40]	@ (800d108 <prvHeapInit+0xb8>)
 800d0de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	685b      	ldr	r3, [r3, #4]
 800d0e4:	4a09      	ldr	r2, [pc, #36]	@ (800d10c <prvHeapInit+0xbc>)
 800d0e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d0e8:	4b09      	ldr	r3, [pc, #36]	@ (800d110 <prvHeapInit+0xc0>)
 800d0ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d0ee:	601a      	str	r2, [r3, #0]
}
 800d0f0:	bf00      	nop
 800d0f2:	3714      	adds	r7, #20
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr
 800d0fc:	24000e38 	.word	0x24000e38
 800d100:	24004a38 	.word	0x24004a38
 800d104:	24004a40 	.word	0x24004a40
 800d108:	24004a48 	.word	0x24004a48
 800d10c:	24004a44 	.word	0x24004a44
 800d110:	24004a54 	.word	0x24004a54

0800d114 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d114:	b480      	push	{r7}
 800d116:	b085      	sub	sp, #20
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d11c:	4b28      	ldr	r3, [pc, #160]	@ (800d1c0 <prvInsertBlockIntoFreeList+0xac>)
 800d11e:	60fb      	str	r3, [r7, #12]
 800d120:	e002      	b.n	800d128 <prvInsertBlockIntoFreeList+0x14>
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	60fb      	str	r3, [r7, #12]
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	687a      	ldr	r2, [r7, #4]
 800d12e:	429a      	cmp	r2, r3
 800d130:	d8f7      	bhi.n	800d122 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	68ba      	ldr	r2, [r7, #8]
 800d13c:	4413      	add	r3, r2
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	429a      	cmp	r2, r3
 800d142:	d108      	bne.n	800d156 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	685a      	ldr	r2, [r3, #4]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	441a      	add	r2, r3
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	68ba      	ldr	r2, [r7, #8]
 800d160:	441a      	add	r2, r3
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	429a      	cmp	r2, r3
 800d168:	d118      	bne.n	800d19c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681a      	ldr	r2, [r3, #0]
 800d16e:	4b15      	ldr	r3, [pc, #84]	@ (800d1c4 <prvInsertBlockIntoFreeList+0xb0>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	429a      	cmp	r2, r3
 800d174:	d00d      	beq.n	800d192 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	685a      	ldr	r2, [r3, #4]
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	441a      	add	r2, r3
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	681a      	ldr	r2, [r3, #0]
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	601a      	str	r2, [r3, #0]
 800d190:	e008      	b.n	800d1a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d192:	4b0c      	ldr	r3, [pc, #48]	@ (800d1c4 <prvInsertBlockIntoFreeList+0xb0>)
 800d194:	681a      	ldr	r2, [r3, #0]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	601a      	str	r2, [r3, #0]
 800d19a:	e003      	b.n	800d1a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d1a4:	68fa      	ldr	r2, [r7, #12]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d002      	beq.n	800d1b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1b2:	bf00      	nop
 800d1b4:	3714      	adds	r7, #20
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1bc:	4770      	bx	lr
 800d1be:	bf00      	nop
 800d1c0:	24004a38 	.word	0x24004a38
 800d1c4:	24004a40 	.word	0x24004a40

0800d1c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b083      	sub	sp, #12
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f103 0208 	add.w	r2, r3, #8
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d1e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f103 0208 	add.w	r2, r3, #8
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f103 0208 	add.w	r2, r3, #8
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d1fc:	bf00      	nop
 800d1fe:	370c      	adds	r7, #12
 800d200:	46bd      	mov	sp, r7
 800d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d206:	4770      	bx	lr

0800d208 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d208:	b480      	push	{r7}
 800d20a:	b083      	sub	sp, #12
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2200      	movs	r2, #0
 800d214:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d216:	bf00      	nop
 800d218:	370c      	adds	r7, #12
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr

0800d222 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d222:	b480      	push	{r7}
 800d224:	b085      	sub	sp, #20
 800d226:	af00      	add	r7, sp, #0
 800d228:	6078      	str	r0, [r7, #4]
 800d22a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	68fa      	ldr	r2, [r7, #12]
 800d236:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	689a      	ldr	r2, [r3, #8]
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	689b      	ldr	r3, [r3, #8]
 800d244:	683a      	ldr	r2, [r7, #0]
 800d246:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	683a      	ldr	r2, [r7, #0]
 800d24c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	687a      	ldr	r2, [r7, #4]
 800d252:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	1c5a      	adds	r2, r3, #1
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	601a      	str	r2, [r3, #0]
}
 800d25e:	bf00      	nop
 800d260:	3714      	adds	r7, #20
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr

0800d26a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d26a:	b480      	push	{r7}
 800d26c:	b085      	sub	sp, #20
 800d26e:	af00      	add	r7, sp, #0
 800d270:	6078      	str	r0, [r7, #4]
 800d272:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d280:	d103      	bne.n	800d28a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	691b      	ldr	r3, [r3, #16]
 800d286:	60fb      	str	r3, [r7, #12]
 800d288:	e00c      	b.n	800d2a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	3308      	adds	r3, #8
 800d28e:	60fb      	str	r3, [r7, #12]
 800d290:	e002      	b.n	800d298 <vListInsert+0x2e>
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	60fb      	str	r3, [r7, #12]
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	68ba      	ldr	r2, [r7, #8]
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d2f6      	bcs.n	800d292 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	685a      	ldr	r2, [r3, #4]
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	683a      	ldr	r2, [r7, #0]
 800d2b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	68fa      	ldr	r2, [r7, #12]
 800d2b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	683a      	ldr	r2, [r7, #0]
 800d2be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	1c5a      	adds	r2, r3, #1
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	601a      	str	r2, [r3, #0]
}
 800d2d0:	bf00      	nop
 800d2d2:	3714      	adds	r7, #20
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr

0800d2dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b085      	sub	sp, #20
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	691b      	ldr	r3, [r3, #16]
 800d2e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	687a      	ldr	r2, [r7, #4]
 800d2f0:	6892      	ldr	r2, [r2, #8]
 800d2f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	689b      	ldr	r3, [r3, #8]
 800d2f8:	687a      	ldr	r2, [r7, #4]
 800d2fa:	6852      	ldr	r2, [r2, #4]
 800d2fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	429a      	cmp	r2, r3
 800d306:	d103      	bne.n	800d310 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	689a      	ldr	r2, [r3, #8]
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2200      	movs	r2, #0
 800d314:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	1e5a      	subs	r2, r3, #1
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
}
 800d324:	4618      	mov	r0, r3
 800d326:	3714      	adds	r7, #20
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr

0800d330 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d330:	b480      	push	{r7}
 800d332:	b085      	sub	sp, #20
 800d334:	af00      	add	r7, sp, #0
 800d336:	60f8      	str	r0, [r7, #12]
 800d338:	60b9      	str	r1, [r7, #8]
 800d33a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	3b04      	subs	r3, #4
 800d340:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d348:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	3b04      	subs	r3, #4
 800d34e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	f023 0201 	bic.w	r2, r3, #1
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	3b04      	subs	r3, #4
 800d35e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d360:	4a0c      	ldr	r2, [pc, #48]	@ (800d394 <pxPortInitialiseStack+0x64>)
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	3b14      	subs	r3, #20
 800d36a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	3b04      	subs	r3, #4
 800d376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f06f 0202 	mvn.w	r2, #2
 800d37e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	3b20      	subs	r3, #32
 800d384:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d386:	68fb      	ldr	r3, [r7, #12]
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3714      	adds	r7, #20
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr
 800d394:	0800d399 	.word	0x0800d399

0800d398 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d398:	b480      	push	{r7}
 800d39a:	b085      	sub	sp, #20
 800d39c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d3a2:	4b13      	ldr	r3, [pc, #76]	@ (800d3f0 <prvTaskExitError+0x58>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3aa:	d00b      	beq.n	800d3c4 <prvTaskExitError+0x2c>
	__asm volatile
 800d3ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3b0:	f383 8811 	msr	BASEPRI, r3
 800d3b4:	f3bf 8f6f 	isb	sy
 800d3b8:	f3bf 8f4f 	dsb	sy
 800d3bc:	60fb      	str	r3, [r7, #12]
}
 800d3be:	bf00      	nop
 800d3c0:	bf00      	nop
 800d3c2:	e7fd      	b.n	800d3c0 <prvTaskExitError+0x28>
	__asm volatile
 800d3c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3c8:	f383 8811 	msr	BASEPRI, r3
 800d3cc:	f3bf 8f6f 	isb	sy
 800d3d0:	f3bf 8f4f 	dsb	sy
 800d3d4:	60bb      	str	r3, [r7, #8]
}
 800d3d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d3d8:	bf00      	nop
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d0fc      	beq.n	800d3da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d3e0:	bf00      	nop
 800d3e2:	bf00      	nop
 800d3e4:	3714      	adds	r7, #20
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr
 800d3ee:	bf00      	nop
 800d3f0:	24000028 	.word	0x24000028
	...

0800d400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d400:	4b07      	ldr	r3, [pc, #28]	@ (800d420 <pxCurrentTCBConst2>)
 800d402:	6819      	ldr	r1, [r3, #0]
 800d404:	6808      	ldr	r0, [r1, #0]
 800d406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d40a:	f380 8809 	msr	PSP, r0
 800d40e:	f3bf 8f6f 	isb	sy
 800d412:	f04f 0000 	mov.w	r0, #0
 800d416:	f380 8811 	msr	BASEPRI, r0
 800d41a:	4770      	bx	lr
 800d41c:	f3af 8000 	nop.w

0800d420 <pxCurrentTCBConst2>:
 800d420:	24004a60 	.word	0x24004a60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d424:	bf00      	nop
 800d426:	bf00      	nop

0800d428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d428:	4808      	ldr	r0, [pc, #32]	@ (800d44c <prvPortStartFirstTask+0x24>)
 800d42a:	6800      	ldr	r0, [r0, #0]
 800d42c:	6800      	ldr	r0, [r0, #0]
 800d42e:	f380 8808 	msr	MSP, r0
 800d432:	f04f 0000 	mov.w	r0, #0
 800d436:	f380 8814 	msr	CONTROL, r0
 800d43a:	b662      	cpsie	i
 800d43c:	b661      	cpsie	f
 800d43e:	f3bf 8f4f 	dsb	sy
 800d442:	f3bf 8f6f 	isb	sy
 800d446:	df00      	svc	0
 800d448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d44a:	bf00      	nop
 800d44c:	e000ed08 	.word	0xe000ed08

0800d450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b086      	sub	sp, #24
 800d454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d456:	4b47      	ldr	r3, [pc, #284]	@ (800d574 <xPortStartScheduler+0x124>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	4a47      	ldr	r2, [pc, #284]	@ (800d578 <xPortStartScheduler+0x128>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d10b      	bne.n	800d478 <xPortStartScheduler+0x28>
	__asm volatile
 800d460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d464:	f383 8811 	msr	BASEPRI, r3
 800d468:	f3bf 8f6f 	isb	sy
 800d46c:	f3bf 8f4f 	dsb	sy
 800d470:	613b      	str	r3, [r7, #16]
}
 800d472:	bf00      	nop
 800d474:	bf00      	nop
 800d476:	e7fd      	b.n	800d474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d478:	4b3e      	ldr	r3, [pc, #248]	@ (800d574 <xPortStartScheduler+0x124>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	4a3f      	ldr	r2, [pc, #252]	@ (800d57c <xPortStartScheduler+0x12c>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d10b      	bne.n	800d49a <xPortStartScheduler+0x4a>
	__asm volatile
 800d482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d486:	f383 8811 	msr	BASEPRI, r3
 800d48a:	f3bf 8f6f 	isb	sy
 800d48e:	f3bf 8f4f 	dsb	sy
 800d492:	60fb      	str	r3, [r7, #12]
}
 800d494:	bf00      	nop
 800d496:	bf00      	nop
 800d498:	e7fd      	b.n	800d496 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d49a:	4b39      	ldr	r3, [pc, #228]	@ (800d580 <xPortStartScheduler+0x130>)
 800d49c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	b2db      	uxtb	r3, r3
 800d4a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	22ff      	movs	r2, #255	@ 0xff
 800d4aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	b2db      	uxtb	r3, r3
 800d4b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d4b4:	78fb      	ldrb	r3, [r7, #3]
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d4bc:	b2da      	uxtb	r2, r3
 800d4be:	4b31      	ldr	r3, [pc, #196]	@ (800d584 <xPortStartScheduler+0x134>)
 800d4c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d4c2:	4b31      	ldr	r3, [pc, #196]	@ (800d588 <xPortStartScheduler+0x138>)
 800d4c4:	2207      	movs	r2, #7
 800d4c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d4c8:	e009      	b.n	800d4de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d4ca:	4b2f      	ldr	r3, [pc, #188]	@ (800d588 <xPortStartScheduler+0x138>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	3b01      	subs	r3, #1
 800d4d0:	4a2d      	ldr	r2, [pc, #180]	@ (800d588 <xPortStartScheduler+0x138>)
 800d4d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d4d4:	78fb      	ldrb	r3, [r7, #3]
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	005b      	lsls	r3, r3, #1
 800d4da:	b2db      	uxtb	r3, r3
 800d4dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d4de:	78fb      	ldrb	r3, [r7, #3]
 800d4e0:	b2db      	uxtb	r3, r3
 800d4e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4e6:	2b80      	cmp	r3, #128	@ 0x80
 800d4e8:	d0ef      	beq.n	800d4ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d4ea:	4b27      	ldr	r3, [pc, #156]	@ (800d588 <xPortStartScheduler+0x138>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f1c3 0307 	rsb	r3, r3, #7
 800d4f2:	2b04      	cmp	r3, #4
 800d4f4:	d00b      	beq.n	800d50e <xPortStartScheduler+0xbe>
	__asm volatile
 800d4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4fa:	f383 8811 	msr	BASEPRI, r3
 800d4fe:	f3bf 8f6f 	isb	sy
 800d502:	f3bf 8f4f 	dsb	sy
 800d506:	60bb      	str	r3, [r7, #8]
}
 800d508:	bf00      	nop
 800d50a:	bf00      	nop
 800d50c:	e7fd      	b.n	800d50a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d50e:	4b1e      	ldr	r3, [pc, #120]	@ (800d588 <xPortStartScheduler+0x138>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	021b      	lsls	r3, r3, #8
 800d514:	4a1c      	ldr	r2, [pc, #112]	@ (800d588 <xPortStartScheduler+0x138>)
 800d516:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d518:	4b1b      	ldr	r3, [pc, #108]	@ (800d588 <xPortStartScheduler+0x138>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d520:	4a19      	ldr	r2, [pc, #100]	@ (800d588 <xPortStartScheduler+0x138>)
 800d522:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	b2da      	uxtb	r2, r3
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d52c:	4b17      	ldr	r3, [pc, #92]	@ (800d58c <xPortStartScheduler+0x13c>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a16      	ldr	r2, [pc, #88]	@ (800d58c <xPortStartScheduler+0x13c>)
 800d532:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d536:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d538:	4b14      	ldr	r3, [pc, #80]	@ (800d58c <xPortStartScheduler+0x13c>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4a13      	ldr	r2, [pc, #76]	@ (800d58c <xPortStartScheduler+0x13c>)
 800d53e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d542:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d544:	f000 f8da 	bl	800d6fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d548:	4b11      	ldr	r3, [pc, #68]	@ (800d590 <xPortStartScheduler+0x140>)
 800d54a:	2200      	movs	r2, #0
 800d54c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d54e:	f000 f8f9 	bl	800d744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d552:	4b10      	ldr	r3, [pc, #64]	@ (800d594 <xPortStartScheduler+0x144>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	4a0f      	ldr	r2, [pc, #60]	@ (800d594 <xPortStartScheduler+0x144>)
 800d558:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d55c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d55e:	f7ff ff63 	bl	800d428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d562:	f001 fa55 	bl	800ea10 <vTaskSwitchContext>
	prvTaskExitError();
 800d566:	f7ff ff17 	bl	800d398 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d56a:	2300      	movs	r3, #0
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3718      	adds	r7, #24
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}
 800d574:	e000ed00 	.word	0xe000ed00
 800d578:	410fc271 	.word	0x410fc271
 800d57c:	410fc270 	.word	0x410fc270
 800d580:	e000e400 	.word	0xe000e400
 800d584:	24004a58 	.word	0x24004a58
 800d588:	24004a5c 	.word	0x24004a5c
 800d58c:	e000ed20 	.word	0xe000ed20
 800d590:	24000028 	.word	0x24000028
 800d594:	e000ef34 	.word	0xe000ef34

0800d598 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d598:	b480      	push	{r7}
 800d59a:	b083      	sub	sp, #12
 800d59c:	af00      	add	r7, sp, #0
	__asm volatile
 800d59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5a2:	f383 8811 	msr	BASEPRI, r3
 800d5a6:	f3bf 8f6f 	isb	sy
 800d5aa:	f3bf 8f4f 	dsb	sy
 800d5ae:	607b      	str	r3, [r7, #4]
}
 800d5b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d5b2:	4b10      	ldr	r3, [pc, #64]	@ (800d5f4 <vPortEnterCritical+0x5c>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	4a0e      	ldr	r2, [pc, #56]	@ (800d5f4 <vPortEnterCritical+0x5c>)
 800d5ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d5bc:	4b0d      	ldr	r3, [pc, #52]	@ (800d5f4 <vPortEnterCritical+0x5c>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d110      	bne.n	800d5e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d5c4:	4b0c      	ldr	r3, [pc, #48]	@ (800d5f8 <vPortEnterCritical+0x60>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	b2db      	uxtb	r3, r3
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d00b      	beq.n	800d5e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800d5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5d2:	f383 8811 	msr	BASEPRI, r3
 800d5d6:	f3bf 8f6f 	isb	sy
 800d5da:	f3bf 8f4f 	dsb	sy
 800d5de:	603b      	str	r3, [r7, #0]
}
 800d5e0:	bf00      	nop
 800d5e2:	bf00      	nop
 800d5e4:	e7fd      	b.n	800d5e2 <vPortEnterCritical+0x4a>
	}
}
 800d5e6:	bf00      	nop
 800d5e8:	370c      	adds	r7, #12
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr
 800d5f2:	bf00      	nop
 800d5f4:	24000028 	.word	0x24000028
 800d5f8:	e000ed04 	.word	0xe000ed04

0800d5fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d602:	4b12      	ldr	r3, [pc, #72]	@ (800d64c <vPortExitCritical+0x50>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d10b      	bne.n	800d622 <vPortExitCritical+0x26>
	__asm volatile
 800d60a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d60e:	f383 8811 	msr	BASEPRI, r3
 800d612:	f3bf 8f6f 	isb	sy
 800d616:	f3bf 8f4f 	dsb	sy
 800d61a:	607b      	str	r3, [r7, #4]
}
 800d61c:	bf00      	nop
 800d61e:	bf00      	nop
 800d620:	e7fd      	b.n	800d61e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d622:	4b0a      	ldr	r3, [pc, #40]	@ (800d64c <vPortExitCritical+0x50>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	3b01      	subs	r3, #1
 800d628:	4a08      	ldr	r2, [pc, #32]	@ (800d64c <vPortExitCritical+0x50>)
 800d62a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d62c:	4b07      	ldr	r3, [pc, #28]	@ (800d64c <vPortExitCritical+0x50>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d105      	bne.n	800d640 <vPortExitCritical+0x44>
 800d634:	2300      	movs	r3, #0
 800d636:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d63e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d640:	bf00      	nop
 800d642:	370c      	adds	r7, #12
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr
 800d64c:	24000028 	.word	0x24000028

0800d650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d650:	f3ef 8009 	mrs	r0, PSP
 800d654:	f3bf 8f6f 	isb	sy
 800d658:	4b15      	ldr	r3, [pc, #84]	@ (800d6b0 <pxCurrentTCBConst>)
 800d65a:	681a      	ldr	r2, [r3, #0]
 800d65c:	f01e 0f10 	tst.w	lr, #16
 800d660:	bf08      	it	eq
 800d662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d66a:	6010      	str	r0, [r2, #0]
 800d66c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d670:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d674:	f380 8811 	msr	BASEPRI, r0
 800d678:	f3bf 8f4f 	dsb	sy
 800d67c:	f3bf 8f6f 	isb	sy
 800d680:	f001 f9c6 	bl	800ea10 <vTaskSwitchContext>
 800d684:	f04f 0000 	mov.w	r0, #0
 800d688:	f380 8811 	msr	BASEPRI, r0
 800d68c:	bc09      	pop	{r0, r3}
 800d68e:	6819      	ldr	r1, [r3, #0]
 800d690:	6808      	ldr	r0, [r1, #0]
 800d692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d696:	f01e 0f10 	tst.w	lr, #16
 800d69a:	bf08      	it	eq
 800d69c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d6a0:	f380 8809 	msr	PSP, r0
 800d6a4:	f3bf 8f6f 	isb	sy
 800d6a8:	4770      	bx	lr
 800d6aa:	bf00      	nop
 800d6ac:	f3af 8000 	nop.w

0800d6b0 <pxCurrentTCBConst>:
 800d6b0:	24004a60 	.word	0x24004a60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d6b4:	bf00      	nop
 800d6b6:	bf00      	nop

0800d6b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
	__asm volatile
 800d6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6c2:	f383 8811 	msr	BASEPRI, r3
 800d6c6:	f3bf 8f6f 	isb	sy
 800d6ca:	f3bf 8f4f 	dsb	sy
 800d6ce:	607b      	str	r3, [r7, #4]
}
 800d6d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d6d2:	f001 f8e3 	bl	800e89c <xTaskIncrementTick>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d003      	beq.n	800d6e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d6dc:	4b06      	ldr	r3, [pc, #24]	@ (800d6f8 <SysTick_Handler+0x40>)
 800d6de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6e2:	601a      	str	r2, [r3, #0]
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	f383 8811 	msr	BASEPRI, r3
}
 800d6ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d6f0:	bf00      	nop
 800d6f2:	3708      	adds	r7, #8
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}
 800d6f8:	e000ed04 	.word	0xe000ed04

0800d6fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d700:	4b0b      	ldr	r3, [pc, #44]	@ (800d730 <vPortSetupTimerInterrupt+0x34>)
 800d702:	2200      	movs	r2, #0
 800d704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d706:	4b0b      	ldr	r3, [pc, #44]	@ (800d734 <vPortSetupTimerInterrupt+0x38>)
 800d708:	2200      	movs	r2, #0
 800d70a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d70c:	4b0a      	ldr	r3, [pc, #40]	@ (800d738 <vPortSetupTimerInterrupt+0x3c>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4a0a      	ldr	r2, [pc, #40]	@ (800d73c <vPortSetupTimerInterrupt+0x40>)
 800d712:	fba2 2303 	umull	r2, r3, r2, r3
 800d716:	099b      	lsrs	r3, r3, #6
 800d718:	4a09      	ldr	r2, [pc, #36]	@ (800d740 <vPortSetupTimerInterrupt+0x44>)
 800d71a:	3b01      	subs	r3, #1
 800d71c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d71e:	4b04      	ldr	r3, [pc, #16]	@ (800d730 <vPortSetupTimerInterrupt+0x34>)
 800d720:	2207      	movs	r2, #7
 800d722:	601a      	str	r2, [r3, #0]
}
 800d724:	bf00      	nop
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop
 800d730:	e000e010 	.word	0xe000e010
 800d734:	e000e018 	.word	0xe000e018
 800d738:	24000000 	.word	0x24000000
 800d73c:	10624dd3 	.word	0x10624dd3
 800d740:	e000e014 	.word	0xe000e014

0800d744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d744:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d754 <vPortEnableVFP+0x10>
 800d748:	6801      	ldr	r1, [r0, #0]
 800d74a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d74e:	6001      	str	r1, [r0, #0]
 800d750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d752:	bf00      	nop
 800d754:	e000ed88 	.word	0xe000ed88

0800d758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d758:	b480      	push	{r7}
 800d75a:	b085      	sub	sp, #20
 800d75c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d75e:	f3ef 8305 	mrs	r3, IPSR
 800d762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2b0f      	cmp	r3, #15
 800d768:	d915      	bls.n	800d796 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d76a:	4a18      	ldr	r2, [pc, #96]	@ (800d7cc <vPortValidateInterruptPriority+0x74>)
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	4413      	add	r3, r2
 800d770:	781b      	ldrb	r3, [r3, #0]
 800d772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d774:	4b16      	ldr	r3, [pc, #88]	@ (800d7d0 <vPortValidateInterruptPriority+0x78>)
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	7afa      	ldrb	r2, [r7, #11]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d20b      	bcs.n	800d796 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d782:	f383 8811 	msr	BASEPRI, r3
 800d786:	f3bf 8f6f 	isb	sy
 800d78a:	f3bf 8f4f 	dsb	sy
 800d78e:	607b      	str	r3, [r7, #4]
}
 800d790:	bf00      	nop
 800d792:	bf00      	nop
 800d794:	e7fd      	b.n	800d792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d796:	4b0f      	ldr	r3, [pc, #60]	@ (800d7d4 <vPortValidateInterruptPriority+0x7c>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d79e:	4b0e      	ldr	r3, [pc, #56]	@ (800d7d8 <vPortValidateInterruptPriority+0x80>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d90b      	bls.n	800d7be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7aa:	f383 8811 	msr	BASEPRI, r3
 800d7ae:	f3bf 8f6f 	isb	sy
 800d7b2:	f3bf 8f4f 	dsb	sy
 800d7b6:	603b      	str	r3, [r7, #0]
}
 800d7b8:	bf00      	nop
 800d7ba:	bf00      	nop
 800d7bc:	e7fd      	b.n	800d7ba <vPortValidateInterruptPriority+0x62>
	}
 800d7be:	bf00      	nop
 800d7c0:	3714      	adds	r7, #20
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr
 800d7ca:	bf00      	nop
 800d7cc:	e000e3f0 	.word	0xe000e3f0
 800d7d0:	24004a58 	.word	0x24004a58
 800d7d4:	e000ed0c 	.word	0xe000ed0c
 800d7d8:	24004a5c 	.word	0x24004a5c

0800d7dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d10b      	bne.n	800d808 <xQueueGenericReset+0x2c>
	__asm volatile
 800d7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7f4:	f383 8811 	msr	BASEPRI, r3
 800d7f8:	f3bf 8f6f 	isb	sy
 800d7fc:	f3bf 8f4f 	dsb	sy
 800d800:	60bb      	str	r3, [r7, #8]
}
 800d802:	bf00      	nop
 800d804:	bf00      	nop
 800d806:	e7fd      	b.n	800d804 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d808:	f7ff fec6 	bl	800d598 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681a      	ldr	r2, [r3, #0]
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d814:	68f9      	ldr	r1, [r7, #12]
 800d816:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d818:	fb01 f303 	mul.w	r3, r1, r3
 800d81c:	441a      	add	r2, r3
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	2200      	movs	r2, #0
 800d826:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d838:	3b01      	subs	r3, #1
 800d83a:	68f9      	ldr	r1, [r7, #12]
 800d83c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d83e:	fb01 f303 	mul.w	r3, r1, r3
 800d842:	441a      	add	r2, r3
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	22ff      	movs	r2, #255	@ 0xff
 800d84c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	22ff      	movs	r2, #255	@ 0xff
 800d854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d114      	bne.n	800d888 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	691b      	ldr	r3, [r3, #16]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d01a      	beq.n	800d89c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	3310      	adds	r3, #16
 800d86a:	4618      	mov	r0, r3
 800d86c:	f001 f95a 	bl	800eb24 <xTaskRemoveFromEventList>
 800d870:	4603      	mov	r3, r0
 800d872:	2b00      	cmp	r3, #0
 800d874:	d012      	beq.n	800d89c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d876:	4b0d      	ldr	r3, [pc, #52]	@ (800d8ac <xQueueGenericReset+0xd0>)
 800d878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d87c:	601a      	str	r2, [r3, #0]
 800d87e:	f3bf 8f4f 	dsb	sy
 800d882:	f3bf 8f6f 	isb	sy
 800d886:	e009      	b.n	800d89c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	3310      	adds	r3, #16
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7ff fc9b 	bl	800d1c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	3324      	adds	r3, #36	@ 0x24
 800d896:	4618      	mov	r0, r3
 800d898:	f7ff fc96 	bl	800d1c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d89c:	f7ff feae 	bl	800d5fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d8a0:	2301      	movs	r3, #1
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	e000ed04 	.word	0xe000ed04

0800d8b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b08e      	sub	sp, #56	@ 0x38
 800d8b4:	af02      	add	r7, sp, #8
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	607a      	str	r2, [r7, #4]
 800d8bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d10b      	bne.n	800d8dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d8c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8c8:	f383 8811 	msr	BASEPRI, r3
 800d8cc:	f3bf 8f6f 	isb	sy
 800d8d0:	f3bf 8f4f 	dsb	sy
 800d8d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d8d6:	bf00      	nop
 800d8d8:	bf00      	nop
 800d8da:	e7fd      	b.n	800d8d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d10b      	bne.n	800d8fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d8e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8e6:	f383 8811 	msr	BASEPRI, r3
 800d8ea:	f3bf 8f6f 	isb	sy
 800d8ee:	f3bf 8f4f 	dsb	sy
 800d8f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d8f4:	bf00      	nop
 800d8f6:	bf00      	nop
 800d8f8:	e7fd      	b.n	800d8f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d002      	beq.n	800d906 <xQueueGenericCreateStatic+0x56>
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d001      	beq.n	800d90a <xQueueGenericCreateStatic+0x5a>
 800d906:	2301      	movs	r3, #1
 800d908:	e000      	b.n	800d90c <xQueueGenericCreateStatic+0x5c>
 800d90a:	2300      	movs	r3, #0
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d10b      	bne.n	800d928 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d914:	f383 8811 	msr	BASEPRI, r3
 800d918:	f3bf 8f6f 	isb	sy
 800d91c:	f3bf 8f4f 	dsb	sy
 800d920:	623b      	str	r3, [r7, #32]
}
 800d922:	bf00      	nop
 800d924:	bf00      	nop
 800d926:	e7fd      	b.n	800d924 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d102      	bne.n	800d934 <xQueueGenericCreateStatic+0x84>
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d101      	bne.n	800d938 <xQueueGenericCreateStatic+0x88>
 800d934:	2301      	movs	r3, #1
 800d936:	e000      	b.n	800d93a <xQueueGenericCreateStatic+0x8a>
 800d938:	2300      	movs	r3, #0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d10b      	bne.n	800d956 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d942:	f383 8811 	msr	BASEPRI, r3
 800d946:	f3bf 8f6f 	isb	sy
 800d94a:	f3bf 8f4f 	dsb	sy
 800d94e:	61fb      	str	r3, [r7, #28]
}
 800d950:	bf00      	nop
 800d952:	bf00      	nop
 800d954:	e7fd      	b.n	800d952 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d956:	2348      	movs	r3, #72	@ 0x48
 800d958:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	2b48      	cmp	r3, #72	@ 0x48
 800d95e:	d00b      	beq.n	800d978 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d964:	f383 8811 	msr	BASEPRI, r3
 800d968:	f3bf 8f6f 	isb	sy
 800d96c:	f3bf 8f4f 	dsb	sy
 800d970:	61bb      	str	r3, [r7, #24]
}
 800d972:	bf00      	nop
 800d974:	bf00      	nop
 800d976:	e7fd      	b.n	800d974 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d978:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d97e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d980:	2b00      	cmp	r3, #0
 800d982:	d00d      	beq.n	800d9a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d986:	2201      	movs	r2, #1
 800d988:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d98c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d992:	9300      	str	r3, [sp, #0]
 800d994:	4613      	mov	r3, r2
 800d996:	687a      	ldr	r2, [r7, #4]
 800d998:	68b9      	ldr	r1, [r7, #8]
 800d99a:	68f8      	ldr	r0, [r7, #12]
 800d99c:	f000 f840 	bl	800da20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d9a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3730      	adds	r7, #48	@ 0x30
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}

0800d9aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d9aa:	b580      	push	{r7, lr}
 800d9ac:	b08a      	sub	sp, #40	@ 0x28
 800d9ae:	af02      	add	r7, sp, #8
 800d9b0:	60f8      	str	r0, [r7, #12]
 800d9b2:	60b9      	str	r1, [r7, #8]
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d10b      	bne.n	800d9d6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800d9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9c2:	f383 8811 	msr	BASEPRI, r3
 800d9c6:	f3bf 8f6f 	isb	sy
 800d9ca:	f3bf 8f4f 	dsb	sy
 800d9ce:	613b      	str	r3, [r7, #16]
}
 800d9d0:	bf00      	nop
 800d9d2:	bf00      	nop
 800d9d4:	e7fd      	b.n	800d9d2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	68ba      	ldr	r2, [r7, #8]
 800d9da:	fb02 f303 	mul.w	r3, r2, r3
 800d9de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d9e0:	69fb      	ldr	r3, [r7, #28]
 800d9e2:	3348      	adds	r3, #72	@ 0x48
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f7ff fa01 	bl	800cdec <pvPortMalloc>
 800d9ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d9ec:	69bb      	ldr	r3, [r7, #24]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d011      	beq.n	800da16 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d9f2:	69bb      	ldr	r3, [r7, #24]
 800d9f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	3348      	adds	r3, #72	@ 0x48
 800d9fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d9fc:	69bb      	ldr	r3, [r7, #24]
 800d9fe:	2200      	movs	r2, #0
 800da00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800da04:	79fa      	ldrb	r2, [r7, #7]
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	9300      	str	r3, [sp, #0]
 800da0a:	4613      	mov	r3, r2
 800da0c:	697a      	ldr	r2, [r7, #20]
 800da0e:	68b9      	ldr	r1, [r7, #8]
 800da10:	68f8      	ldr	r0, [r7, #12]
 800da12:	f000 f805 	bl	800da20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800da16:	69bb      	ldr	r3, [r7, #24]
	}
 800da18:	4618      	mov	r0, r3
 800da1a:	3720      	adds	r7, #32
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b084      	sub	sp, #16
 800da24:	af00      	add	r7, sp, #0
 800da26:	60f8      	str	r0, [r7, #12]
 800da28:	60b9      	str	r1, [r7, #8]
 800da2a:	607a      	str	r2, [r7, #4]
 800da2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d103      	bne.n	800da3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800da34:	69bb      	ldr	r3, [r7, #24]
 800da36:	69ba      	ldr	r2, [r7, #24]
 800da38:	601a      	str	r2, [r3, #0]
 800da3a:	e002      	b.n	800da42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800da3c:	69bb      	ldr	r3, [r7, #24]
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800da42:	69bb      	ldr	r3, [r7, #24]
 800da44:	68fa      	ldr	r2, [r7, #12]
 800da46:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	68ba      	ldr	r2, [r7, #8]
 800da4c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800da4e:	2101      	movs	r1, #1
 800da50:	69b8      	ldr	r0, [r7, #24]
 800da52:	f7ff fec3 	bl	800d7dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800da56:	bf00      	nop
 800da58:	3710      	adds	r7, #16
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
	...

0800da60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b08e      	sub	sp, #56	@ 0x38
 800da64:	af00      	add	r7, sp, #0
 800da66:	60f8      	str	r0, [r7, #12]
 800da68:	60b9      	str	r1, [r7, #8]
 800da6a:	607a      	str	r2, [r7, #4]
 800da6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800da6e:	2300      	movs	r3, #0
 800da70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800da76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d10b      	bne.n	800da94 <xQueueGenericSend+0x34>
	__asm volatile
 800da7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da80:	f383 8811 	msr	BASEPRI, r3
 800da84:	f3bf 8f6f 	isb	sy
 800da88:	f3bf 8f4f 	dsb	sy
 800da8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800da8e:	bf00      	nop
 800da90:	bf00      	nop
 800da92:	e7fd      	b.n	800da90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d103      	bne.n	800daa2 <xQueueGenericSend+0x42>
 800da9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d101      	bne.n	800daa6 <xQueueGenericSend+0x46>
 800daa2:	2301      	movs	r3, #1
 800daa4:	e000      	b.n	800daa8 <xQueueGenericSend+0x48>
 800daa6:	2300      	movs	r3, #0
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d10b      	bne.n	800dac4 <xQueueGenericSend+0x64>
	__asm volatile
 800daac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab0:	f383 8811 	msr	BASEPRI, r3
 800dab4:	f3bf 8f6f 	isb	sy
 800dab8:	f3bf 8f4f 	dsb	sy
 800dabc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dabe:	bf00      	nop
 800dac0:	bf00      	nop
 800dac2:	e7fd      	b.n	800dac0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	2b02      	cmp	r3, #2
 800dac8:	d103      	bne.n	800dad2 <xQueueGenericSend+0x72>
 800daca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dacc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dace:	2b01      	cmp	r3, #1
 800dad0:	d101      	bne.n	800dad6 <xQueueGenericSend+0x76>
 800dad2:	2301      	movs	r3, #1
 800dad4:	e000      	b.n	800dad8 <xQueueGenericSend+0x78>
 800dad6:	2300      	movs	r3, #0
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d10b      	bne.n	800daf4 <xQueueGenericSend+0x94>
	__asm volatile
 800dadc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dae0:	f383 8811 	msr	BASEPRI, r3
 800dae4:	f3bf 8f6f 	isb	sy
 800dae8:	f3bf 8f4f 	dsb	sy
 800daec:	623b      	str	r3, [r7, #32]
}
 800daee:	bf00      	nop
 800daf0:	bf00      	nop
 800daf2:	e7fd      	b.n	800daf0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800daf4:	f001 f9dc 	bl	800eeb0 <xTaskGetSchedulerState>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d102      	bne.n	800db04 <xQueueGenericSend+0xa4>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d101      	bne.n	800db08 <xQueueGenericSend+0xa8>
 800db04:	2301      	movs	r3, #1
 800db06:	e000      	b.n	800db0a <xQueueGenericSend+0xaa>
 800db08:	2300      	movs	r3, #0
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d10b      	bne.n	800db26 <xQueueGenericSend+0xc6>
	__asm volatile
 800db0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db12:	f383 8811 	msr	BASEPRI, r3
 800db16:	f3bf 8f6f 	isb	sy
 800db1a:	f3bf 8f4f 	dsb	sy
 800db1e:	61fb      	str	r3, [r7, #28]
}
 800db20:	bf00      	nop
 800db22:	bf00      	nop
 800db24:	e7fd      	b.n	800db22 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800db26:	f7ff fd37 	bl	800d598 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800db2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db32:	429a      	cmp	r2, r3
 800db34:	d302      	bcc.n	800db3c <xQueueGenericSend+0xdc>
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	2b02      	cmp	r3, #2
 800db3a:	d129      	bne.n	800db90 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800db3c:	683a      	ldr	r2, [r7, #0]
 800db3e:	68b9      	ldr	r1, [r7, #8]
 800db40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800db42:	f000 fa0f 	bl	800df64 <prvCopyDataToQueue>
 800db46:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d010      	beq.n	800db72 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db52:	3324      	adds	r3, #36	@ 0x24
 800db54:	4618      	mov	r0, r3
 800db56:	f000 ffe5 	bl	800eb24 <xTaskRemoveFromEventList>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d013      	beq.n	800db88 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800db60:	4b3f      	ldr	r3, [pc, #252]	@ (800dc60 <xQueueGenericSend+0x200>)
 800db62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db66:	601a      	str	r2, [r3, #0]
 800db68:	f3bf 8f4f 	dsb	sy
 800db6c:	f3bf 8f6f 	isb	sy
 800db70:	e00a      	b.n	800db88 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800db72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db74:	2b00      	cmp	r3, #0
 800db76:	d007      	beq.n	800db88 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800db78:	4b39      	ldr	r3, [pc, #228]	@ (800dc60 <xQueueGenericSend+0x200>)
 800db7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db7e:	601a      	str	r2, [r3, #0]
 800db80:	f3bf 8f4f 	dsb	sy
 800db84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800db88:	f7ff fd38 	bl	800d5fc <vPortExitCritical>
				return pdPASS;
 800db8c:	2301      	movs	r3, #1
 800db8e:	e063      	b.n	800dc58 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d103      	bne.n	800db9e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800db96:	f7ff fd31 	bl	800d5fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800db9a:	2300      	movs	r3, #0
 800db9c:	e05c      	b.n	800dc58 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d106      	bne.n	800dbb2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dba4:	f107 0314 	add.w	r3, r7, #20
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f001 f81f 	bl	800ebec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dbb2:	f7ff fd23 	bl	800d5fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dbb6:	f000 fdc5 	bl	800e744 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dbba:	f7ff fced 	bl	800d598 <vPortEnterCritical>
 800dbbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dbc4:	b25b      	sxtb	r3, r3
 800dbc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbca:	d103      	bne.n	800dbd4 <xQueueGenericSend+0x174>
 800dbcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbce:	2200      	movs	r2, #0
 800dbd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dbd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dbda:	b25b      	sxtb	r3, r3
 800dbdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbe0:	d103      	bne.n	800dbea <xQueueGenericSend+0x18a>
 800dbe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dbea:	f7ff fd07 	bl	800d5fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dbee:	1d3a      	adds	r2, r7, #4
 800dbf0:	f107 0314 	add.w	r3, r7, #20
 800dbf4:	4611      	mov	r1, r2
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f001 f80e 	bl	800ec18 <xTaskCheckForTimeOut>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d124      	bne.n	800dc4c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dc02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dc04:	f000 faa6 	bl	800e154 <prvIsQueueFull>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d018      	beq.n	800dc40 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dc0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc10:	3310      	adds	r3, #16
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	4611      	mov	r1, r2
 800dc16:	4618      	mov	r0, r3
 800dc18:	f000 ff5e 	bl	800ead8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dc1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dc1e:	f000 fa31 	bl	800e084 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dc22:	f000 fd9d 	bl	800e760 <xTaskResumeAll>
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	f47f af7c 	bne.w	800db26 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800dc2e:	4b0c      	ldr	r3, [pc, #48]	@ (800dc60 <xQueueGenericSend+0x200>)
 800dc30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc34:	601a      	str	r2, [r3, #0]
 800dc36:	f3bf 8f4f 	dsb	sy
 800dc3a:	f3bf 8f6f 	isb	sy
 800dc3e:	e772      	b.n	800db26 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dc40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dc42:	f000 fa1f 	bl	800e084 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc46:	f000 fd8b 	bl	800e760 <xTaskResumeAll>
 800dc4a:	e76c      	b.n	800db26 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dc4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dc4e:	f000 fa19 	bl	800e084 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc52:	f000 fd85 	bl	800e760 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dc56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3738      	adds	r7, #56	@ 0x38
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}
 800dc60:	e000ed04 	.word	0xe000ed04

0800dc64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b090      	sub	sp, #64	@ 0x40
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	607a      	str	r2, [r7, #4]
 800dc70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800dc76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d10b      	bne.n	800dc94 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800dc7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc80:	f383 8811 	msr	BASEPRI, r3
 800dc84:	f3bf 8f6f 	isb	sy
 800dc88:	f3bf 8f4f 	dsb	sy
 800dc8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dc8e:	bf00      	nop
 800dc90:	bf00      	nop
 800dc92:	e7fd      	b.n	800dc90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d103      	bne.n	800dca2 <xQueueGenericSendFromISR+0x3e>
 800dc9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d101      	bne.n	800dca6 <xQueueGenericSendFromISR+0x42>
 800dca2:	2301      	movs	r3, #1
 800dca4:	e000      	b.n	800dca8 <xQueueGenericSendFromISR+0x44>
 800dca6:	2300      	movs	r3, #0
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d10b      	bne.n	800dcc4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800dcac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcb0:	f383 8811 	msr	BASEPRI, r3
 800dcb4:	f3bf 8f6f 	isb	sy
 800dcb8:	f3bf 8f4f 	dsb	sy
 800dcbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dcbe:	bf00      	nop
 800dcc0:	bf00      	nop
 800dcc2:	e7fd      	b.n	800dcc0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	2b02      	cmp	r3, #2
 800dcc8:	d103      	bne.n	800dcd2 <xQueueGenericSendFromISR+0x6e>
 800dcca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	d101      	bne.n	800dcd6 <xQueueGenericSendFromISR+0x72>
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	e000      	b.n	800dcd8 <xQueueGenericSendFromISR+0x74>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d10b      	bne.n	800dcf4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800dcdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dce0:	f383 8811 	msr	BASEPRI, r3
 800dce4:	f3bf 8f6f 	isb	sy
 800dce8:	f3bf 8f4f 	dsb	sy
 800dcec:	623b      	str	r3, [r7, #32]
}
 800dcee:	bf00      	nop
 800dcf0:	bf00      	nop
 800dcf2:	e7fd      	b.n	800dcf0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dcf4:	f7ff fd30 	bl	800d758 <vPortValidateInterruptPriority>
	__asm volatile
 800dcf8:	f3ef 8211 	mrs	r2, BASEPRI
 800dcfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd00:	f383 8811 	msr	BASEPRI, r3
 800dd04:	f3bf 8f6f 	isb	sy
 800dd08:	f3bf 8f4f 	dsb	sy
 800dd0c:	61fa      	str	r2, [r7, #28]
 800dd0e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800dd10:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd12:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dd18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d302      	bcc.n	800dd26 <xQueueGenericSendFromISR+0xc2>
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	2b02      	cmp	r3, #2
 800dd24:	d12f      	bne.n	800dd86 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dd26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dd36:	683a      	ldr	r2, [r7, #0]
 800dd38:	68b9      	ldr	r1, [r7, #8]
 800dd3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dd3c:	f000 f912 	bl	800df64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dd40:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800dd44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd48:	d112      	bne.n	800dd70 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d016      	beq.n	800dd80 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd54:	3324      	adds	r3, #36	@ 0x24
 800dd56:	4618      	mov	r0, r3
 800dd58:	f000 fee4 	bl	800eb24 <xTaskRemoveFromEventList>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00e      	beq.n	800dd80 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d00b      	beq.n	800dd80 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	601a      	str	r2, [r3, #0]
 800dd6e:	e007      	b.n	800dd80 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dd70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800dd74:	3301      	adds	r3, #1
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	b25a      	sxtb	r2, r3
 800dd7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800dd80:	2301      	movs	r3, #1
 800dd82:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800dd84:	e001      	b.n	800dd8a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dd86:	2300      	movs	r3, #0
 800dd88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd8c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	f383 8811 	msr	BASEPRI, r3
}
 800dd94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dd96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3740      	adds	r7, #64	@ 0x40
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b08c      	sub	sp, #48	@ 0x30
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	60f8      	str	r0, [r7, #12]
 800dda8:	60b9      	str	r1, [r7, #8]
 800ddaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ddac:	2300      	movs	r3, #0
 800ddae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ddb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d10b      	bne.n	800ddd2 <xQueueReceive+0x32>
	__asm volatile
 800ddba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddbe:	f383 8811 	msr	BASEPRI, r3
 800ddc2:	f3bf 8f6f 	isb	sy
 800ddc6:	f3bf 8f4f 	dsb	sy
 800ddca:	623b      	str	r3, [r7, #32]
}
 800ddcc:	bf00      	nop
 800ddce:	bf00      	nop
 800ddd0:	e7fd      	b.n	800ddce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d103      	bne.n	800dde0 <xQueueReceive+0x40>
 800ddd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d101      	bne.n	800dde4 <xQueueReceive+0x44>
 800dde0:	2301      	movs	r3, #1
 800dde2:	e000      	b.n	800dde6 <xQueueReceive+0x46>
 800dde4:	2300      	movs	r3, #0
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d10b      	bne.n	800de02 <xQueueReceive+0x62>
	__asm volatile
 800ddea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddee:	f383 8811 	msr	BASEPRI, r3
 800ddf2:	f3bf 8f6f 	isb	sy
 800ddf6:	f3bf 8f4f 	dsb	sy
 800ddfa:	61fb      	str	r3, [r7, #28]
}
 800ddfc:	bf00      	nop
 800ddfe:	bf00      	nop
 800de00:	e7fd      	b.n	800ddfe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de02:	f001 f855 	bl	800eeb0 <xTaskGetSchedulerState>
 800de06:	4603      	mov	r3, r0
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d102      	bne.n	800de12 <xQueueReceive+0x72>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d101      	bne.n	800de16 <xQueueReceive+0x76>
 800de12:	2301      	movs	r3, #1
 800de14:	e000      	b.n	800de18 <xQueueReceive+0x78>
 800de16:	2300      	movs	r3, #0
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d10b      	bne.n	800de34 <xQueueReceive+0x94>
	__asm volatile
 800de1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de20:	f383 8811 	msr	BASEPRI, r3
 800de24:	f3bf 8f6f 	isb	sy
 800de28:	f3bf 8f4f 	dsb	sy
 800de2c:	61bb      	str	r3, [r7, #24]
}
 800de2e:	bf00      	nop
 800de30:	bf00      	nop
 800de32:	e7fd      	b.n	800de30 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800de34:	f7ff fbb0 	bl	800d598 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de3c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de40:	2b00      	cmp	r3, #0
 800de42:	d01f      	beq.n	800de84 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800de44:	68b9      	ldr	r1, [r7, #8]
 800de46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de48:	f000 f8f6 	bl	800e038 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800de4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de4e:	1e5a      	subs	r2, r3, #1
 800de50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de52:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de56:	691b      	ldr	r3, [r3, #16]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d00f      	beq.n	800de7c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de5e:	3310      	adds	r3, #16
 800de60:	4618      	mov	r0, r3
 800de62:	f000 fe5f 	bl	800eb24 <xTaskRemoveFromEventList>
 800de66:	4603      	mov	r3, r0
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d007      	beq.n	800de7c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800de6c:	4b3c      	ldr	r3, [pc, #240]	@ (800df60 <xQueueReceive+0x1c0>)
 800de6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de72:	601a      	str	r2, [r3, #0]
 800de74:	f3bf 8f4f 	dsb	sy
 800de78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800de7c:	f7ff fbbe 	bl	800d5fc <vPortExitCritical>
				return pdPASS;
 800de80:	2301      	movs	r3, #1
 800de82:	e069      	b.n	800df58 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d103      	bne.n	800de92 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800de8a:	f7ff fbb7 	bl	800d5fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800de8e:	2300      	movs	r3, #0
 800de90:	e062      	b.n	800df58 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800de92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de94:	2b00      	cmp	r3, #0
 800de96:	d106      	bne.n	800dea6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800de98:	f107 0310 	add.w	r3, r7, #16
 800de9c:	4618      	mov	r0, r3
 800de9e:	f000 fea5 	bl	800ebec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dea2:	2301      	movs	r3, #1
 800dea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dea6:	f7ff fba9 	bl	800d5fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800deaa:	f000 fc4b 	bl	800e744 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800deae:	f7ff fb73 	bl	800d598 <vPortEnterCritical>
 800deb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800deb8:	b25b      	sxtb	r3, r3
 800deba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800debe:	d103      	bne.n	800dec8 <xQueueReceive+0x128>
 800dec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dec2:	2200      	movs	r2, #0
 800dec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dece:	b25b      	sxtb	r3, r3
 800ded0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ded4:	d103      	bne.n	800dede <xQueueReceive+0x13e>
 800ded6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ded8:	2200      	movs	r2, #0
 800deda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dede:	f7ff fb8d 	bl	800d5fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dee2:	1d3a      	adds	r2, r7, #4
 800dee4:	f107 0310 	add.w	r3, r7, #16
 800dee8:	4611      	mov	r1, r2
 800deea:	4618      	mov	r0, r3
 800deec:	f000 fe94 	bl	800ec18 <xTaskCheckForTimeOut>
 800def0:	4603      	mov	r3, r0
 800def2:	2b00      	cmp	r3, #0
 800def4:	d123      	bne.n	800df3e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800def6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800def8:	f000 f916 	bl	800e128 <prvIsQueueEmpty>
 800defc:	4603      	mov	r3, r0
 800defe:	2b00      	cmp	r3, #0
 800df00:	d017      	beq.n	800df32 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df04:	3324      	adds	r3, #36	@ 0x24
 800df06:	687a      	ldr	r2, [r7, #4]
 800df08:	4611      	mov	r1, r2
 800df0a:	4618      	mov	r0, r3
 800df0c:	f000 fde4 	bl	800ead8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800df10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df12:	f000 f8b7 	bl	800e084 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800df16:	f000 fc23 	bl	800e760 <xTaskResumeAll>
 800df1a:	4603      	mov	r3, r0
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d189      	bne.n	800de34 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800df20:	4b0f      	ldr	r3, [pc, #60]	@ (800df60 <xQueueReceive+0x1c0>)
 800df22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df26:	601a      	str	r2, [r3, #0]
 800df28:	f3bf 8f4f 	dsb	sy
 800df2c:	f3bf 8f6f 	isb	sy
 800df30:	e780      	b.n	800de34 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800df32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df34:	f000 f8a6 	bl	800e084 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df38:	f000 fc12 	bl	800e760 <xTaskResumeAll>
 800df3c:	e77a      	b.n	800de34 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800df3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df40:	f000 f8a0 	bl	800e084 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df44:	f000 fc0c 	bl	800e760 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df4a:	f000 f8ed 	bl	800e128 <prvIsQueueEmpty>
 800df4e:	4603      	mov	r3, r0
 800df50:	2b00      	cmp	r3, #0
 800df52:	f43f af6f 	beq.w	800de34 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800df56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3730      	adds	r7, #48	@ 0x30
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	e000ed04 	.word	0xe000ed04

0800df64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b086      	sub	sp, #24
 800df68:	af00      	add	r7, sp, #0
 800df6a:	60f8      	str	r0, [r7, #12]
 800df6c:	60b9      	str	r1, [r7, #8]
 800df6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800df70:	2300      	movs	r3, #0
 800df72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d10d      	bne.n	800df9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d14d      	bne.n	800e026 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	689b      	ldr	r3, [r3, #8]
 800df8e:	4618      	mov	r0, r3
 800df90:	f000 ffac 	bl	800eeec <xTaskPriorityDisinherit>
 800df94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	2200      	movs	r2, #0
 800df9a:	609a      	str	r2, [r3, #8]
 800df9c:	e043      	b.n	800e026 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d119      	bne.n	800dfd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	6858      	ldr	r0, [r3, #4]
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfac:	461a      	mov	r2, r3
 800dfae:	68b9      	ldr	r1, [r7, #8]
 800dfb0:	f001 f966 	bl	800f280 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	685a      	ldr	r2, [r3, #4]
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfbc:	441a      	add	r2, r3
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	685a      	ldr	r2, [r3, #4]
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	689b      	ldr	r3, [r3, #8]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d32b      	bcc.n	800e026 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681a      	ldr	r2, [r3, #0]
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	605a      	str	r2, [r3, #4]
 800dfd6:	e026      	b.n	800e026 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	68d8      	ldr	r0, [r3, #12]
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	68b9      	ldr	r1, [r7, #8]
 800dfe4:	f001 f94c 	bl	800f280 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	68da      	ldr	r2, [r3, #12]
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dff0:	425b      	negs	r3, r3
 800dff2:	441a      	add	r2, r3
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	68da      	ldr	r2, [r3, #12]
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	429a      	cmp	r2, r3
 800e002:	d207      	bcs.n	800e014 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	689a      	ldr	r2, [r3, #8]
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e00c:	425b      	negs	r3, r3
 800e00e:	441a      	add	r2, r3
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2b02      	cmp	r3, #2
 800e018:	d105      	bne.n	800e026 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d002      	beq.n	800e026 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	3b01      	subs	r3, #1
 800e024:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	1c5a      	adds	r2, r3, #1
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e02e:	697b      	ldr	r3, [r7, #20]
}
 800e030:	4618      	mov	r0, r3
 800e032:	3718      	adds	r7, #24
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e046:	2b00      	cmp	r3, #0
 800e048:	d018      	beq.n	800e07c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	68da      	ldr	r2, [r3, #12]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e052:	441a      	add	r2, r3
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	68da      	ldr	r2, [r3, #12]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	689b      	ldr	r3, [r3, #8]
 800e060:	429a      	cmp	r2, r3
 800e062:	d303      	bcc.n	800e06c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	68d9      	ldr	r1, [r3, #12]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e074:	461a      	mov	r2, r3
 800e076:	6838      	ldr	r0, [r7, #0]
 800e078:	f001 f902 	bl	800f280 <memcpy>
	}
}
 800e07c:	bf00      	nop
 800e07e:	3708      	adds	r7, #8
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e08c:	f7ff fa84 	bl	800d598 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e096:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e098:	e011      	b.n	800e0be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d012      	beq.n	800e0c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	3324      	adds	r3, #36	@ 0x24
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f000 fd3c 	bl	800eb24 <xTaskRemoveFromEventList>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d001      	beq.n	800e0b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e0b2:	f000 fe15 	bl	800ece0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e0b6:	7bfb      	ldrb	r3, [r7, #15]
 800e0b8:	3b01      	subs	r3, #1
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e0be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	dce9      	bgt.n	800e09a <prvUnlockQueue+0x16>
 800e0c6:	e000      	b.n	800e0ca <prvUnlockQueue+0x46>
					break;
 800e0c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	22ff      	movs	r2, #255	@ 0xff
 800e0ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e0d2:	f7ff fa93 	bl	800d5fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e0d6:	f7ff fa5f 	bl	800d598 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e0e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e0e2:	e011      	b.n	800e108 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	691b      	ldr	r3, [r3, #16]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d012      	beq.n	800e112 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	3310      	adds	r3, #16
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f000 fd17 	bl	800eb24 <xTaskRemoveFromEventList>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d001      	beq.n	800e100 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e0fc:	f000 fdf0 	bl	800ece0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e100:	7bbb      	ldrb	r3, [r7, #14]
 800e102:	3b01      	subs	r3, #1
 800e104:	b2db      	uxtb	r3, r3
 800e106:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	dce9      	bgt.n	800e0e4 <prvUnlockQueue+0x60>
 800e110:	e000      	b.n	800e114 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e112:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	22ff      	movs	r2, #255	@ 0xff
 800e118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e11c:	f7ff fa6e 	bl	800d5fc <vPortExitCritical>
}
 800e120:	bf00      	nop
 800e122:	3710      	adds	r7, #16
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}

0800e128 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b084      	sub	sp, #16
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e130:	f7ff fa32 	bl	800d598 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d102      	bne.n	800e142 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e13c:	2301      	movs	r3, #1
 800e13e:	60fb      	str	r3, [r7, #12]
 800e140:	e001      	b.n	800e146 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e142:	2300      	movs	r3, #0
 800e144:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e146:	f7ff fa59 	bl	800d5fc <vPortExitCritical>

	return xReturn;
 800e14a:	68fb      	ldr	r3, [r7, #12]
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3710      	adds	r7, #16
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e15c:	f7ff fa1c 	bl	800d598 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e168:	429a      	cmp	r2, r3
 800e16a:	d102      	bne.n	800e172 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e16c:	2301      	movs	r3, #1
 800e16e:	60fb      	str	r3, [r7, #12]
 800e170:	e001      	b.n	800e176 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e172:	2300      	movs	r3, #0
 800e174:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e176:	f7ff fa41 	bl	800d5fc <vPortExitCritical>

	return xReturn;
 800e17a:	68fb      	ldr	r3, [r7, #12]
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3710      	adds	r7, #16
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}

0800e184 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e184:	b580      	push	{r7, lr}
 800e186:	b08e      	sub	sp, #56	@ 0x38
 800e188:	af04      	add	r7, sp, #16
 800e18a:	60f8      	str	r0, [r7, #12]
 800e18c:	60b9      	str	r1, [r7, #8]
 800e18e:	607a      	str	r2, [r7, #4]
 800e190:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e194:	2b00      	cmp	r3, #0
 800e196:	d10b      	bne.n	800e1b0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e19c:	f383 8811 	msr	BASEPRI, r3
 800e1a0:	f3bf 8f6f 	isb	sy
 800e1a4:	f3bf 8f4f 	dsb	sy
 800e1a8:	623b      	str	r3, [r7, #32]
}
 800e1aa:	bf00      	nop
 800e1ac:	bf00      	nop
 800e1ae:	e7fd      	b.n	800e1ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d10b      	bne.n	800e1ce <xTaskCreateStatic+0x4a>
	__asm volatile
 800e1b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1ba:	f383 8811 	msr	BASEPRI, r3
 800e1be:	f3bf 8f6f 	isb	sy
 800e1c2:	f3bf 8f4f 	dsb	sy
 800e1c6:	61fb      	str	r3, [r7, #28]
}
 800e1c8:	bf00      	nop
 800e1ca:	bf00      	nop
 800e1cc:	e7fd      	b.n	800e1ca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e1ce:	23a0      	movs	r3, #160	@ 0xa0
 800e1d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	2ba0      	cmp	r3, #160	@ 0xa0
 800e1d6:	d00b      	beq.n	800e1f0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1dc:	f383 8811 	msr	BASEPRI, r3
 800e1e0:	f3bf 8f6f 	isb	sy
 800e1e4:	f3bf 8f4f 	dsb	sy
 800e1e8:	61bb      	str	r3, [r7, #24]
}
 800e1ea:	bf00      	nop
 800e1ec:	bf00      	nop
 800e1ee:	e7fd      	b.n	800e1ec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e1f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d01e      	beq.n	800e236 <xTaskCreateStatic+0xb2>
 800e1f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d01b      	beq.n	800e236 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e200:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e204:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e206:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e20a:	2202      	movs	r2, #2
 800e20c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e210:	2300      	movs	r3, #0
 800e212:	9303      	str	r3, [sp, #12]
 800e214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e216:	9302      	str	r3, [sp, #8]
 800e218:	f107 0314 	add.w	r3, r7, #20
 800e21c:	9301      	str	r3, [sp, #4]
 800e21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e220:	9300      	str	r3, [sp, #0]
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	687a      	ldr	r2, [r7, #4]
 800e226:	68b9      	ldr	r1, [r7, #8]
 800e228:	68f8      	ldr	r0, [r7, #12]
 800e22a:	f000 f851 	bl	800e2d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e22e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e230:	f000 f8ee 	bl	800e410 <prvAddNewTaskToReadyList>
 800e234:	e001      	b.n	800e23a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e236:	2300      	movs	r3, #0
 800e238:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e23a:	697b      	ldr	r3, [r7, #20]
	}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3728      	adds	r7, #40	@ 0x28
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e244:	b580      	push	{r7, lr}
 800e246:	b08c      	sub	sp, #48	@ 0x30
 800e248:	af04      	add	r7, sp, #16
 800e24a:	60f8      	str	r0, [r7, #12]
 800e24c:	60b9      	str	r1, [r7, #8]
 800e24e:	603b      	str	r3, [r7, #0]
 800e250:	4613      	mov	r3, r2
 800e252:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e254:	88fb      	ldrh	r3, [r7, #6]
 800e256:	009b      	lsls	r3, r3, #2
 800e258:	4618      	mov	r0, r3
 800e25a:	f7fe fdc7 	bl	800cdec <pvPortMalloc>
 800e25e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d00e      	beq.n	800e284 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e266:	20a0      	movs	r0, #160	@ 0xa0
 800e268:	f7fe fdc0 	bl	800cdec <pvPortMalloc>
 800e26c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e26e:	69fb      	ldr	r3, [r7, #28]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d003      	beq.n	800e27c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e274:	69fb      	ldr	r3, [r7, #28]
 800e276:	697a      	ldr	r2, [r7, #20]
 800e278:	631a      	str	r2, [r3, #48]	@ 0x30
 800e27a:	e005      	b.n	800e288 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e27c:	6978      	ldr	r0, [r7, #20]
 800e27e:	f7fe fe83 	bl	800cf88 <vPortFree>
 800e282:	e001      	b.n	800e288 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e284:	2300      	movs	r3, #0
 800e286:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e288:	69fb      	ldr	r3, [r7, #28]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d017      	beq.n	800e2be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e28e:	69fb      	ldr	r3, [r7, #28]
 800e290:	2200      	movs	r2, #0
 800e292:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e296:	88fa      	ldrh	r2, [r7, #6]
 800e298:	2300      	movs	r3, #0
 800e29a:	9303      	str	r3, [sp, #12]
 800e29c:	69fb      	ldr	r3, [r7, #28]
 800e29e:	9302      	str	r3, [sp, #8]
 800e2a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2a2:	9301      	str	r3, [sp, #4]
 800e2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2a6:	9300      	str	r3, [sp, #0]
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	68b9      	ldr	r1, [r7, #8]
 800e2ac:	68f8      	ldr	r0, [r7, #12]
 800e2ae:	f000 f80f 	bl	800e2d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e2b2:	69f8      	ldr	r0, [r7, #28]
 800e2b4:	f000 f8ac 	bl	800e410 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	61bb      	str	r3, [r7, #24]
 800e2bc:	e002      	b.n	800e2c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e2be:	f04f 33ff 	mov.w	r3, #4294967295
 800e2c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e2c4:	69bb      	ldr	r3, [r7, #24]
	}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3720      	adds	r7, #32
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
	...

0800e2d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b088      	sub	sp, #32
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	60f8      	str	r0, [r7, #12]
 800e2d8:	60b9      	str	r1, [r7, #8]
 800e2da:	607a      	str	r2, [r7, #4]
 800e2dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e2e2:	6879      	ldr	r1, [r7, #4]
 800e2e4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e2e8:	440b      	add	r3, r1
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	4413      	add	r3, r2
 800e2ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e2f0:	69bb      	ldr	r3, [r7, #24]
 800e2f2:	f023 0307 	bic.w	r3, r3, #7
 800e2f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e2f8:	69bb      	ldr	r3, [r7, #24]
 800e2fa:	f003 0307 	and.w	r3, r3, #7
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d00b      	beq.n	800e31a <prvInitialiseNewTask+0x4a>
	__asm volatile
 800e302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e306:	f383 8811 	msr	BASEPRI, r3
 800e30a:	f3bf 8f6f 	isb	sy
 800e30e:	f3bf 8f4f 	dsb	sy
 800e312:	617b      	str	r3, [r7, #20]
}
 800e314:	bf00      	nop
 800e316:	bf00      	nop
 800e318:	e7fd      	b.n	800e316 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d01f      	beq.n	800e360 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e320:	2300      	movs	r3, #0
 800e322:	61fb      	str	r3, [r7, #28]
 800e324:	e012      	b.n	800e34c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e326:	68ba      	ldr	r2, [r7, #8]
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	4413      	add	r3, r2
 800e32c:	7819      	ldrb	r1, [r3, #0]
 800e32e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e330:	69fb      	ldr	r3, [r7, #28]
 800e332:	4413      	add	r3, r2
 800e334:	3334      	adds	r3, #52	@ 0x34
 800e336:	460a      	mov	r2, r1
 800e338:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e33a:	68ba      	ldr	r2, [r7, #8]
 800e33c:	69fb      	ldr	r3, [r7, #28]
 800e33e:	4413      	add	r3, r2
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d006      	beq.n	800e354 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e346:	69fb      	ldr	r3, [r7, #28]
 800e348:	3301      	adds	r3, #1
 800e34a:	61fb      	str	r3, [r7, #28]
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	2b0f      	cmp	r3, #15
 800e350:	d9e9      	bls.n	800e326 <prvInitialiseNewTask+0x56>
 800e352:	e000      	b.n	800e356 <prvInitialiseNewTask+0x86>
			{
				break;
 800e354:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e358:	2200      	movs	r2, #0
 800e35a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e35e:	e003      	b.n	800e368 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e362:	2200      	movs	r2, #0
 800e364:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e36a:	2b06      	cmp	r3, #6
 800e36c:	d901      	bls.n	800e372 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e36e:	2306      	movs	r3, #6
 800e370:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e374:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e376:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e37a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e37c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e380:	2200      	movs	r2, #0
 800e382:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e386:	3304      	adds	r3, #4
 800e388:	4618      	mov	r0, r3
 800e38a:	f7fe ff3d 	bl	800d208 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e390:	3318      	adds	r3, #24
 800e392:	4618      	mov	r0, r3
 800e394:	f7fe ff38 	bl	800d208 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e39a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e39c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3a0:	f1c3 0207 	rsb	r2, r3, #7
 800e3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3ac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3c0:	334c      	adds	r3, #76	@ 0x4c
 800e3c2:	224c      	movs	r2, #76	@ 0x4c
 800e3c4:	2100      	movs	r1, #0
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f000 fed0 	bl	800f16c <memset>
 800e3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ce:	4a0d      	ldr	r2, [pc, #52]	@ (800e404 <prvInitialiseNewTask+0x134>)
 800e3d0:	651a      	str	r2, [r3, #80]	@ 0x50
 800e3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3d4:	4a0c      	ldr	r2, [pc, #48]	@ (800e408 <prvInitialiseNewTask+0x138>)
 800e3d6:	655a      	str	r2, [r3, #84]	@ 0x54
 800e3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3da:	4a0c      	ldr	r2, [pc, #48]	@ (800e40c <prvInitialiseNewTask+0x13c>)
 800e3dc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e3de:	683a      	ldr	r2, [r7, #0]
 800e3e0:	68f9      	ldr	r1, [r7, #12]
 800e3e2:	69b8      	ldr	r0, [r7, #24]
 800e3e4:	f7fe ffa4 	bl	800d330 <pxPortInitialiseStack>
 800e3e8:	4602      	mov	r2, r0
 800e3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d002      	beq.n	800e3fa <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e3f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e3fa:	bf00      	nop
 800e3fc:	3720      	adds	r7, #32
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	24004b8c 	.word	0x24004b8c
 800e408:	24004bf4 	.word	0x24004bf4
 800e40c:	24004c5c 	.word	0x24004c5c

0800e410 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e418:	f7ff f8be 	bl	800d598 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e41c:	4b2a      	ldr	r3, [pc, #168]	@ (800e4c8 <prvAddNewTaskToReadyList+0xb8>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	3301      	adds	r3, #1
 800e422:	4a29      	ldr	r2, [pc, #164]	@ (800e4c8 <prvAddNewTaskToReadyList+0xb8>)
 800e424:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e426:	4b29      	ldr	r3, [pc, #164]	@ (800e4cc <prvAddNewTaskToReadyList+0xbc>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d109      	bne.n	800e442 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e42e:	4a27      	ldr	r2, [pc, #156]	@ (800e4cc <prvAddNewTaskToReadyList+0xbc>)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e434:	4b24      	ldr	r3, [pc, #144]	@ (800e4c8 <prvAddNewTaskToReadyList+0xb8>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	2b01      	cmp	r3, #1
 800e43a:	d110      	bne.n	800e45e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e43c:	f000 fc74 	bl	800ed28 <prvInitialiseTaskLists>
 800e440:	e00d      	b.n	800e45e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e442:	4b23      	ldr	r3, [pc, #140]	@ (800e4d0 <prvAddNewTaskToReadyList+0xc0>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d109      	bne.n	800e45e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e44a:	4b20      	ldr	r3, [pc, #128]	@ (800e4cc <prvAddNewTaskToReadyList+0xbc>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e454:	429a      	cmp	r2, r3
 800e456:	d802      	bhi.n	800e45e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e458:	4a1c      	ldr	r2, [pc, #112]	@ (800e4cc <prvAddNewTaskToReadyList+0xbc>)
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e45e:	4b1d      	ldr	r3, [pc, #116]	@ (800e4d4 <prvAddNewTaskToReadyList+0xc4>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	3301      	adds	r3, #1
 800e464:	4a1b      	ldr	r2, [pc, #108]	@ (800e4d4 <prvAddNewTaskToReadyList+0xc4>)
 800e466:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e46c:	2201      	movs	r2, #1
 800e46e:	409a      	lsls	r2, r3
 800e470:	4b19      	ldr	r3, [pc, #100]	@ (800e4d8 <prvAddNewTaskToReadyList+0xc8>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4313      	orrs	r3, r2
 800e476:	4a18      	ldr	r2, [pc, #96]	@ (800e4d8 <prvAddNewTaskToReadyList+0xc8>)
 800e478:	6013      	str	r3, [r2, #0]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e47e:	4613      	mov	r3, r2
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	4413      	add	r3, r2
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	4a15      	ldr	r2, [pc, #84]	@ (800e4dc <prvAddNewTaskToReadyList+0xcc>)
 800e488:	441a      	add	r2, r3
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	3304      	adds	r3, #4
 800e48e:	4619      	mov	r1, r3
 800e490:	4610      	mov	r0, r2
 800e492:	f7fe fec6 	bl	800d222 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e496:	f7ff f8b1 	bl	800d5fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e49a:	4b0d      	ldr	r3, [pc, #52]	@ (800e4d0 <prvAddNewTaskToReadyList+0xc0>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d00e      	beq.n	800e4c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e4a2:	4b0a      	ldr	r3, [pc, #40]	@ (800e4cc <prvAddNewTaskToReadyList+0xbc>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d207      	bcs.n	800e4c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e4b0:	4b0b      	ldr	r3, [pc, #44]	@ (800e4e0 <prvAddNewTaskToReadyList+0xd0>)
 800e4b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4b6:	601a      	str	r2, [r3, #0]
 800e4b8:	f3bf 8f4f 	dsb	sy
 800e4bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e4c0:	bf00      	nop
 800e4c2:	3708      	adds	r7, #8
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}
 800e4c8:	24004b60 	.word	0x24004b60
 800e4cc:	24004a60 	.word	0x24004a60
 800e4d0:	24004b6c 	.word	0x24004b6c
 800e4d4:	24004b7c 	.word	0x24004b7c
 800e4d8:	24004b68 	.word	0x24004b68
 800e4dc:	24004a64 	.word	0x24004a64
 800e4e0:	e000ed04 	.word	0xe000ed04

0800e4e4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b084      	sub	sp, #16
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e4ec:	f7ff f854 	bl	800d598 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d102      	bne.n	800e4fc <vTaskDelete+0x18>
 800e4f6:	4b39      	ldr	r3, [pc, #228]	@ (800e5dc <vTaskDelete+0xf8>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	e000      	b.n	800e4fe <vTaskDelete+0x1a>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	3304      	adds	r3, #4
 800e504:	4618      	mov	r0, r3
 800e506:	f7fe fee9 	bl	800d2dc <uxListRemove>
 800e50a:	4603      	mov	r3, r0
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d115      	bne.n	800e53c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e514:	4932      	ldr	r1, [pc, #200]	@ (800e5e0 <vTaskDelete+0xfc>)
 800e516:	4613      	mov	r3, r2
 800e518:	009b      	lsls	r3, r3, #2
 800e51a:	4413      	add	r3, r2
 800e51c:	009b      	lsls	r3, r3, #2
 800e51e:	440b      	add	r3, r1
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d10a      	bne.n	800e53c <vTaskDelete+0x58>
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e52a:	2201      	movs	r2, #1
 800e52c:	fa02 f303 	lsl.w	r3, r2, r3
 800e530:	43da      	mvns	r2, r3
 800e532:	4b2c      	ldr	r3, [pc, #176]	@ (800e5e4 <vTaskDelete+0x100>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	4013      	ands	r3, r2
 800e538:	4a2a      	ldr	r2, [pc, #168]	@ (800e5e4 <vTaskDelete+0x100>)
 800e53a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e540:	2b00      	cmp	r3, #0
 800e542:	d004      	beq.n	800e54e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	3318      	adds	r3, #24
 800e548:	4618      	mov	r0, r3
 800e54a:	f7fe fec7 	bl	800d2dc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800e54e:	4b26      	ldr	r3, [pc, #152]	@ (800e5e8 <vTaskDelete+0x104>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	3301      	adds	r3, #1
 800e554:	4a24      	ldr	r2, [pc, #144]	@ (800e5e8 <vTaskDelete+0x104>)
 800e556:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800e558:	4b20      	ldr	r3, [pc, #128]	@ (800e5dc <vTaskDelete+0xf8>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	68fa      	ldr	r2, [r7, #12]
 800e55e:	429a      	cmp	r2, r3
 800e560:	d10b      	bne.n	800e57a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	3304      	adds	r3, #4
 800e566:	4619      	mov	r1, r3
 800e568:	4820      	ldr	r0, [pc, #128]	@ (800e5ec <vTaskDelete+0x108>)
 800e56a:	f7fe fe5a 	bl	800d222 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800e56e:	4b20      	ldr	r3, [pc, #128]	@ (800e5f0 <vTaskDelete+0x10c>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	3301      	adds	r3, #1
 800e574:	4a1e      	ldr	r2, [pc, #120]	@ (800e5f0 <vTaskDelete+0x10c>)
 800e576:	6013      	str	r3, [r2, #0]
 800e578:	e009      	b.n	800e58e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800e57a:	4b1e      	ldr	r3, [pc, #120]	@ (800e5f4 <vTaskDelete+0x110>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	3b01      	subs	r3, #1
 800e580:	4a1c      	ldr	r2, [pc, #112]	@ (800e5f4 <vTaskDelete+0x110>)
 800e582:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800e584:	68f8      	ldr	r0, [r7, #12]
 800e586:	f000 fc3d 	bl	800ee04 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800e58a:	f000 fc71 	bl	800ee70 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800e58e:	f7ff f835 	bl	800d5fc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800e592:	4b19      	ldr	r3, [pc, #100]	@ (800e5f8 <vTaskDelete+0x114>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d01c      	beq.n	800e5d4 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 800e59a:	4b10      	ldr	r3, [pc, #64]	@ (800e5dc <vTaskDelete+0xf8>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	68fa      	ldr	r2, [r7, #12]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d117      	bne.n	800e5d4 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800e5a4:	4b15      	ldr	r3, [pc, #84]	@ (800e5fc <vTaskDelete+0x118>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d00b      	beq.n	800e5c4 <vTaskDelete+0xe0>
	__asm volatile
 800e5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5b0:	f383 8811 	msr	BASEPRI, r3
 800e5b4:	f3bf 8f6f 	isb	sy
 800e5b8:	f3bf 8f4f 	dsb	sy
 800e5bc:	60bb      	str	r3, [r7, #8]
}
 800e5be:	bf00      	nop
 800e5c0:	bf00      	nop
 800e5c2:	e7fd      	b.n	800e5c0 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800e5c4:	4b0e      	ldr	r3, [pc, #56]	@ (800e600 <vTaskDelete+0x11c>)
 800e5c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5ca:	601a      	str	r2, [r3, #0]
 800e5cc:	f3bf 8f4f 	dsb	sy
 800e5d0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e5d4:	bf00      	nop
 800e5d6:	3710      	adds	r7, #16
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}
 800e5dc:	24004a60 	.word	0x24004a60
 800e5e0:	24004a64 	.word	0x24004a64
 800e5e4:	24004b68 	.word	0x24004b68
 800e5e8:	24004b7c 	.word	0x24004b7c
 800e5ec:	24004b34 	.word	0x24004b34
 800e5f0:	24004b48 	.word	0x24004b48
 800e5f4:	24004b60 	.word	0x24004b60
 800e5f8:	24004b6c 	.word	0x24004b6c
 800e5fc:	24004b88 	.word	0x24004b88
 800e600:	e000ed04 	.word	0xe000ed04

0800e604 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e60c:	2300      	movs	r3, #0
 800e60e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d018      	beq.n	800e648 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e616:	4b14      	ldr	r3, [pc, #80]	@ (800e668 <vTaskDelay+0x64>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d00b      	beq.n	800e636 <vTaskDelay+0x32>
	__asm volatile
 800e61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e622:	f383 8811 	msr	BASEPRI, r3
 800e626:	f3bf 8f6f 	isb	sy
 800e62a:	f3bf 8f4f 	dsb	sy
 800e62e:	60bb      	str	r3, [r7, #8]
}
 800e630:	bf00      	nop
 800e632:	bf00      	nop
 800e634:	e7fd      	b.n	800e632 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e636:	f000 f885 	bl	800e744 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e63a:	2100      	movs	r1, #0
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f000 fcdd 	bl	800effc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e642:	f000 f88d 	bl	800e760 <xTaskResumeAll>
 800e646:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d107      	bne.n	800e65e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e64e:	4b07      	ldr	r3, [pc, #28]	@ (800e66c <vTaskDelay+0x68>)
 800e650:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e654:	601a      	str	r2, [r3, #0]
 800e656:	f3bf 8f4f 	dsb	sy
 800e65a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e65e:	bf00      	nop
 800e660:	3710      	adds	r7, #16
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}
 800e666:	bf00      	nop
 800e668:	24004b88 	.word	0x24004b88
 800e66c:	e000ed04 	.word	0xe000ed04

0800e670 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b08a      	sub	sp, #40	@ 0x28
 800e674:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e676:	2300      	movs	r3, #0
 800e678:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e67a:	2300      	movs	r3, #0
 800e67c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e67e:	463a      	mov	r2, r7
 800e680:	1d39      	adds	r1, r7, #4
 800e682:	f107 0308 	add.w	r3, r7, #8
 800e686:	4618      	mov	r0, r3
 800e688:	f7f2 f858 	bl	800073c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e68c:	6839      	ldr	r1, [r7, #0]
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	68ba      	ldr	r2, [r7, #8]
 800e692:	9202      	str	r2, [sp, #8]
 800e694:	9301      	str	r3, [sp, #4]
 800e696:	2300      	movs	r3, #0
 800e698:	9300      	str	r3, [sp, #0]
 800e69a:	2300      	movs	r3, #0
 800e69c:	460a      	mov	r2, r1
 800e69e:	4921      	ldr	r1, [pc, #132]	@ (800e724 <vTaskStartScheduler+0xb4>)
 800e6a0:	4821      	ldr	r0, [pc, #132]	@ (800e728 <vTaskStartScheduler+0xb8>)
 800e6a2:	f7ff fd6f 	bl	800e184 <xTaskCreateStatic>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	4a20      	ldr	r2, [pc, #128]	@ (800e72c <vTaskStartScheduler+0xbc>)
 800e6aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e6ac:	4b1f      	ldr	r3, [pc, #124]	@ (800e72c <vTaskStartScheduler+0xbc>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d002      	beq.n	800e6ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	617b      	str	r3, [r7, #20]
 800e6b8:	e001      	b.n	800e6be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d11b      	bne.n	800e6fc <vTaskStartScheduler+0x8c>
	__asm volatile
 800e6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6c8:	f383 8811 	msr	BASEPRI, r3
 800e6cc:	f3bf 8f6f 	isb	sy
 800e6d0:	f3bf 8f4f 	dsb	sy
 800e6d4:	613b      	str	r3, [r7, #16]
}
 800e6d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e6d8:	4b15      	ldr	r3, [pc, #84]	@ (800e730 <vTaskStartScheduler+0xc0>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	334c      	adds	r3, #76	@ 0x4c
 800e6de:	4a15      	ldr	r2, [pc, #84]	@ (800e734 <vTaskStartScheduler+0xc4>)
 800e6e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e6e2:	4b15      	ldr	r3, [pc, #84]	@ (800e738 <vTaskStartScheduler+0xc8>)
 800e6e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e6e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e6ea:	4b14      	ldr	r3, [pc, #80]	@ (800e73c <vTaskStartScheduler+0xcc>)
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e6f0:	4b13      	ldr	r3, [pc, #76]	@ (800e740 <vTaskStartScheduler+0xd0>)
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e6f6:	f7fe feab 	bl	800d450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e6fa:	e00f      	b.n	800e71c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e702:	d10b      	bne.n	800e71c <vTaskStartScheduler+0xac>
	__asm volatile
 800e704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e708:	f383 8811 	msr	BASEPRI, r3
 800e70c:	f3bf 8f6f 	isb	sy
 800e710:	f3bf 8f4f 	dsb	sy
 800e714:	60fb      	str	r3, [r7, #12]
}
 800e716:	bf00      	nop
 800e718:	bf00      	nop
 800e71a:	e7fd      	b.n	800e718 <vTaskStartScheduler+0xa8>
}
 800e71c:	bf00      	nop
 800e71e:	3718      	adds	r7, #24
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}
 800e724:	0800f42c 	.word	0x0800f42c
 800e728:	0800ecf9 	.word	0x0800ecf9
 800e72c:	24004b84 	.word	0x24004b84
 800e730:	24004a60 	.word	0x24004a60
 800e734:	2400002c 	.word	0x2400002c
 800e738:	24004b80 	.word	0x24004b80
 800e73c:	24004b6c 	.word	0x24004b6c
 800e740:	24004b64 	.word	0x24004b64

0800e744 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e744:	b480      	push	{r7}
 800e746:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e748:	4b04      	ldr	r3, [pc, #16]	@ (800e75c <vTaskSuspendAll+0x18>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	3301      	adds	r3, #1
 800e74e:	4a03      	ldr	r2, [pc, #12]	@ (800e75c <vTaskSuspendAll+0x18>)
 800e750:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e752:	bf00      	nop
 800e754:	46bd      	mov	sp, r7
 800e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75a:	4770      	bx	lr
 800e75c:	24004b88 	.word	0x24004b88

0800e760 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b084      	sub	sp, #16
 800e764:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e766:	2300      	movs	r3, #0
 800e768:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e76a:	2300      	movs	r3, #0
 800e76c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e76e:	4b42      	ldr	r3, [pc, #264]	@ (800e878 <xTaskResumeAll+0x118>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d10b      	bne.n	800e78e <xTaskResumeAll+0x2e>
	__asm volatile
 800e776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e77a:	f383 8811 	msr	BASEPRI, r3
 800e77e:	f3bf 8f6f 	isb	sy
 800e782:	f3bf 8f4f 	dsb	sy
 800e786:	603b      	str	r3, [r7, #0]
}
 800e788:	bf00      	nop
 800e78a:	bf00      	nop
 800e78c:	e7fd      	b.n	800e78a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e78e:	f7fe ff03 	bl	800d598 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e792:	4b39      	ldr	r3, [pc, #228]	@ (800e878 <xTaskResumeAll+0x118>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	3b01      	subs	r3, #1
 800e798:	4a37      	ldr	r2, [pc, #220]	@ (800e878 <xTaskResumeAll+0x118>)
 800e79a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e79c:	4b36      	ldr	r3, [pc, #216]	@ (800e878 <xTaskResumeAll+0x118>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d161      	bne.n	800e868 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e7a4:	4b35      	ldr	r3, [pc, #212]	@ (800e87c <xTaskResumeAll+0x11c>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d05d      	beq.n	800e868 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e7ac:	e02e      	b.n	800e80c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7ae:	4b34      	ldr	r3, [pc, #208]	@ (800e880 <xTaskResumeAll+0x120>)
 800e7b0:	68db      	ldr	r3, [r3, #12]
 800e7b2:	68db      	ldr	r3, [r3, #12]
 800e7b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	3318      	adds	r3, #24
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7fe fd8e 	bl	800d2dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	3304      	adds	r3, #4
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7fe fd89 	bl	800d2dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	409a      	lsls	r2, r3
 800e7d2:	4b2c      	ldr	r3, [pc, #176]	@ (800e884 <xTaskResumeAll+0x124>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	4a2a      	ldr	r2, [pc, #168]	@ (800e884 <xTaskResumeAll+0x124>)
 800e7da:	6013      	str	r3, [r2, #0]
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7e0:	4613      	mov	r3, r2
 800e7e2:	009b      	lsls	r3, r3, #2
 800e7e4:	4413      	add	r3, r2
 800e7e6:	009b      	lsls	r3, r3, #2
 800e7e8:	4a27      	ldr	r2, [pc, #156]	@ (800e888 <xTaskResumeAll+0x128>)
 800e7ea:	441a      	add	r2, r3
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	3304      	adds	r3, #4
 800e7f0:	4619      	mov	r1, r3
 800e7f2:	4610      	mov	r0, r2
 800e7f4:	f7fe fd15 	bl	800d222 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7fc:	4b23      	ldr	r3, [pc, #140]	@ (800e88c <xTaskResumeAll+0x12c>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e802:	429a      	cmp	r2, r3
 800e804:	d302      	bcc.n	800e80c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e806:	4b22      	ldr	r3, [pc, #136]	@ (800e890 <xTaskResumeAll+0x130>)
 800e808:	2201      	movs	r2, #1
 800e80a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e80c:	4b1c      	ldr	r3, [pc, #112]	@ (800e880 <xTaskResumeAll+0x120>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d1cc      	bne.n	800e7ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d001      	beq.n	800e81e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e81a:	f000 fb29 	bl	800ee70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e81e:	4b1d      	ldr	r3, [pc, #116]	@ (800e894 <xTaskResumeAll+0x134>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d010      	beq.n	800e84c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e82a:	f000 f837 	bl	800e89c <xTaskIncrementTick>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d002      	beq.n	800e83a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e834:	4b16      	ldr	r3, [pc, #88]	@ (800e890 <xTaskResumeAll+0x130>)
 800e836:	2201      	movs	r2, #1
 800e838:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	3b01      	subs	r3, #1
 800e83e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d1f1      	bne.n	800e82a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e846:	4b13      	ldr	r3, [pc, #76]	@ (800e894 <xTaskResumeAll+0x134>)
 800e848:	2200      	movs	r2, #0
 800e84a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e84c:	4b10      	ldr	r3, [pc, #64]	@ (800e890 <xTaskResumeAll+0x130>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d009      	beq.n	800e868 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e854:	2301      	movs	r3, #1
 800e856:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e858:	4b0f      	ldr	r3, [pc, #60]	@ (800e898 <xTaskResumeAll+0x138>)
 800e85a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e85e:	601a      	str	r2, [r3, #0]
 800e860:	f3bf 8f4f 	dsb	sy
 800e864:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e868:	f7fe fec8 	bl	800d5fc <vPortExitCritical>

	return xAlreadyYielded;
 800e86c:	68bb      	ldr	r3, [r7, #8]
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3710      	adds	r7, #16
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}
 800e876:	bf00      	nop
 800e878:	24004b88 	.word	0x24004b88
 800e87c:	24004b60 	.word	0x24004b60
 800e880:	24004b20 	.word	0x24004b20
 800e884:	24004b68 	.word	0x24004b68
 800e888:	24004a64 	.word	0x24004a64
 800e88c:	24004a60 	.word	0x24004a60
 800e890:	24004b74 	.word	0x24004b74
 800e894:	24004b70 	.word	0x24004b70
 800e898:	e000ed04 	.word	0xe000ed04

0800e89c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b086      	sub	sp, #24
 800e8a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8a6:	4b4f      	ldr	r3, [pc, #316]	@ (800e9e4 <xTaskIncrementTick+0x148>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	f040 808f 	bne.w	800e9ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e8b0:	4b4d      	ldr	r3, [pc, #308]	@ (800e9e8 <xTaskIncrementTick+0x14c>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e8b8:	4a4b      	ldr	r2, [pc, #300]	@ (800e9e8 <xTaskIncrementTick+0x14c>)
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e8be:	693b      	ldr	r3, [r7, #16]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d121      	bne.n	800e908 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e8c4:	4b49      	ldr	r3, [pc, #292]	@ (800e9ec <xTaskIncrementTick+0x150>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d00b      	beq.n	800e8e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8d2:	f383 8811 	msr	BASEPRI, r3
 800e8d6:	f3bf 8f6f 	isb	sy
 800e8da:	f3bf 8f4f 	dsb	sy
 800e8de:	603b      	str	r3, [r7, #0]
}
 800e8e0:	bf00      	nop
 800e8e2:	bf00      	nop
 800e8e4:	e7fd      	b.n	800e8e2 <xTaskIncrementTick+0x46>
 800e8e6:	4b41      	ldr	r3, [pc, #260]	@ (800e9ec <xTaskIncrementTick+0x150>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	60fb      	str	r3, [r7, #12]
 800e8ec:	4b40      	ldr	r3, [pc, #256]	@ (800e9f0 <xTaskIncrementTick+0x154>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4a3e      	ldr	r2, [pc, #248]	@ (800e9ec <xTaskIncrementTick+0x150>)
 800e8f2:	6013      	str	r3, [r2, #0]
 800e8f4:	4a3e      	ldr	r2, [pc, #248]	@ (800e9f0 <xTaskIncrementTick+0x154>)
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	6013      	str	r3, [r2, #0]
 800e8fa:	4b3e      	ldr	r3, [pc, #248]	@ (800e9f4 <xTaskIncrementTick+0x158>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	3301      	adds	r3, #1
 800e900:	4a3c      	ldr	r2, [pc, #240]	@ (800e9f4 <xTaskIncrementTick+0x158>)
 800e902:	6013      	str	r3, [r2, #0]
 800e904:	f000 fab4 	bl	800ee70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e908:	4b3b      	ldr	r3, [pc, #236]	@ (800e9f8 <xTaskIncrementTick+0x15c>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	693a      	ldr	r2, [r7, #16]
 800e90e:	429a      	cmp	r2, r3
 800e910:	d348      	bcc.n	800e9a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e912:	4b36      	ldr	r3, [pc, #216]	@ (800e9ec <xTaskIncrementTick+0x150>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d104      	bne.n	800e926 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e91c:	4b36      	ldr	r3, [pc, #216]	@ (800e9f8 <xTaskIncrementTick+0x15c>)
 800e91e:	f04f 32ff 	mov.w	r2, #4294967295
 800e922:	601a      	str	r2, [r3, #0]
					break;
 800e924:	e03e      	b.n	800e9a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e926:	4b31      	ldr	r3, [pc, #196]	@ (800e9ec <xTaskIncrementTick+0x150>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	68db      	ldr	r3, [r3, #12]
 800e92e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	685b      	ldr	r3, [r3, #4]
 800e934:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e936:	693a      	ldr	r2, [r7, #16]
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d203      	bcs.n	800e946 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e93e:	4a2e      	ldr	r2, [pc, #184]	@ (800e9f8 <xTaskIncrementTick+0x15c>)
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e944:	e02e      	b.n	800e9a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	3304      	adds	r3, #4
 800e94a:	4618      	mov	r0, r3
 800e94c:	f7fe fcc6 	bl	800d2dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e954:	2b00      	cmp	r3, #0
 800e956:	d004      	beq.n	800e962 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	3318      	adds	r3, #24
 800e95c:	4618      	mov	r0, r3
 800e95e:	f7fe fcbd 	bl	800d2dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e966:	2201      	movs	r2, #1
 800e968:	409a      	lsls	r2, r3
 800e96a:	4b24      	ldr	r3, [pc, #144]	@ (800e9fc <xTaskIncrementTick+0x160>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	4313      	orrs	r3, r2
 800e970:	4a22      	ldr	r2, [pc, #136]	@ (800e9fc <xTaskIncrementTick+0x160>)
 800e972:	6013      	str	r3, [r2, #0]
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e978:	4613      	mov	r3, r2
 800e97a:	009b      	lsls	r3, r3, #2
 800e97c:	4413      	add	r3, r2
 800e97e:	009b      	lsls	r3, r3, #2
 800e980:	4a1f      	ldr	r2, [pc, #124]	@ (800ea00 <xTaskIncrementTick+0x164>)
 800e982:	441a      	add	r2, r3
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	3304      	adds	r3, #4
 800e988:	4619      	mov	r1, r3
 800e98a:	4610      	mov	r0, r2
 800e98c:	f7fe fc49 	bl	800d222 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e994:	4b1b      	ldr	r3, [pc, #108]	@ (800ea04 <xTaskIncrementTick+0x168>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d3b9      	bcc.n	800e912 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e99e:	2301      	movs	r3, #1
 800e9a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e9a2:	e7b6      	b.n	800e912 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e9a4:	4b17      	ldr	r3, [pc, #92]	@ (800ea04 <xTaskIncrementTick+0x168>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9aa:	4915      	ldr	r1, [pc, #84]	@ (800ea00 <xTaskIncrementTick+0x164>)
 800e9ac:	4613      	mov	r3, r2
 800e9ae:	009b      	lsls	r3, r3, #2
 800e9b0:	4413      	add	r3, r2
 800e9b2:	009b      	lsls	r3, r3, #2
 800e9b4:	440b      	add	r3, r1
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d901      	bls.n	800e9c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e9bc:	2301      	movs	r3, #1
 800e9be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e9c0:	4b11      	ldr	r3, [pc, #68]	@ (800ea08 <xTaskIncrementTick+0x16c>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d007      	beq.n	800e9d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	617b      	str	r3, [r7, #20]
 800e9cc:	e004      	b.n	800e9d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e9ce:	4b0f      	ldr	r3, [pc, #60]	@ (800ea0c <xTaskIncrementTick+0x170>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	4a0d      	ldr	r2, [pc, #52]	@ (800ea0c <xTaskIncrementTick+0x170>)
 800e9d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e9d8:	697b      	ldr	r3, [r7, #20]
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3718      	adds	r7, #24
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	24004b88 	.word	0x24004b88
 800e9e8:	24004b64 	.word	0x24004b64
 800e9ec:	24004b18 	.word	0x24004b18
 800e9f0:	24004b1c 	.word	0x24004b1c
 800e9f4:	24004b78 	.word	0x24004b78
 800e9f8:	24004b80 	.word	0x24004b80
 800e9fc:	24004b68 	.word	0x24004b68
 800ea00:	24004a64 	.word	0x24004a64
 800ea04:	24004a60 	.word	0x24004a60
 800ea08:	24004b74 	.word	0x24004b74
 800ea0c:	24004b70 	.word	0x24004b70

0800ea10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ea10:	b480      	push	{r7}
 800ea12:	b087      	sub	sp, #28
 800ea14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ea16:	4b2a      	ldr	r3, [pc, #168]	@ (800eac0 <vTaskSwitchContext+0xb0>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d003      	beq.n	800ea26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ea1e:	4b29      	ldr	r3, [pc, #164]	@ (800eac4 <vTaskSwitchContext+0xb4>)
 800ea20:	2201      	movs	r2, #1
 800ea22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ea24:	e045      	b.n	800eab2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800ea26:	4b27      	ldr	r3, [pc, #156]	@ (800eac4 <vTaskSwitchContext+0xb4>)
 800ea28:	2200      	movs	r2, #0
 800ea2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea2c:	4b26      	ldr	r3, [pc, #152]	@ (800eac8 <vTaskSwitchContext+0xb8>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	fab3 f383 	clz	r3, r3
 800ea38:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ea3a:	7afb      	ldrb	r3, [r7, #11]
 800ea3c:	f1c3 031f 	rsb	r3, r3, #31
 800ea40:	617b      	str	r3, [r7, #20]
 800ea42:	4922      	ldr	r1, [pc, #136]	@ (800eacc <vTaskSwitchContext+0xbc>)
 800ea44:	697a      	ldr	r2, [r7, #20]
 800ea46:	4613      	mov	r3, r2
 800ea48:	009b      	lsls	r3, r3, #2
 800ea4a:	4413      	add	r3, r2
 800ea4c:	009b      	lsls	r3, r3, #2
 800ea4e:	440b      	add	r3, r1
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d10b      	bne.n	800ea6e <vTaskSwitchContext+0x5e>
	__asm volatile
 800ea56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea5a:	f383 8811 	msr	BASEPRI, r3
 800ea5e:	f3bf 8f6f 	isb	sy
 800ea62:	f3bf 8f4f 	dsb	sy
 800ea66:	607b      	str	r3, [r7, #4]
}
 800ea68:	bf00      	nop
 800ea6a:	bf00      	nop
 800ea6c:	e7fd      	b.n	800ea6a <vTaskSwitchContext+0x5a>
 800ea6e:	697a      	ldr	r2, [r7, #20]
 800ea70:	4613      	mov	r3, r2
 800ea72:	009b      	lsls	r3, r3, #2
 800ea74:	4413      	add	r3, r2
 800ea76:	009b      	lsls	r3, r3, #2
 800ea78:	4a14      	ldr	r2, [pc, #80]	@ (800eacc <vTaskSwitchContext+0xbc>)
 800ea7a:	4413      	add	r3, r2
 800ea7c:	613b      	str	r3, [r7, #16]
 800ea7e:	693b      	ldr	r3, [r7, #16]
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	685a      	ldr	r2, [r3, #4]
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	605a      	str	r2, [r3, #4]
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	685a      	ldr	r2, [r3, #4]
 800ea8c:	693b      	ldr	r3, [r7, #16]
 800ea8e:	3308      	adds	r3, #8
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d104      	bne.n	800ea9e <vTaskSwitchContext+0x8e>
 800ea94:	693b      	ldr	r3, [r7, #16]
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	685a      	ldr	r2, [r3, #4]
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	605a      	str	r2, [r3, #4]
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	685b      	ldr	r3, [r3, #4]
 800eaa2:	68db      	ldr	r3, [r3, #12]
 800eaa4:	4a0a      	ldr	r2, [pc, #40]	@ (800ead0 <vTaskSwitchContext+0xc0>)
 800eaa6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800eaa8:	4b09      	ldr	r3, [pc, #36]	@ (800ead0 <vTaskSwitchContext+0xc0>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	334c      	adds	r3, #76	@ 0x4c
 800eaae:	4a09      	ldr	r2, [pc, #36]	@ (800ead4 <vTaskSwitchContext+0xc4>)
 800eab0:	6013      	str	r3, [r2, #0]
}
 800eab2:	bf00      	nop
 800eab4:	371c      	adds	r7, #28
 800eab6:	46bd      	mov	sp, r7
 800eab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabc:	4770      	bx	lr
 800eabe:	bf00      	nop
 800eac0:	24004b88 	.word	0x24004b88
 800eac4:	24004b74 	.word	0x24004b74
 800eac8:	24004b68 	.word	0x24004b68
 800eacc:	24004a64 	.word	0x24004a64
 800ead0:	24004a60 	.word	0x24004a60
 800ead4:	2400002c 	.word	0x2400002c

0800ead8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b084      	sub	sp, #16
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d10b      	bne.n	800eb00 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800eae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaec:	f383 8811 	msr	BASEPRI, r3
 800eaf0:	f3bf 8f6f 	isb	sy
 800eaf4:	f3bf 8f4f 	dsb	sy
 800eaf8:	60fb      	str	r3, [r7, #12]
}
 800eafa:	bf00      	nop
 800eafc:	bf00      	nop
 800eafe:	e7fd      	b.n	800eafc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eb00:	4b07      	ldr	r3, [pc, #28]	@ (800eb20 <vTaskPlaceOnEventList+0x48>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	3318      	adds	r3, #24
 800eb06:	4619      	mov	r1, r3
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f7fe fbae 	bl	800d26a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eb0e:	2101      	movs	r1, #1
 800eb10:	6838      	ldr	r0, [r7, #0]
 800eb12:	f000 fa73 	bl	800effc <prvAddCurrentTaskToDelayedList>
}
 800eb16:	bf00      	nop
 800eb18:	3710      	adds	r7, #16
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	24004a60 	.word	0x24004a60

0800eb24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b086      	sub	sp, #24
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	68db      	ldr	r3, [r3, #12]
 800eb32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d10b      	bne.n	800eb52 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800eb3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb3e:	f383 8811 	msr	BASEPRI, r3
 800eb42:	f3bf 8f6f 	isb	sy
 800eb46:	f3bf 8f4f 	dsb	sy
 800eb4a:	60fb      	str	r3, [r7, #12]
}
 800eb4c:	bf00      	nop
 800eb4e:	bf00      	nop
 800eb50:	e7fd      	b.n	800eb4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	3318      	adds	r3, #24
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7fe fbc0 	bl	800d2dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb5c:	4b1d      	ldr	r3, [pc, #116]	@ (800ebd4 <xTaskRemoveFromEventList+0xb0>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d11c      	bne.n	800eb9e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	3304      	adds	r3, #4
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f7fe fbb7 	bl	800d2dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb72:	2201      	movs	r2, #1
 800eb74:	409a      	lsls	r2, r3
 800eb76:	4b18      	ldr	r3, [pc, #96]	@ (800ebd8 <xTaskRemoveFromEventList+0xb4>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	4313      	orrs	r3, r2
 800eb7c:	4a16      	ldr	r2, [pc, #88]	@ (800ebd8 <xTaskRemoveFromEventList+0xb4>)
 800eb7e:	6013      	str	r3, [r2, #0]
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb84:	4613      	mov	r3, r2
 800eb86:	009b      	lsls	r3, r3, #2
 800eb88:	4413      	add	r3, r2
 800eb8a:	009b      	lsls	r3, r3, #2
 800eb8c:	4a13      	ldr	r2, [pc, #76]	@ (800ebdc <xTaskRemoveFromEventList+0xb8>)
 800eb8e:	441a      	add	r2, r3
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	3304      	adds	r3, #4
 800eb94:	4619      	mov	r1, r3
 800eb96:	4610      	mov	r0, r2
 800eb98:	f7fe fb43 	bl	800d222 <vListInsertEnd>
 800eb9c:	e005      	b.n	800ebaa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	3318      	adds	r3, #24
 800eba2:	4619      	mov	r1, r3
 800eba4:	480e      	ldr	r0, [pc, #56]	@ (800ebe0 <xTaskRemoveFromEventList+0xbc>)
 800eba6:	f7fe fb3c 	bl	800d222 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebae:	4b0d      	ldr	r3, [pc, #52]	@ (800ebe4 <xTaskRemoveFromEventList+0xc0>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d905      	bls.n	800ebc4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ebbc:	4b0a      	ldr	r3, [pc, #40]	@ (800ebe8 <xTaskRemoveFromEventList+0xc4>)
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	601a      	str	r2, [r3, #0]
 800ebc2:	e001      	b.n	800ebc8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ebc8:	697b      	ldr	r3, [r7, #20]
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3718      	adds	r7, #24
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}
 800ebd2:	bf00      	nop
 800ebd4:	24004b88 	.word	0x24004b88
 800ebd8:	24004b68 	.word	0x24004b68
 800ebdc:	24004a64 	.word	0x24004a64
 800ebe0:	24004b20 	.word	0x24004b20
 800ebe4:	24004a60 	.word	0x24004a60
 800ebe8:	24004b74 	.word	0x24004b74

0800ebec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ebec:	b480      	push	{r7}
 800ebee:	b083      	sub	sp, #12
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ebf4:	4b06      	ldr	r3, [pc, #24]	@ (800ec10 <vTaskInternalSetTimeOutState+0x24>)
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ebfc:	4b05      	ldr	r3, [pc, #20]	@ (800ec14 <vTaskInternalSetTimeOutState+0x28>)
 800ebfe:	681a      	ldr	r2, [r3, #0]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	605a      	str	r2, [r3, #4]
}
 800ec04:	bf00      	nop
 800ec06:	370c      	adds	r7, #12
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr
 800ec10:	24004b78 	.word	0x24004b78
 800ec14:	24004b64 	.word	0x24004b64

0800ec18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b088      	sub	sp, #32
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d10b      	bne.n	800ec40 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ec28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec2c:	f383 8811 	msr	BASEPRI, r3
 800ec30:	f3bf 8f6f 	isb	sy
 800ec34:	f3bf 8f4f 	dsb	sy
 800ec38:	613b      	str	r3, [r7, #16]
}
 800ec3a:	bf00      	nop
 800ec3c:	bf00      	nop
 800ec3e:	e7fd      	b.n	800ec3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d10b      	bne.n	800ec5e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ec46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec4a:	f383 8811 	msr	BASEPRI, r3
 800ec4e:	f3bf 8f6f 	isb	sy
 800ec52:	f3bf 8f4f 	dsb	sy
 800ec56:	60fb      	str	r3, [r7, #12]
}
 800ec58:	bf00      	nop
 800ec5a:	bf00      	nop
 800ec5c:	e7fd      	b.n	800ec5a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ec5e:	f7fe fc9b 	bl	800d598 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ec62:	4b1d      	ldr	r3, [pc, #116]	@ (800ecd8 <xTaskCheckForTimeOut+0xc0>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	685b      	ldr	r3, [r3, #4]
 800ec6c:	69ba      	ldr	r2, [r7, #24]
 800ec6e:	1ad3      	subs	r3, r2, r3
 800ec70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec7a:	d102      	bne.n	800ec82 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	61fb      	str	r3, [r7, #28]
 800ec80:	e023      	b.n	800ecca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681a      	ldr	r2, [r3, #0]
 800ec86:	4b15      	ldr	r3, [pc, #84]	@ (800ecdc <xTaskCheckForTimeOut+0xc4>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	d007      	beq.n	800ec9e <xTaskCheckForTimeOut+0x86>
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	685b      	ldr	r3, [r3, #4]
 800ec92:	69ba      	ldr	r2, [r7, #24]
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d302      	bcc.n	800ec9e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ec98:	2301      	movs	r3, #1
 800ec9a:	61fb      	str	r3, [r7, #28]
 800ec9c:	e015      	b.n	800ecca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	697a      	ldr	r2, [r7, #20]
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d20b      	bcs.n	800ecc0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	681a      	ldr	r2, [r3, #0]
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	1ad2      	subs	r2, r2, r3
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f7ff ff99 	bl	800ebec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	61fb      	str	r3, [r7, #28]
 800ecbe:	e004      	b.n	800ecca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ecca:	f7fe fc97 	bl	800d5fc <vPortExitCritical>

	return xReturn;
 800ecce:	69fb      	ldr	r3, [r7, #28]
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3720      	adds	r7, #32
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}
 800ecd8:	24004b64 	.word	0x24004b64
 800ecdc:	24004b78 	.word	0x24004b78

0800ece0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ece0:	b480      	push	{r7}
 800ece2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ece4:	4b03      	ldr	r3, [pc, #12]	@ (800ecf4 <vTaskMissedYield+0x14>)
 800ece6:	2201      	movs	r2, #1
 800ece8:	601a      	str	r2, [r3, #0]
}
 800ecea:	bf00      	nop
 800ecec:	46bd      	mov	sp, r7
 800ecee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf2:	4770      	bx	lr
 800ecf4:	24004b74 	.word	0x24004b74

0800ecf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b082      	sub	sp, #8
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ed00:	f000 f852 	bl	800eda8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ed04:	4b06      	ldr	r3, [pc, #24]	@ (800ed20 <prvIdleTask+0x28>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2b01      	cmp	r3, #1
 800ed0a:	d9f9      	bls.n	800ed00 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ed0c:	4b05      	ldr	r3, [pc, #20]	@ (800ed24 <prvIdleTask+0x2c>)
 800ed0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed12:	601a      	str	r2, [r3, #0]
 800ed14:	f3bf 8f4f 	dsb	sy
 800ed18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ed1c:	e7f0      	b.n	800ed00 <prvIdleTask+0x8>
 800ed1e:	bf00      	nop
 800ed20:	24004a64 	.word	0x24004a64
 800ed24:	e000ed04 	.word	0xe000ed04

0800ed28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b082      	sub	sp, #8
 800ed2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed2e:	2300      	movs	r3, #0
 800ed30:	607b      	str	r3, [r7, #4]
 800ed32:	e00c      	b.n	800ed4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ed34:	687a      	ldr	r2, [r7, #4]
 800ed36:	4613      	mov	r3, r2
 800ed38:	009b      	lsls	r3, r3, #2
 800ed3a:	4413      	add	r3, r2
 800ed3c:	009b      	lsls	r3, r3, #2
 800ed3e:	4a12      	ldr	r2, [pc, #72]	@ (800ed88 <prvInitialiseTaskLists+0x60>)
 800ed40:	4413      	add	r3, r2
 800ed42:	4618      	mov	r0, r3
 800ed44:	f7fe fa40 	bl	800d1c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	607b      	str	r3, [r7, #4]
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2b06      	cmp	r3, #6
 800ed52:	d9ef      	bls.n	800ed34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ed54:	480d      	ldr	r0, [pc, #52]	@ (800ed8c <prvInitialiseTaskLists+0x64>)
 800ed56:	f7fe fa37 	bl	800d1c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ed5a:	480d      	ldr	r0, [pc, #52]	@ (800ed90 <prvInitialiseTaskLists+0x68>)
 800ed5c:	f7fe fa34 	bl	800d1c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ed60:	480c      	ldr	r0, [pc, #48]	@ (800ed94 <prvInitialiseTaskLists+0x6c>)
 800ed62:	f7fe fa31 	bl	800d1c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ed66:	480c      	ldr	r0, [pc, #48]	@ (800ed98 <prvInitialiseTaskLists+0x70>)
 800ed68:	f7fe fa2e 	bl	800d1c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ed6c:	480b      	ldr	r0, [pc, #44]	@ (800ed9c <prvInitialiseTaskLists+0x74>)
 800ed6e:	f7fe fa2b 	bl	800d1c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ed72:	4b0b      	ldr	r3, [pc, #44]	@ (800eda0 <prvInitialiseTaskLists+0x78>)
 800ed74:	4a05      	ldr	r2, [pc, #20]	@ (800ed8c <prvInitialiseTaskLists+0x64>)
 800ed76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ed78:	4b0a      	ldr	r3, [pc, #40]	@ (800eda4 <prvInitialiseTaskLists+0x7c>)
 800ed7a:	4a05      	ldr	r2, [pc, #20]	@ (800ed90 <prvInitialiseTaskLists+0x68>)
 800ed7c:	601a      	str	r2, [r3, #0]
}
 800ed7e:	bf00      	nop
 800ed80:	3708      	adds	r7, #8
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}
 800ed86:	bf00      	nop
 800ed88:	24004a64 	.word	0x24004a64
 800ed8c:	24004af0 	.word	0x24004af0
 800ed90:	24004b04 	.word	0x24004b04
 800ed94:	24004b20 	.word	0x24004b20
 800ed98:	24004b34 	.word	0x24004b34
 800ed9c:	24004b4c 	.word	0x24004b4c
 800eda0:	24004b18 	.word	0x24004b18
 800eda4:	24004b1c 	.word	0x24004b1c

0800eda8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b082      	sub	sp, #8
 800edac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800edae:	e019      	b.n	800ede4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800edb0:	f7fe fbf2 	bl	800d598 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edb4:	4b10      	ldr	r3, [pc, #64]	@ (800edf8 <prvCheckTasksWaitingTermination+0x50>)
 800edb6:	68db      	ldr	r3, [r3, #12]
 800edb8:	68db      	ldr	r3, [r3, #12]
 800edba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	3304      	adds	r3, #4
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7fe fa8b 	bl	800d2dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800edc6:	4b0d      	ldr	r3, [pc, #52]	@ (800edfc <prvCheckTasksWaitingTermination+0x54>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	3b01      	subs	r3, #1
 800edcc:	4a0b      	ldr	r2, [pc, #44]	@ (800edfc <prvCheckTasksWaitingTermination+0x54>)
 800edce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800edd0:	4b0b      	ldr	r3, [pc, #44]	@ (800ee00 <prvCheckTasksWaitingTermination+0x58>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	3b01      	subs	r3, #1
 800edd6:	4a0a      	ldr	r2, [pc, #40]	@ (800ee00 <prvCheckTasksWaitingTermination+0x58>)
 800edd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800edda:	f7fe fc0f 	bl	800d5fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f000 f810 	bl	800ee04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ede4:	4b06      	ldr	r3, [pc, #24]	@ (800ee00 <prvCheckTasksWaitingTermination+0x58>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d1e1      	bne.n	800edb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800edec:	bf00      	nop
 800edee:	bf00      	nop
 800edf0:	3708      	adds	r7, #8
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
 800edf6:	bf00      	nop
 800edf8:	24004b34 	.word	0x24004b34
 800edfc:	24004b60 	.word	0x24004b60
 800ee00:	24004b48 	.word	0x24004b48

0800ee04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b084      	sub	sp, #16
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	334c      	adds	r3, #76	@ 0x4c
 800ee10:	4618      	mov	r0, r3
 800ee12:	f000 f9b3 	bl	800f17c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d108      	bne.n	800ee32 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee24:	4618      	mov	r0, r3
 800ee26:	f7fe f8af 	bl	800cf88 <vPortFree>
				vPortFree( pxTCB );
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f7fe f8ac 	bl	800cf88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ee30:	e019      	b.n	800ee66 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ee38:	2b01      	cmp	r3, #1
 800ee3a:	d103      	bne.n	800ee44 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f7fe f8a3 	bl	800cf88 <vPortFree>
	}
 800ee42:	e010      	b.n	800ee66 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ee4a:	2b02      	cmp	r3, #2
 800ee4c:	d00b      	beq.n	800ee66 <prvDeleteTCB+0x62>
	__asm volatile
 800ee4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee52:	f383 8811 	msr	BASEPRI, r3
 800ee56:	f3bf 8f6f 	isb	sy
 800ee5a:	f3bf 8f4f 	dsb	sy
 800ee5e:	60fb      	str	r3, [r7, #12]
}
 800ee60:	bf00      	nop
 800ee62:	bf00      	nop
 800ee64:	e7fd      	b.n	800ee62 <prvDeleteTCB+0x5e>
	}
 800ee66:	bf00      	nop
 800ee68:	3710      	adds	r7, #16
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
	...

0800ee70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ee70:	b480      	push	{r7}
 800ee72:	b083      	sub	sp, #12
 800ee74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee76:	4b0c      	ldr	r3, [pc, #48]	@ (800eea8 <prvResetNextTaskUnblockTime+0x38>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d104      	bne.n	800ee8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ee80:	4b0a      	ldr	r3, [pc, #40]	@ (800eeac <prvResetNextTaskUnblockTime+0x3c>)
 800ee82:	f04f 32ff 	mov.w	r2, #4294967295
 800ee86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ee88:	e008      	b.n	800ee9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee8a:	4b07      	ldr	r3, [pc, #28]	@ (800eea8 <prvResetNextTaskUnblockTime+0x38>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	68db      	ldr	r3, [r3, #12]
 800ee90:	68db      	ldr	r3, [r3, #12]
 800ee92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	685b      	ldr	r3, [r3, #4]
 800ee98:	4a04      	ldr	r2, [pc, #16]	@ (800eeac <prvResetNextTaskUnblockTime+0x3c>)
 800ee9a:	6013      	str	r3, [r2, #0]
}
 800ee9c:	bf00      	nop
 800ee9e:	370c      	adds	r7, #12
 800eea0:	46bd      	mov	sp, r7
 800eea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea6:	4770      	bx	lr
 800eea8:	24004b18 	.word	0x24004b18
 800eeac:	24004b80 	.word	0x24004b80

0800eeb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eeb0:	b480      	push	{r7}
 800eeb2:	b083      	sub	sp, #12
 800eeb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eeb6:	4b0b      	ldr	r3, [pc, #44]	@ (800eee4 <xTaskGetSchedulerState+0x34>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d102      	bne.n	800eec4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eebe:	2301      	movs	r3, #1
 800eec0:	607b      	str	r3, [r7, #4]
 800eec2:	e008      	b.n	800eed6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eec4:	4b08      	ldr	r3, [pc, #32]	@ (800eee8 <xTaskGetSchedulerState+0x38>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d102      	bne.n	800eed2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eecc:	2302      	movs	r3, #2
 800eece:	607b      	str	r3, [r7, #4]
 800eed0:	e001      	b.n	800eed6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eed2:	2300      	movs	r3, #0
 800eed4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eed6:	687b      	ldr	r3, [r7, #4]
	}
 800eed8:	4618      	mov	r0, r3
 800eeda:	370c      	adds	r7, #12
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr
 800eee4:	24004b6c 	.word	0x24004b6c
 800eee8:	24004b88 	.word	0x24004b88

0800eeec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b086      	sub	sp, #24
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eef8:	2300      	movs	r3, #0
 800eefa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d070      	beq.n	800efe4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ef02:	4b3b      	ldr	r3, [pc, #236]	@ (800eff0 <xTaskPriorityDisinherit+0x104>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	693a      	ldr	r2, [r7, #16]
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d00b      	beq.n	800ef24 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ef0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef10:	f383 8811 	msr	BASEPRI, r3
 800ef14:	f3bf 8f6f 	isb	sy
 800ef18:	f3bf 8f4f 	dsb	sy
 800ef1c:	60fb      	str	r3, [r7, #12]
}
 800ef1e:	bf00      	nop
 800ef20:	bf00      	nop
 800ef22:	e7fd      	b.n	800ef20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d10b      	bne.n	800ef44 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ef2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef30:	f383 8811 	msr	BASEPRI, r3
 800ef34:	f3bf 8f6f 	isb	sy
 800ef38:	f3bf 8f4f 	dsb	sy
 800ef3c:	60bb      	str	r3, [r7, #8]
}
 800ef3e:	bf00      	nop
 800ef40:	bf00      	nop
 800ef42:	e7fd      	b.n	800ef40 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ef44:	693b      	ldr	r3, [r7, #16]
 800ef46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef48:	1e5a      	subs	r2, r3, #1
 800ef4a:	693b      	ldr	r3, [r7, #16]
 800ef4c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ef4e:	693b      	ldr	r3, [r7, #16]
 800ef50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef52:	693b      	ldr	r3, [r7, #16]
 800ef54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d044      	beq.n	800efe4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ef5a:	693b      	ldr	r3, [r7, #16]
 800ef5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d140      	bne.n	800efe4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	3304      	adds	r3, #4
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7fe f9b8 	bl	800d2dc <uxListRemove>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d115      	bne.n	800ef9e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef76:	491f      	ldr	r1, [pc, #124]	@ (800eff4 <xTaskPriorityDisinherit+0x108>)
 800ef78:	4613      	mov	r3, r2
 800ef7a:	009b      	lsls	r3, r3, #2
 800ef7c:	4413      	add	r3, r2
 800ef7e:	009b      	lsls	r3, r3, #2
 800ef80:	440b      	add	r3, r1
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d10a      	bne.n	800ef9e <xTaskPriorityDisinherit+0xb2>
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef8c:	2201      	movs	r2, #1
 800ef8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ef92:	43da      	mvns	r2, r3
 800ef94:	4b18      	ldr	r3, [pc, #96]	@ (800eff8 <xTaskPriorityDisinherit+0x10c>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	4013      	ands	r3, r2
 800ef9a:	4a17      	ldr	r2, [pc, #92]	@ (800eff8 <xTaskPriorityDisinherit+0x10c>)
 800ef9c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800efa2:	693b      	ldr	r3, [r7, #16]
 800efa4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efaa:	f1c3 0207 	rsb	r2, r3, #7
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800efb2:	693b      	ldr	r3, [r7, #16]
 800efb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efb6:	2201      	movs	r2, #1
 800efb8:	409a      	lsls	r2, r3
 800efba:	4b0f      	ldr	r3, [pc, #60]	@ (800eff8 <xTaskPriorityDisinherit+0x10c>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	4313      	orrs	r3, r2
 800efc0:	4a0d      	ldr	r2, [pc, #52]	@ (800eff8 <xTaskPriorityDisinherit+0x10c>)
 800efc2:	6013      	str	r3, [r2, #0]
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efc8:	4613      	mov	r3, r2
 800efca:	009b      	lsls	r3, r3, #2
 800efcc:	4413      	add	r3, r2
 800efce:	009b      	lsls	r3, r3, #2
 800efd0:	4a08      	ldr	r2, [pc, #32]	@ (800eff4 <xTaskPriorityDisinherit+0x108>)
 800efd2:	441a      	add	r2, r3
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	3304      	adds	r3, #4
 800efd8:	4619      	mov	r1, r3
 800efda:	4610      	mov	r0, r2
 800efdc:	f7fe f921 	bl	800d222 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800efe0:	2301      	movs	r3, #1
 800efe2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800efe4:	697b      	ldr	r3, [r7, #20]
	}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3718      	adds	r7, #24
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	24004a60 	.word	0x24004a60
 800eff4:	24004a64 	.word	0x24004a64
 800eff8:	24004b68 	.word	0x24004b68

0800effc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b084      	sub	sp, #16
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f006:	4b29      	ldr	r3, [pc, #164]	@ (800f0ac <prvAddCurrentTaskToDelayedList+0xb0>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f00c:	4b28      	ldr	r3, [pc, #160]	@ (800f0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	3304      	adds	r3, #4
 800f012:	4618      	mov	r0, r3
 800f014:	f7fe f962 	bl	800d2dc <uxListRemove>
 800f018:	4603      	mov	r3, r0
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d10b      	bne.n	800f036 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f01e:	4b24      	ldr	r3, [pc, #144]	@ (800f0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f024:	2201      	movs	r2, #1
 800f026:	fa02 f303 	lsl.w	r3, r2, r3
 800f02a:	43da      	mvns	r2, r3
 800f02c:	4b21      	ldr	r3, [pc, #132]	@ (800f0b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	4013      	ands	r3, r2
 800f032:	4a20      	ldr	r2, [pc, #128]	@ (800f0b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f034:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f03c:	d10a      	bne.n	800f054 <prvAddCurrentTaskToDelayedList+0x58>
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d007      	beq.n	800f054 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f044:	4b1a      	ldr	r3, [pc, #104]	@ (800f0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	3304      	adds	r3, #4
 800f04a:	4619      	mov	r1, r3
 800f04c:	481a      	ldr	r0, [pc, #104]	@ (800f0b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f04e:	f7fe f8e8 	bl	800d222 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f052:	e026      	b.n	800f0a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f054:	68fa      	ldr	r2, [r7, #12]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	4413      	add	r3, r2
 800f05a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f05c:	4b14      	ldr	r3, [pc, #80]	@ (800f0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	68ba      	ldr	r2, [r7, #8]
 800f062:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f064:	68ba      	ldr	r2, [r7, #8]
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	429a      	cmp	r2, r3
 800f06a:	d209      	bcs.n	800f080 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f06c:	4b13      	ldr	r3, [pc, #76]	@ (800f0bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800f06e:	681a      	ldr	r2, [r3, #0]
 800f070:	4b0f      	ldr	r3, [pc, #60]	@ (800f0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	3304      	adds	r3, #4
 800f076:	4619      	mov	r1, r3
 800f078:	4610      	mov	r0, r2
 800f07a:	f7fe f8f6 	bl	800d26a <vListInsert>
}
 800f07e:	e010      	b.n	800f0a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f080:	4b0f      	ldr	r3, [pc, #60]	@ (800f0c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f082:	681a      	ldr	r2, [r3, #0]
 800f084:	4b0a      	ldr	r3, [pc, #40]	@ (800f0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	3304      	adds	r3, #4
 800f08a:	4619      	mov	r1, r3
 800f08c:	4610      	mov	r0, r2
 800f08e:	f7fe f8ec 	bl	800d26a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f092:	4b0c      	ldr	r3, [pc, #48]	@ (800f0c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	68ba      	ldr	r2, [r7, #8]
 800f098:	429a      	cmp	r2, r3
 800f09a:	d202      	bcs.n	800f0a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f09c:	4a09      	ldr	r2, [pc, #36]	@ (800f0c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	6013      	str	r3, [r2, #0]
}
 800f0a2:	bf00      	nop
 800f0a4:	3710      	adds	r7, #16
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}
 800f0aa:	bf00      	nop
 800f0ac:	24004b64 	.word	0x24004b64
 800f0b0:	24004a60 	.word	0x24004a60
 800f0b4:	24004b68 	.word	0x24004b68
 800f0b8:	24004b4c 	.word	0x24004b4c
 800f0bc:	24004b1c 	.word	0x24004b1c
 800f0c0:	24004b18 	.word	0x24004b18
 800f0c4:	24004b80 	.word	0x24004b80

0800f0c8 <D6T_getvalue>:
	{
		temp[i] = ((float)sum[i]/5)/10.0f;
	}
}
void D6T_getvalue(I2C_HandleTypeDef *hi2c, int16_t *tP)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b090      	sub	sp, #64	@ 0x40
 800f0cc:	af02      	add	r7, sp, #8
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	6039      	str	r1, [r7, #0]
	uint8_t cmd = 0x4CU;
 800f0d2:	234c      	movs	r3, #76	@ 0x4c
 800f0d4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t buf[35];
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(hi2c, ADDR, &cmd, 1, 1000U);
 800f0d8:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 800f0dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f0e0:	9300      	str	r3, [sp, #0]
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	2114      	movs	r1, #20
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f7f6 fac6 	bl	8005678 <HAL_I2C_Master_Transmit>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	if(ret != HAL_OK)
 800f0f2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d134      	bne.n	800f164 <D6T_getvalue+0x9c>
	{
		/* Do nothing */
	}
	else
	{
		HAL_Delay(2);
 800f0fa:	2002      	movs	r0, #2
 800f0fc:	f7f3 f8c2 	bl	8002284 <HAL_Delay>
		ret = HAL_I2C_Master_Receive(hi2c, ADDR, buf, 35, 1000U);
 800f100:	f107 020c 	add.w	r2, r7, #12
 800f104:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f108:	9300      	str	r3, [sp, #0]
 800f10a:	2323      	movs	r3, #35	@ 0x23
 800f10c:	2114      	movs	r1, #20
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f7f6 fbca 	bl	80058a8 <HAL_I2C_Master_Receive>
 800f114:	4603      	mov	r3, r0
 800f116:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		if(ret != HAL_OK)
 800f11a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d120      	bne.n	800f164 <D6T_getvalue+0x9c>
		{
			/* Do nothing */
		}
		else
		{
				 for(int i=0; i<16; i++)
 800f122:	2300      	movs	r3, #0
 800f124:	637b      	str	r3, [r7, #52]	@ 0x34
 800f126:	e01a      	b.n	800f15e <D6T_getvalue+0x96>
				 {
					 tP[i] =  256*buf[2*i +3] + buf[2*i +2];
 800f128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f12a:	005b      	lsls	r3, r3, #1
 800f12c:	3303      	adds	r3, #3
 800f12e:	3338      	adds	r3, #56	@ 0x38
 800f130:	443b      	add	r3, r7
 800f132:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800f136:	021b      	lsls	r3, r3, #8
 800f138:	b29b      	uxth	r3, r3
 800f13a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f13c:	3201      	adds	r2, #1
 800f13e:	0052      	lsls	r2, r2, #1
 800f140:	3238      	adds	r2, #56	@ 0x38
 800f142:	443a      	add	r2, r7
 800f144:	f812 2c2c 	ldrb.w	r2, [r2, #-44]
 800f148:	4413      	add	r3, r2
 800f14a:	b299      	uxth	r1, r3
 800f14c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f14e:	005b      	lsls	r3, r3, #1
 800f150:	683a      	ldr	r2, [r7, #0]
 800f152:	4413      	add	r3, r2
 800f154:	b20a      	sxth	r2, r1
 800f156:	801a      	strh	r2, [r3, #0]
				 for(int i=0; i<16; i++)
 800f158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f15a:	3301      	adds	r3, #1
 800f15c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f15e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f160:	2b0f      	cmp	r3, #15
 800f162:	dde1      	ble.n	800f128 <D6T_getvalue+0x60>
				 }
		}
	}
}
 800f164:	bf00      	nop
 800f166:	3738      	adds	r7, #56	@ 0x38
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <memset>:
 800f16c:	4402      	add	r2, r0
 800f16e:	4603      	mov	r3, r0
 800f170:	4293      	cmp	r3, r2
 800f172:	d100      	bne.n	800f176 <memset+0xa>
 800f174:	4770      	bx	lr
 800f176:	f803 1b01 	strb.w	r1, [r3], #1
 800f17a:	e7f9      	b.n	800f170 <memset+0x4>

0800f17c <_reclaim_reent>:
 800f17c:	4b29      	ldr	r3, [pc, #164]	@ (800f224 <_reclaim_reent+0xa8>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	4283      	cmp	r3, r0
 800f182:	b570      	push	{r4, r5, r6, lr}
 800f184:	4604      	mov	r4, r0
 800f186:	d04b      	beq.n	800f220 <_reclaim_reent+0xa4>
 800f188:	69c3      	ldr	r3, [r0, #28]
 800f18a:	b1ab      	cbz	r3, 800f1b8 <_reclaim_reent+0x3c>
 800f18c:	68db      	ldr	r3, [r3, #12]
 800f18e:	b16b      	cbz	r3, 800f1ac <_reclaim_reent+0x30>
 800f190:	2500      	movs	r5, #0
 800f192:	69e3      	ldr	r3, [r4, #28]
 800f194:	68db      	ldr	r3, [r3, #12]
 800f196:	5959      	ldr	r1, [r3, r5]
 800f198:	2900      	cmp	r1, #0
 800f19a:	d13b      	bne.n	800f214 <_reclaim_reent+0x98>
 800f19c:	3504      	adds	r5, #4
 800f19e:	2d80      	cmp	r5, #128	@ 0x80
 800f1a0:	d1f7      	bne.n	800f192 <_reclaim_reent+0x16>
 800f1a2:	69e3      	ldr	r3, [r4, #28]
 800f1a4:	4620      	mov	r0, r4
 800f1a6:	68d9      	ldr	r1, [r3, #12]
 800f1a8:	f000 f878 	bl	800f29c <_free_r>
 800f1ac:	69e3      	ldr	r3, [r4, #28]
 800f1ae:	6819      	ldr	r1, [r3, #0]
 800f1b0:	b111      	cbz	r1, 800f1b8 <_reclaim_reent+0x3c>
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	f000 f872 	bl	800f29c <_free_r>
 800f1b8:	6961      	ldr	r1, [r4, #20]
 800f1ba:	b111      	cbz	r1, 800f1c2 <_reclaim_reent+0x46>
 800f1bc:	4620      	mov	r0, r4
 800f1be:	f000 f86d 	bl	800f29c <_free_r>
 800f1c2:	69e1      	ldr	r1, [r4, #28]
 800f1c4:	b111      	cbz	r1, 800f1cc <_reclaim_reent+0x50>
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	f000 f868 	bl	800f29c <_free_r>
 800f1cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f1ce:	b111      	cbz	r1, 800f1d6 <_reclaim_reent+0x5a>
 800f1d0:	4620      	mov	r0, r4
 800f1d2:	f000 f863 	bl	800f29c <_free_r>
 800f1d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f1d8:	b111      	cbz	r1, 800f1e0 <_reclaim_reent+0x64>
 800f1da:	4620      	mov	r0, r4
 800f1dc:	f000 f85e 	bl	800f29c <_free_r>
 800f1e0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f1e2:	b111      	cbz	r1, 800f1ea <_reclaim_reent+0x6e>
 800f1e4:	4620      	mov	r0, r4
 800f1e6:	f000 f859 	bl	800f29c <_free_r>
 800f1ea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f1ec:	b111      	cbz	r1, 800f1f4 <_reclaim_reent+0x78>
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	f000 f854 	bl	800f29c <_free_r>
 800f1f4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f1f6:	b111      	cbz	r1, 800f1fe <_reclaim_reent+0x82>
 800f1f8:	4620      	mov	r0, r4
 800f1fa:	f000 f84f 	bl	800f29c <_free_r>
 800f1fe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f200:	b111      	cbz	r1, 800f208 <_reclaim_reent+0x8c>
 800f202:	4620      	mov	r0, r4
 800f204:	f000 f84a 	bl	800f29c <_free_r>
 800f208:	6a23      	ldr	r3, [r4, #32]
 800f20a:	b14b      	cbz	r3, 800f220 <_reclaim_reent+0xa4>
 800f20c:	4620      	mov	r0, r4
 800f20e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f212:	4718      	bx	r3
 800f214:	680e      	ldr	r6, [r1, #0]
 800f216:	4620      	mov	r0, r4
 800f218:	f000 f840 	bl	800f29c <_free_r>
 800f21c:	4631      	mov	r1, r6
 800f21e:	e7bb      	b.n	800f198 <_reclaim_reent+0x1c>
 800f220:	bd70      	pop	{r4, r5, r6, pc}
 800f222:	bf00      	nop
 800f224:	2400002c 	.word	0x2400002c

0800f228 <__errno>:
 800f228:	4b01      	ldr	r3, [pc, #4]	@ (800f230 <__errno+0x8>)
 800f22a:	6818      	ldr	r0, [r3, #0]
 800f22c:	4770      	bx	lr
 800f22e:	bf00      	nop
 800f230:	2400002c 	.word	0x2400002c

0800f234 <__libc_init_array>:
 800f234:	b570      	push	{r4, r5, r6, lr}
 800f236:	4d0d      	ldr	r5, [pc, #52]	@ (800f26c <__libc_init_array+0x38>)
 800f238:	4c0d      	ldr	r4, [pc, #52]	@ (800f270 <__libc_init_array+0x3c>)
 800f23a:	1b64      	subs	r4, r4, r5
 800f23c:	10a4      	asrs	r4, r4, #2
 800f23e:	2600      	movs	r6, #0
 800f240:	42a6      	cmp	r6, r4
 800f242:	d109      	bne.n	800f258 <__libc_init_array+0x24>
 800f244:	4d0b      	ldr	r5, [pc, #44]	@ (800f274 <__libc_init_array+0x40>)
 800f246:	4c0c      	ldr	r4, [pc, #48]	@ (800f278 <__libc_init_array+0x44>)
 800f248:	f000 f8a2 	bl	800f390 <_init>
 800f24c:	1b64      	subs	r4, r4, r5
 800f24e:	10a4      	asrs	r4, r4, #2
 800f250:	2600      	movs	r6, #0
 800f252:	42a6      	cmp	r6, r4
 800f254:	d105      	bne.n	800f262 <__libc_init_array+0x2e>
 800f256:	bd70      	pop	{r4, r5, r6, pc}
 800f258:	f855 3b04 	ldr.w	r3, [r5], #4
 800f25c:	4798      	blx	r3
 800f25e:	3601      	adds	r6, #1
 800f260:	e7ee      	b.n	800f240 <__libc_init_array+0xc>
 800f262:	f855 3b04 	ldr.w	r3, [r5], #4
 800f266:	4798      	blx	r3
 800f268:	3601      	adds	r6, #1
 800f26a:	e7f2      	b.n	800f252 <__libc_init_array+0x1e>
 800f26c:	0800f47c 	.word	0x0800f47c
 800f270:	0800f47c 	.word	0x0800f47c
 800f274:	0800f47c 	.word	0x0800f47c
 800f278:	0800f480 	.word	0x0800f480

0800f27c <__retarget_lock_acquire_recursive>:
 800f27c:	4770      	bx	lr

0800f27e <__retarget_lock_release_recursive>:
 800f27e:	4770      	bx	lr

0800f280 <memcpy>:
 800f280:	440a      	add	r2, r1
 800f282:	4291      	cmp	r1, r2
 800f284:	f100 33ff 	add.w	r3, r0, #4294967295
 800f288:	d100      	bne.n	800f28c <memcpy+0xc>
 800f28a:	4770      	bx	lr
 800f28c:	b510      	push	{r4, lr}
 800f28e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f292:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f296:	4291      	cmp	r1, r2
 800f298:	d1f9      	bne.n	800f28e <memcpy+0xe>
 800f29a:	bd10      	pop	{r4, pc}

0800f29c <_free_r>:
 800f29c:	b538      	push	{r3, r4, r5, lr}
 800f29e:	4605      	mov	r5, r0
 800f2a0:	2900      	cmp	r1, #0
 800f2a2:	d041      	beq.n	800f328 <_free_r+0x8c>
 800f2a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2a8:	1f0c      	subs	r4, r1, #4
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	bfb8      	it	lt
 800f2ae:	18e4      	addlt	r4, r4, r3
 800f2b0:	f000 f83e 	bl	800f330 <__malloc_lock>
 800f2b4:	4a1d      	ldr	r2, [pc, #116]	@ (800f32c <_free_r+0x90>)
 800f2b6:	6813      	ldr	r3, [r2, #0]
 800f2b8:	b933      	cbnz	r3, 800f2c8 <_free_r+0x2c>
 800f2ba:	6063      	str	r3, [r4, #4]
 800f2bc:	6014      	str	r4, [r2, #0]
 800f2be:	4628      	mov	r0, r5
 800f2c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2c4:	f000 b83a 	b.w	800f33c <__malloc_unlock>
 800f2c8:	42a3      	cmp	r3, r4
 800f2ca:	d908      	bls.n	800f2de <_free_r+0x42>
 800f2cc:	6820      	ldr	r0, [r4, #0]
 800f2ce:	1821      	adds	r1, r4, r0
 800f2d0:	428b      	cmp	r3, r1
 800f2d2:	bf01      	itttt	eq
 800f2d4:	6819      	ldreq	r1, [r3, #0]
 800f2d6:	685b      	ldreq	r3, [r3, #4]
 800f2d8:	1809      	addeq	r1, r1, r0
 800f2da:	6021      	streq	r1, [r4, #0]
 800f2dc:	e7ed      	b.n	800f2ba <_free_r+0x1e>
 800f2de:	461a      	mov	r2, r3
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	b10b      	cbz	r3, 800f2e8 <_free_r+0x4c>
 800f2e4:	42a3      	cmp	r3, r4
 800f2e6:	d9fa      	bls.n	800f2de <_free_r+0x42>
 800f2e8:	6811      	ldr	r1, [r2, #0]
 800f2ea:	1850      	adds	r0, r2, r1
 800f2ec:	42a0      	cmp	r0, r4
 800f2ee:	d10b      	bne.n	800f308 <_free_r+0x6c>
 800f2f0:	6820      	ldr	r0, [r4, #0]
 800f2f2:	4401      	add	r1, r0
 800f2f4:	1850      	adds	r0, r2, r1
 800f2f6:	4283      	cmp	r3, r0
 800f2f8:	6011      	str	r1, [r2, #0]
 800f2fa:	d1e0      	bne.n	800f2be <_free_r+0x22>
 800f2fc:	6818      	ldr	r0, [r3, #0]
 800f2fe:	685b      	ldr	r3, [r3, #4]
 800f300:	6053      	str	r3, [r2, #4]
 800f302:	4408      	add	r0, r1
 800f304:	6010      	str	r0, [r2, #0]
 800f306:	e7da      	b.n	800f2be <_free_r+0x22>
 800f308:	d902      	bls.n	800f310 <_free_r+0x74>
 800f30a:	230c      	movs	r3, #12
 800f30c:	602b      	str	r3, [r5, #0]
 800f30e:	e7d6      	b.n	800f2be <_free_r+0x22>
 800f310:	6820      	ldr	r0, [r4, #0]
 800f312:	1821      	adds	r1, r4, r0
 800f314:	428b      	cmp	r3, r1
 800f316:	bf04      	itt	eq
 800f318:	6819      	ldreq	r1, [r3, #0]
 800f31a:	685b      	ldreq	r3, [r3, #4]
 800f31c:	6063      	str	r3, [r4, #4]
 800f31e:	bf04      	itt	eq
 800f320:	1809      	addeq	r1, r1, r0
 800f322:	6021      	streq	r1, [r4, #0]
 800f324:	6054      	str	r4, [r2, #4]
 800f326:	e7ca      	b.n	800f2be <_free_r+0x22>
 800f328:	bd38      	pop	{r3, r4, r5, pc}
 800f32a:	bf00      	nop
 800f32c:	24004cc8 	.word	0x24004cc8

0800f330 <__malloc_lock>:
 800f330:	4801      	ldr	r0, [pc, #4]	@ (800f338 <__malloc_lock+0x8>)
 800f332:	f7ff bfa3 	b.w	800f27c <__retarget_lock_acquire_recursive>
 800f336:	bf00      	nop
 800f338:	24004cc4 	.word	0x24004cc4

0800f33c <__malloc_unlock>:
 800f33c:	4801      	ldr	r0, [pc, #4]	@ (800f344 <__malloc_unlock+0x8>)
 800f33e:	f7ff bf9e 	b.w	800f27e <__retarget_lock_release_recursive>
 800f342:	bf00      	nop
 800f344:	24004cc4 	.word	0x24004cc4

0800f348 <sqrt>:
 800f348:	b508      	push	{r3, lr}
 800f34a:	ed2d 8b04 	vpush	{d8-d9}
 800f34e:	eeb0 8b40 	vmov.f64	d8, d0
 800f352:	f000 f819 	bl	800f388 <__ieee754_sqrt>
 800f356:	eeb4 8b48 	vcmp.f64	d8, d8
 800f35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f35e:	d60c      	bvs.n	800f37a <sqrt+0x32>
 800f360:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800f380 <sqrt+0x38>
 800f364:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800f368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f36c:	d505      	bpl.n	800f37a <sqrt+0x32>
 800f36e:	f7ff ff5b 	bl	800f228 <__errno>
 800f372:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800f376:	2321      	movs	r3, #33	@ 0x21
 800f378:	6003      	str	r3, [r0, #0]
 800f37a:	ecbd 8b04 	vpop	{d8-d9}
 800f37e:	bd08      	pop	{r3, pc}
	...

0800f388 <__ieee754_sqrt>:
 800f388:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800f38c:	4770      	bx	lr
	...

0800f390 <_init>:
 800f390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f392:	bf00      	nop
 800f394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f396:	bc08      	pop	{r3}
 800f398:	469e      	mov	lr, r3
 800f39a:	4770      	bx	lr

0800f39c <_fini>:
 800f39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f39e:	bf00      	nop
 800f3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3a2:	bc08      	pop	{r3}
 800f3a4:	469e      	mov	lr, r3
 800f3a6:	4770      	bx	lr
